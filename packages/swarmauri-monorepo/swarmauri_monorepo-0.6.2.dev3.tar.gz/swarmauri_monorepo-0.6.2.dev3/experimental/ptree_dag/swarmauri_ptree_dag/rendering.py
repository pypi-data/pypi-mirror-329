"""
rendering.py

This module contains internal rendering functions for the file generation workflow.
It includes methods for:
  - Rendering the project’s YAML (from a .yaml.j2 template) into file records.
  - Rendering a generic field (e.g. an unresolved FILE_NAME) using a given context.
  - Rendering a file template for "COPY" operations.
  - Rendering an agent prompt template for "GENERATE" operations, then calling an external agent.

Note:
  - This module uses Jinja2 for template rendering.
  - It assumes that file paths and templates follow a known structure (e.g., that file records contain an unrendered FILE_NAME
    which is later rendered to obtain the correct template file path, with an expected '.j2' extension).
"""

import os
import yaml
from pprint import pprint
from pydantic import FilePath
from typing import Any, Dict, List
from jinja2 import Environment, FileSystemLoader
from .Jinja2PromptTemplate import j2pt

def _render_project_yaml(global_attrs: Dict[str, Any], 
                         template_file_path: str) -> List[Dict[str, Any]]:
    """
    Renders the project’s .yaml.j2 template using the provided project (global) context
    and returns the parsed file records.
    
    Parameters:
      global_attrs (dict): The project-level context (global attributes).
      template_file_path (str): The full path to the .yaml.j2 template file (e.g., payload.yaml.j2).
    
    Returns:
      list[dict]: The file records parsed from the rendered YAML.
    """
    try:
        j2pt.set_template(FilePath(template_file_path))
        rendered_yaml_str = j2pt.fill(global_attrs)
        data = yaml.safe_load(rendered_yaml_str)
        # If the YAML is a dict with a "FILES" key, return that list.
        if isinstance(data, dict):
            return data.get("FILES", [])
        # Otherwise, assume the YAML is already a list.
        return data
    except Exception as e:
        print(f"[ERROR] Failed to render project YAML from template '{template_file_path}': {e}")
        return []


def _render_field(field_str: str, context: Dict[str, Any]) -> str:
    """
    Renders a generic field string using the provided context.
    This is useful for resolving placeholders (e.g. in an unresolved FILE_NAME).
    
    Parameters:
      field_str (str): The field string containing Jinja2 placeholders.
      context (dict): The context dictionary used for rendering.
    
    Returns:
      str: The rendered field string.
    """
    try:
        j2pt.set_template(field_str)
        rendered_content = j2pt.fill(context)
        return rendered_content
    except Exception as e:
        print(f"[ERROR] Failed to render field '{field_str}': {e}")
        return field_str


def _render_copy_template(file_record: Dict[str, Any], context: Dict[str, Any]) -> str:
    """
    Renders a file’s template for a "COPY" operation.
    It assumes that file_record contains a "FILE_NAME" key representing the unrendered template file path.
    The function renders that field to determine the actual template file location, appends ".j2" to it,
    loads the template using a FileSystemLoader, and renders it with the provided context.
    
    Parameters:
      file_record (dict): The file record (contains an unrendered "FILE_NAME").
      context (dict): The merged context (project, package, module, and file record data).
    
    Returns:
      str: The rendered file content.
    """
    try:
        template_path = file_record.get("FILE_NAME", "NOT_FILE_FOUND")
        j2pt.set_template(FilePath(template_path))
        rendered_content = j2pt.fill(context)
        return rendered_content
    except Exception as e:
        print(f"[ERROR] Failed to render copy template '{template_path}': {e}")
        return ""


def _render_generate_template(file_record: Dict[str, Any], 
                              context: Dict[str, Any], 
                              agent_prompt_template: str,
                              agent_env: Dict[str, str] = {},
                              ) -> str:
    """
    Renders the agent prompt template for a "GENERATE" operation using the provided context,
    then calls an external agent (e.g., an LLM) to generate file content.
    
    Parameters:
      file_record (dict): The file record for which content is being generated.
      context (dict): The merged context (project, package, module, and file record data).
      agent_prompt_template (str): The path to the agent prompt template file.
    
    Returns:
      str: The content generated by the external agent.
    """
    try:
        # Set up a Jinja2 environment with a FileSystemLoader.
        j2pt.set_template(FilePath(agent_prompt_template))
        rendered_prompt = j2pt.fill(context)
        # Call the external agent to generate content.
        # Here we assume a function call_external_agent exists in external.py.
        from .external import call_external_agent
        rendered_content = call_external_agent(rendered_prompt, agent_env)
        return rendered_content
    except Exception as e:
        print(f"[ERROR] Failed to render generate template '{agent_prompt_template}': {e}")
        return ""
