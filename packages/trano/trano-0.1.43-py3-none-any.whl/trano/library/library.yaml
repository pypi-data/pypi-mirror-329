"Buildings":
  "constants": |2

    package Medium = Buildings.Media.Air(extraPropertiesNames={"CO2"}) "Medium model";
    package MediumW = Buildings.Media.Water "Medium model";
    parameter Integer nRoo = 2 "Number of rooms";
      parameter Modelica.Units.SI.Volume VRoo=4*6*3 "Volume of one room";
      parameter Modelica.Units.SI.Power Q_flow_nominal=2200
        "Nominal power of heating plant";
     // Due to the night setback, in which the radiator do not provide heat input into the room,
     // we scale the design power of the radiator loop
     parameter Real scaFacRad = 1.5
        "Scaling factor to scale the power (and mass flow rate) of the radiator loop";
      parameter Modelica.Units.SI.Temperature TSup_nominal=273.15 + 50 + 5
        "Nominal supply temperature for radiators";
      parameter Modelica.Units.SI.Temperature TRet_nominal=273.15 + 40 + 5
        "Nominal return temperature for radiators";
      parameter Modelica.Units.SI.Temperature dTRad_nominal=TSup_nominal -
          TRet_nominal "Nominal temperature difference for radiator loop";
      parameter Modelica.Units.SI.Temperature dTBoi_nominal=20
        "Nominal temperature difference for boiler loop";
      parameter Modelica.Units.SI.MassFlowRate mRad_flow_nominal=scaFacRad*
          Q_flow_nominal/dTRad_nominal/4200
        "Nominal mass flow rate of radiator loop";
      parameter Modelica.Units.SI.MassFlowRate mBoi_flow_nominal=scaFacRad*
          Q_flow_nominal/dTBoi_nominal/4200 "Nominal mass flow rate of boiler loop";
      parameter Modelica.Units.SI.PressureDifference dpPip_nominal=10000
        "Pressure difference of pipe (without valve)";
      parameter Modelica.Units.SI.PressureDifference dpVal_nominal=6000
        "Pressure difference of valve";
      parameter Modelica.Units.SI.PressureDifference dpRoo_nominal=6000
        "Pressure difference of flow leg that serves a room";
      parameter Modelica.Units.SI.PressureDifference dpThrWayVal_nominal=6000
        "Pressure difference of three-way valve";
      parameter Modelica.Units.SI.PressureDifference dp_nominal=dpPip_nominal +
          dpVal_nominal + dpRoo_nominal + dpThrWayVal_nominal
        "Pressure difference of loop";
  "default": !!bool |-
    true
  "merged_external_boundaries": !!bool |-
    false
  "name": |-
    Buildings
  "default_parameters":
    "occupancy":
      "occupancy": 3600*{9, 17}
      "gain": "[40; 75; 40]"
      "heat_gain_if_occupied": 1/7/3
  "templates":
    "construction": |2-
          parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic
              {{ construction.name }}(
          final nLay={{ construction.layers|length }},
          absIR_a=0.9,
          absIR_b=0.9,
          absSol_a=0.6,
          absSol_b=0.6,
          material={
          {%- for layer in construction.layers -%}
              Buildings.HeatTransfer.Data.Solids.Generic(
              x={{ layer.thickness }},
              k={{ layer.material.thermal_conductivity }},
              c={{ layer.material.specific_heat_capacity }},
              d={{ layer.material.density }}){{ "," if not loop.last }}
          {%- endfor %}
          },
          roughness_a=Buildings.HeatTransfer.Types.SurfaceRoughness.Rough)
          annotation (Placement(transformation(extent={% raw %}{{20,84},{34,98}}{% endraw %})));
    "glazing": |2-
          {% set glass_layers =    construction.layers |
              selectattr('layer_type', 'eq', "glass") | list %}
          {% set gas_layers =    construction.layers | selectattr('layer_type', 'eq', "gas") | list %}
          parameter Buildings.HeatTransfer.Data.GlazingSystems.Generic {{ construction.name }}(
          final glass={
          {% for layer in glass_layers %}
              Buildings.HeatTransfer.Data.Glasses.Generic(
              x={{ layer.thickness }},
              k={{ layer.material.thermal_conductivity }},
              tauSol={{ macros.join_list(layer.material.solar_transmittance ) }},
              rhoSol_a={{ macros.join_list(layer.material.solar_reflectance_outside_facing ) }},
              rhoSol_b={{ macros.join_list(layer.material.solar_reflectance_room_facing ) }},
              tauIR={{ layer.material.infrared_transmissivity }},
              absIR_a={{ layer.material.infrared_absorptivity_outside_facing }},
              absIR_b={{ layer.material.infrared_absorptivity_room_facing }})
              {{ "," if not loop.last }}
          {% endfor %}
          },
          {% if gas_layers | length > 0 %}
          final gas={
          {% for layer in gas_layers %}
              {% if layer.layer_type == 'gas' %}
                  Buildings.HeatTransfer.Data.Gases.Air(x={{ layer.thickness }})
                  {{ "," if not loop.last }}
              {% endif %}
          {% endfor %}
          },
          {% endif %}
          UFra={{ construction.u_value_frame }})
          annotation (
          defaultComponentPrefixes="parameter",
          defaultComponentName="datGlaSys");
    "main": |2

      {% for g in glazing %}
          {{ g|safe }}
      {% endfor %}
      {%- for c in construction -%}
          {{ c|safe}}
      {%- endfor %}
    "material": !!null |-
      null
"IDEAS":
  "constants": |2+

    replaceable package Medium = IDEAS.Media.Air(extraPropertiesNames={"CO2"})
    constrainedby Modelica.Media.Interfaces.PartialMedium
    "Medium in the component"
    annotation (choicesAllMatching = true);
    package MediumW = IDEAS.Media.Water "Medium model";
     parameter Integer nRoo = 2 "Number of rooms";
      parameter Modelica.Units.SI.Volume VRoo=4*6*3 "Volume of one room";
      parameter Modelica.Units.SI.Power Q_flow_nominal=2200
        "Nominal power of heating plant";
     // Due to the night setback, in which the radiator do not provide heat input into the room,
     // we scale the design power of the radiator loop
     parameter Real scaFacRad = 1.5
        "Scaling factor to scale the power (and mass flow rate) of the radiator loop";
      parameter Modelica.Units.SI.Temperature TSup_nominal=273.15 + 50 + 5
        "Nominal supply temperature for radiators";
      parameter Modelica.Units.SI.Temperature TRet_nominal=273.15 + 40 + 5
        "Nominal return temperature for radiators";
      parameter Modelica.Units.SI.Temperature dTRad_nominal=TSup_nominal -
          TRet_nominal "Nominal temperature difference for radiator loop";
      parameter Modelica.Units.SI.Temperature dTBoi_nominal=20
        "Nominal temperature difference for boiler loop";
      parameter Modelica.Units.SI.MassFlowRate mRad_flow_nominal=scaFacRad*
          Q_flow_nominal/dTRad_nominal/4200
        "Nominal mass flow rate of radiator loop";
      parameter Modelica.Units.SI.MassFlowRate mBoi_flow_nominal=scaFacRad*
          Q_flow_nominal/dTBoi_nominal/4200 "Nominal mass flow rate of boiler loop";
      parameter Modelica.Units.SI.PressureDifference dpPip_nominal=10000
        "Pressure difference of pipe (without valve)";
      parameter Modelica.Units.SI.PressureDifference dpVal_nominal=6000
        "Pressure difference of valve";
      parameter Modelica.Units.SI.PressureDifference dpRoo_nominal=6000
        "Pressure difference of flow leg that serves a room";
      parameter Modelica.Units.SI.PressureDifference dpThrWayVal_nominal=6000
        "Pressure difference of three-way valve";
      parameter Modelica.Units.SI.PressureDifference dp_nominal=dpPip_nominal +
          dpVal_nominal + dpRoo_nominal + dpThrWayVal_nominal
        "Pressure difference of loop";

  "merged_external_boundaries": !!bool |-
    true
  "name": |-
    IDEAS
  "templates":
    "construction": |2-
            record {{ construction.name }}
          "{{ construction.name }}"
         extends IDEAS.Buildings.Data.Interfaces.Construction(
      {#      incLastLay = IDEAS.Types.Tilt.Wall,#}
            mats={
              {%- for layer in construction.layers -%}
              {{ package_name }}.Data.Materials.{{ layer.material.name }}
              (d={{ layer.thickness }}){{ "," if not loop.last }}
              {%- endfor %}
          });
          end {{ construction.name }};
    "glazing": |-
      record  {{ construction.name }} = IDEAS.Buildings.Data.Interfaces.Glazing (
                final nLay={{ construction.layers|length }},
            final checkLowPerformanceGlazing=false,
                mats={
              {%- for layer in construction.layers -%}
              {{ package_name }}.Data.Materials.{{ layer.material.name }}
              (d={{ layer.thickness }}){{ "," if not loop.last }}
              {%- endfor %}
          },
          final SwTrans=[0, 0.721;
                          10, 0.720;
                          20, 0.718;
                          30, 0.711;
                          40, 0.697;
                          50, 0.665;
                          60, 0.596;
                          70, 0.454;
                          80, 0.218;
                          90, 0.000],
            final SwAbs=[0, 0.082, 0, 0.062;
                        10, 0.082, 0, 0.062;
                        20, 0.084, 0, 0.063;
                        30, 0.086, 0, 0.065;
                        40, 0.090, 0, 0.067;
                        50, 0.094, 0, 0.068;
                        60, 0.101, 0, 0.067;
                        70, 0.108, 0, 0.061;
                        80, 0.112, 0, 0.045;
                        90, 0.000, 0, 0.000],
            final SwTransDif=0.619,
            final SwAbsDif={0.093, 0,  0.063},
            final U_value=2.9,
            final g_value=0.78

          ) "{{ package_name }}";
    "is_package": !!bool |-
      true
    "main": |-
      package Data "Data for transient thermal building simulation"
      extends Modelica.Icons.MaterialPropertiesPackage;

      package Glazing "Library of building glazing systems"
      extends Modelica.Icons.MaterialPropertiesPackage;
      {% for g in glazing %}
          {{ g|safe }}
      {% endfor %}
      end Glazing;

      package Materials "Library of construction materials"
      extends Modelica.Icons.MaterialPropertiesPackage;
      {%- for m in material -%}
          {{ m|safe }}
      {%- endfor %}
      end Materials;
      package Constructions "Library of building envelope constructions"
      {%- for c in construction -%}
          {{ c|safe}}
      {%- endfor %}

      end Constructions;
      end Data;
    "material": |2-

          record {{ construction.name }} = IDEAS.Buildings.Data.Interfaces.Material (
       k={{construction.thermal_conductivity}},
            c={{construction.specific_heat_capacity}},
            rho={{construction.density}},
            epsLw=0.88,
            epsSw=0.55);
