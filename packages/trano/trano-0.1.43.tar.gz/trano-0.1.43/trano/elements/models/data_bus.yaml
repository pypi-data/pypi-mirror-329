"components":
- "classes":
  - |-
    DataBus
  "component_template":
    "bus":
      "real_outputs":
      - "component": |-
          TRoo
        "name": |-
          TZon
        "port": |-
          T
        "target":
          "main": |-
            element.spaces
      - "component": |-
          TRoo1
        "name": |-
          ppmCO2
        "port": |-
          ppm
        "target":
          "main": |-
            element.spaces
    "category": |-
      control
    "template": "\nmodel DataServer\nreplaceable package Medium = Modelica.Media.Interfaces.PartialMedium;\n\
      Modelica.Thermal.HeatTransfer.Sensors.TemperatureSensor[{{ element.spaces |\
      \ length}}]\nTRoo {% raw %}annotation (\nPlacement(transformation(origin={-544,-226},\n\
      extent = {{480, 216}, {500, 236}})));{% endraw %}\nModelica.Thermal.HeatTransfer.Interfaces.HeatPort_a[{{\
      \ element.spaces | length}}]\nport {% raw %}annotation (\nPlacement(transformation(extent={{-112,-10},{-92,10}}),\n\
      iconTransformation(extent = {{-110, -10}, {-90, 10}})));{% endraw %}\nBuildings.Fluid.Sensors.PPM[{{\
      \ element.spaces | length}}] TRoo1(redeclare\npackage Medium = Medium){% raw\
      \ %}annotation (\nPlacement(transformation(origin={-542,-268},\nextent = {{480,\
      \ 216}, {500, 236}})));{% endraw %}\nModelica.Fluid.Interfaces.FluidPort_a[{{\
      \ element.spaces | length}}]\nport_a(redeclare package Medium\n= Medium){% raw\
      \ %}annotation (Placement(transformation(extent={{-116,-58},{-82,-26}}),\niconTransformation(origin\
      \ = {-2, -42}, extent = {{-110, -9}, {-90, 9}})));  {% endraw %}\n{{bus_template}}\n\
      {% for input in element.non_connected_ports %}\n{{ input.input_model | safe}}\n\
      {% endfor %}\n{% if element.validation_data.data %}\n  Modelica.Blocks.Sources.CombiTimeTable\
      \ combiTimeTable(\n    tableOnFile=false,\n    table=[{{ element.validation_data.data\
      \ | safe }}])\n    {% raw %}annotation (Placement(transformation(extent={{-4,-34},{40,10}}))){%\
      \ endraw %};\n{% endif %}\nequation\n{% if element.validation_data.data %}\n\
      {% for index, column in element.validation_data.columns |enumerate %}\nconnect(dataBus.{{\
      \ column }}, combiTimeTable.y[{{index + 1}}]);\n{% endfor %}\n{% endif %}\n\
      {% for index, space in element.spaces|enumerate %}\nconnect(port[{{index + 1}}],TRoo[{{index\
      \ + 1}}]. port);\nconnect(port_a[{{index + 1}}], TRoo1[{{index + 1}}].port);\n\
      {% endfor %}\n{{bus_ports | safe}}\n{% for input in element.non_connected_ports\
      \ %}\nconnect(dataBus.{{ input.name }}{{ input.target.value }},\n{{ input.name\
      \ }}{{input.target.evaluated_element | capitalize}}.y);\n{% endfor %}\nend DataServer;\n\
      \      "
  "figures": []
  "library": |-
    default
  "parameter_processing":
    "function": |-
      default_parameters
  "ports":
  - "multi_connection": !!bool |-
      true
    "names":
    - |-
      port
    "targets":
    - |-
      Space
  - "flow": |-
      inlet
    "multi_connection": !!bool |-
      true
    "names":
    - |-
      port_a
    "targets":
    - |-
      Space
  - "multi_connection": !!bool |-
      true
    "names":
    - |-
      dataBus
    "targets":
    - |-
      System
    - |-
      Control
    "use_counter": !!bool |-
      false
  "template": |2-
        {{package_name}}.Trano.Controls.ventilation.DataServer
            {{ element.name }} (redeclare package
              Medium = Medium)
  "variant": |-
    default
