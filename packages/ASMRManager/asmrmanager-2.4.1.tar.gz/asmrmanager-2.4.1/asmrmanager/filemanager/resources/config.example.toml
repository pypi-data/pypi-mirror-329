# 账号
username = "username"

# 密码
password = "password"

# 代理
proxy = "http://localhost:7890"

# api地址
# api.asmr-100.com, api.asmr-300.com，api.asmr.one均可，请视网络情况修改
api_channel = 'api.asmr-200.com'

# 下载文件的临时存放位置
download_path = "/path/to/some/place"

# 文件最终存储位置
# 使用review后，如果文件在download_path，将自动移至storage_path
storage_path = "/path/to/some/place"

# 使用asmr view 的时候会在这个位置创建一个软链接或压缩文件，方便查找。
# 如不使用 view 方法可以设为空
view_path = "/path/to/some/place"

# 过滤掉那些你不喜欢的标签
tag_filter = ["tagname1", "tagname2"]

# 编辑sql用的默认编辑器, 如果需使用powershell脚本例如lvim，
# 此处可填入 'pwsh -nop -f /path/to/lvim.ps1'
editor = "code --wait"

# 下载所用的工具，可选则idm或aria2，请注意需安装对应的依赖项
download_method = "idm"

# 使用的播放器，可选则pygame或mpd
# 若使用mpd请确保已安装mpd依赖并配置好mpd_config
player = 'pygame'

# asmr file store 前执行的脚本，若不需要可直接删除或留空，
# 使用 Python 语法编写，运行时动态执行，并提供以下全局资源以供调用：

# - path: pathlib.Path 音声的存储路径，download_path的子目录

# - convert(file: pathlib.Path, to: Literal['mp3', 'wav', 'flac', 'm4a', 'lrc'])
# 将单个文件转化为目标格式，mp3与m4a默认采用320k码率，flac默认使用压缩等级为5
# 若使用to='lrc'，请确保原文件为vtt格式。

# - convert_all(from_: Literal['mp3', 'wav', 'flac', 'm4a', 'vtt'], to: Literal['mp3', 'wav', 'flac', 'm4a', 'lrc'])
# 将path 下的所有<from_>类型的文件转化为<to>类型，
# 对convert函数的封装，其余细节与convert无异。

# 例如下面的配置会将将所有的vtt文件转化为lrc文件，wav文件转化为mp3文件，flac文件转化为mp3文件
# before_store = '''
# convert_all('vtt', 'lrc')
# convert_all('wav', 'mp3')
# convert_all('flac', 'mp3')
# ''''

before_store = ''


# 如使用aria2请配置此项，否则请忽略
# 如果是在本地使用aria2，运行`aria2c --enable-rpc`，以下保持默认即可
# 如果使用motrix，且没有更改过默认端口，请将端口(port)改为16800
[aria2_config]
host = "http://localhost"
port = 6800
secret = ""

# 文件和文件夹的过滤规则
# 可选参数和默认值如下：

# type: Literal["include", "exclude"] = "exclude"  # 必须保留匹配文件还是过滤匹配文件
# range: Literal["file", "directory", "all"] = "all"  # 该规则针对的文件类型
# excat_match: bool = False  # 是否应精确匹配(从头到尾严格匹配)
# ignore_case: bool = True  # 是否忽略大小写
# disable_when_nothing_to_download: bool = False  # 若设置为True，当检测到没有任何音频文件需要下载时，将禁用该规则并重新检查

# 注意只有满足所有的include规则且不满足所有的exclude规则的文件才会被下载

# 示例：过滤所有的SE(不完全)
[[filename_filters]]
regex = '(効果音|SE|ＳＥ|BGM|音效)[ ]?([な無无×][し]?|cut|切除|カット|オフ|off)'

[[filename_filters]]
regex = '([無无×]|不含|NO[ _]?)(効果音|SE|ＳＥ|BGM|音效)'

[[filename_filters]]
regex = '(声|ボイス|SE)のみ'

# 过滤所有的wav，但是当没有任何音频文件可以下载时（例如：作品只提供wav音频），禁用该规则
[[filename_filters]]
regex = '.*\.wav$'
range = "file"
disable_when_nothing_to_download = true

# 过滤包含 "反転" 的wav文件
[[filename_filters]]
regex = '反転.*\.wav$'
range = "file"

# 过滤壁纸文件
[[filename_filters]]
regex = "壁紙|桌布|壁纸"

[playlist_aliases]
# 这里可以自定义列表的别名
# 左侧为别名，右侧为对应uuid或列表的名字，例如
# 我喜欢的 = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
# 别名1 = 列表名1
# 在创建列表时，列表名是可以重复的，因此如果右侧填列表名的话，
# 请确认列表名的唯一性，否则将自动选取第一个符合的列表名。
liked = '__SYS_PLAYLIST_LIKED'   # 我喜欢的 的列表别名
marked = '__SYS_PLAYLIST_MARKED' # 我标记的 的列表别名

[mpd_config]
# 这里的配置是客户端的配置
# mpd的配置文件在第一次启动后自动生成后可在对应位置自行修改
# 修改mpd的配置时请保证与此处的配置匹配
bin = "/path/to/mpd"
host = "localhost"
port = 6600
# music_directory = ''  # 默认为生成数据目录下的 mpd/music
