# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Any, List, Optional
from typing_extensions import Annotated
from deel_sdk.models.get_contract_list200_response import GetContractList200Response

from deel_sdk.api_client import ApiClient, RequestSerialized
from deel_sdk.api_response import ApiResponse
from deel_sdk.rest import RESTResponseType


class ContractsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_contract_list(
        self,
        after_cursor: Annotated[Optional[StrictStr], Field(description="Return next page of results after the given cursor.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Return a page of results with the given number of records.")] = None,
        order_direction: Annotated[Optional[StrictStr], Field(description="Order direction of results; ascending or descending.")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by type. A contract is included in the results if its type is in this list.")] = None,
        statuses: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by current status. A contract is included in the results if its status is in this list.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given external ID.")] = None,
        countries: Annotated[Optional[List[Annotated[str, Field(min_length=2, strict=True, max_length=2)]]], Field(description="Filter contracts by country codes.")] = None,
        currencies: Annotated[Optional[Any], Field(description="Filter contracts by currency codes.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Include a contract if its name or the contractor's name contains the given search term.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort contracts by the given field name.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetContractList200Response:
        """List of contracts

        Retrieve a list of contracts.  **Token scopes**: `contracts:read`

        :param after_cursor: Return next page of results after the given cursor.
        :type after_cursor: str
        :param limit: Return a page of results with the given number of records.
        :type limit: str
        :param order_direction: Order direction of results; ascending or descending.
        :type order_direction: str
        :param types: Filter contracts by type. A contract is included in the results if its type is in this list.
        :type types: List[str]
        :param statuses: Filter contracts by current status. A contract is included in the results if its status is in this list.
        :type statuses: List[str]
        :param team_id: Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.
        :type team_id: str
        :param external_id: Filter contracts for the given external ID.
        :type external_id: str
        :param countries: Filter contracts by country codes.
        :type countries: List[str]
        :param currencies: Filter contracts by currency codes.
        :type currencies: GetContractListCurrenciesParameter
        :param search: Include a contract if its name or the contractor's name contains the given search term.
        :type search: str
        :param sort_by: Sort contracts by the given field name.
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contract_list_serialize(
            after_cursor=after_cursor,
            limit=limit,
            order_direction=order_direction,
            types=types,
            statuses=statuses,
            team_id=team_id,
            external_id=external_id,
            countries=countries,
            currencies=currencies,
            search=search,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContractList200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_contract_list_with_http_info(
        self,
        after_cursor: Annotated[Optional[StrictStr], Field(description="Return next page of results after the given cursor.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Return a page of results with the given number of records.")] = None,
        order_direction: Annotated[Optional[StrictStr], Field(description="Order direction of results; ascending or descending.")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by type. A contract is included in the results if its type is in this list.")] = None,
        statuses: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by current status. A contract is included in the results if its status is in this list.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given external ID.")] = None,
        countries: Annotated[Optional[List[Annotated[str, Field(min_length=2, strict=True, max_length=2)]]], Field(description="Filter contracts by country codes.")] = None,
        currencies: Annotated[Optional[Any], Field(description="Filter contracts by currency codes.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Include a contract if its name or the contractor's name contains the given search term.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort contracts by the given field name.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetContractList200Response]:
        """List of contracts

        Retrieve a list of contracts.  **Token scopes**: `contracts:read`

        :param after_cursor: Return next page of results after the given cursor.
        :type after_cursor: str
        :param limit: Return a page of results with the given number of records.
        :type limit: str
        :param order_direction: Order direction of results; ascending or descending.
        :type order_direction: str
        :param types: Filter contracts by type. A contract is included in the results if its type is in this list.
        :type types: List[str]
        :param statuses: Filter contracts by current status. A contract is included in the results if its status is in this list.
        :type statuses: List[str]
        :param team_id: Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.
        :type team_id: str
        :param external_id: Filter contracts for the given external ID.
        :type external_id: str
        :param countries: Filter contracts by country codes.
        :type countries: List[str]
        :param currencies: Filter contracts by currency codes.
        :type currencies: GetContractListCurrenciesParameter
        :param search: Include a contract if its name or the contractor's name contains the given search term.
        :type search: str
        :param sort_by: Sort contracts by the given field name.
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contract_list_serialize(
            after_cursor=after_cursor,
            limit=limit,
            order_direction=order_direction,
            types=types,
            statuses=statuses,
            team_id=team_id,
            external_id=external_id,
            countries=countries,
            currencies=currencies,
            search=search,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContractList200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_contract_list_without_preload_content(
        self,
        after_cursor: Annotated[Optional[StrictStr], Field(description="Return next page of results after the given cursor.")] = None,
        limit: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Return a page of results with the given number of records.")] = None,
        order_direction: Annotated[Optional[StrictStr], Field(description="Order direction of results; ascending or descending.")] = None,
        types: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by type. A contract is included in the results if its type is in this list.")] = None,
        statuses: Annotated[Optional[List[StrictStr]], Field(description="Filter contracts by current status. A contract is included in the results if its status is in this list.")] = None,
        team_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.")] = None,
        external_id: Annotated[Optional[StrictStr], Field(description="Filter contracts for the given external ID.")] = None,
        countries: Annotated[Optional[List[Annotated[str, Field(min_length=2, strict=True, max_length=2)]]], Field(description="Filter contracts by country codes.")] = None,
        currencies: Annotated[Optional[Any], Field(description="Filter contracts by currency codes.")] = None,
        search: Annotated[Optional[StrictStr], Field(description="Include a contract if its name or the contractor's name contains the given search term.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sort contracts by the given field name.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List of contracts

        Retrieve a list of contracts.  **Token scopes**: `contracts:read`

        :param after_cursor: Return next page of results after the given cursor.
        :type after_cursor: str
        :param limit: Return a page of results with the given number of records.
        :type limit: str
        :param order_direction: Order direction of results; ascending or descending.
        :type order_direction: str
        :param types: Filter contracts by type. A contract is included in the results if its type is in this list.
        :type types: List[str]
        :param statuses: Filter contracts by current status. A contract is included in the results if its status is in this list.
        :type statuses: List[str]
        :param team_id: Filter contracts for the given team ID. NOTE: All query parameters are technically strings or arrays of strings.
        :type team_id: str
        :param external_id: Filter contracts for the given external ID.
        :type external_id: str
        :param countries: Filter contracts by country codes.
        :type countries: List[str]
        :param currencies: Filter contracts by currency codes.
        :type currencies: GetContractListCurrenciesParameter
        :param search: Include a contract if its name or the contractor's name contains the given search term.
        :type search: str
        :param sort_by: Sort contracts by the given field name.
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_contract_list_serialize(
            after_cursor=after_cursor,
            limit=limit,
            order_direction=order_direction,
            types=types,
            statuses=statuses,
            team_id=team_id,
            external_id=external_id,
            countries=countries,
            currencies=currencies,
            search=search,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetContractList200Response",
            '400': "ApiErrorContainer",
            '401': "ApiErrorContainer",
            '403': "ApiErrorContainer",
            '404': "ApiErrorContainer",
            '500': "ApiErrorContainer",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_contract_list_serialize(
        self,
        after_cursor,
        limit,
        order_direction,
        types,
        statuses,
        team_id,
        external_id,
        countries,
        currencies,
        search,
        sort_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'types': 'multi',
            'statuses': 'multi',
            'countries': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if after_cursor is not None:
            
            _query_params.append(('after_cursor', after_cursor))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if order_direction is not None:
            
            _query_params.append(('order_direction', order_direction))
            
        if types is not None:
            
            _query_params.append(('types', types))
            
        if statuses is not None:
            
            _query_params.append(('statuses', statuses))
            
        if team_id is not None:
            
            _query_params.append(('team_id', team_id))
            
        if external_id is not None:
            
            _query_params.append(('external_id', external_id))
            
        if countries is not None:
            
            _query_params.append(('countries', countries))
            
        if currencies is not None:
            
            _query_params.append(('currencies', currencies))
            
        if search is not None:
            
            _query_params.append(('search', search))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'deelToken', 
            'oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/contracts',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


