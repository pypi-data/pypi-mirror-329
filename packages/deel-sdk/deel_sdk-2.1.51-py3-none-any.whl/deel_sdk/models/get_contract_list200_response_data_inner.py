# coding: utf-8

"""
    Deel REST API

    Deel REST API

    The version of the OpenAPI document: 1.25.0
    Contact: apiteam@deel.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from deel_sdk.models.get_contract_list200_response_data_inner_client import GetContractList200ResponseDataInnerClient
from deel_sdk.models.get_contract_list200_response_data_inner_invitations import GetContractList200ResponseDataInnerInvitations
from deel_sdk.models.get_contract_list200_response_data_inner_signatures import GetContractList200ResponseDataInnerSignatures
from deel_sdk.models.get_contract_list200_response_data_inner_worker import GetContractList200ResponseDataInnerWorker
from typing import Optional, Set
from typing_extensions import Self

class GetContractList200ResponseDataInner(BaseModel):
    """
    GetContractList200ResponseDataInner
    """ # noqa: E501
    id: Annotated[str, Field(min_length=1, strict=True)] = Field(description="UUID of the contract.")
    type: StrictStr = Field(description="Type of a contract.")
    scale: Optional[StrictStr] = Field(default=None, description="The payment scale (e.g., hourly, weekly, monthly, etc.).")
    title: Annotated[str, Field(min_length=1, strict=True)] = Field(description="Title of the contract.")
    client: GetContractList200ResponseDataInnerClient
    status: StrictStr = Field(description="Status of a contract in Deel workflow.")
    worker: Optional[GetContractList200ResponseDataInnerWorker] = None
    created_at: Optional[datetime] = Field(description="Timestamp when the contract was created, in ISO-8601 format.")
    signatures: GetContractList200ResponseDataInnerSignatures
    external_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the object provided by an external system.")
    invitations: GetContractList200ResponseDataInnerInvitations
    is_archived: StrictBool = Field(description="Indicates whether the contract is archived.")
    is_shielded: StrictBool = Field(description="Indicates whether the contract is shielded.")
    who_reports: Optional[StrictStr] = Field(default=None, description="Indicates who is responsible for providing regular reports.")
    notice_period: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0, description="Number of days required to give notice before terminating the contract.")
    termination_date: Optional[datetime] = Field(description="Date when the contract is terminated, in ISO-8601 format.")
    __properties: ClassVar[List[str]] = ["id", "type", "scale", "title", "client", "status", "worker", "created_at", "signatures", "external_id", "invitations", "is_archived", "is_shielded", "who_reports", "notice_period", "termination_date"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'peo', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee']):
            raise ValueError("must be one of enum values ('ongoing_time_based', 'milestones', 'time_based', 'pay_as_you_go_time_based', 'commission', 'payg_milestones', 'payg_tasks', 'eor', 'unknown', 'peo', 'employee', 'global_payroll', 'shield_msa', 'hris_direct_employee')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment']):
            raise ValueError("must be one of enum values ('new', 'under_review', 'waiting_for_employee_contract', 'waiting_for_client_sign', 'processing_payment', 'waiting_for_contractor_sign', 'waiting_for_eor_sign', 'waiting_for_employee_sign', 'awaiting_deposit_payment', 'in_progress', 'completed', 'cancelled', 'user_cancelled', 'rejected', 'waiting_for_client_payment')")
        return value

    @field_validator('who_reports')
    def who_reports_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['both', 'client', 'contractor']):
            raise ValueError("must be one of enum values ('both', 'client', 'contractor')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContractList200ResponseDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict['worker'] = self.worker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signatures
        if self.signatures:
            _dict['signatures'] = self.signatures.to_dict()
        # override the default output from pydantic by calling `to_dict()` of invitations
        if self.invitations:
            _dict['invitations'] = self.invitations.to_dict()
        # set to None if scale (nullable) is None
        # and model_fields_set contains the field
        if self.scale is None and "scale" in self.model_fields_set:
            _dict['scale'] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict['worker'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if external_id (nullable) is None
        # and model_fields_set contains the field
        if self.external_id is None and "external_id" in self.model_fields_set:
            _dict['external_id'] = None

        # set to None if termination_date (nullable) is None
        # and model_fields_set contains the field
        if self.termination_date is None and "termination_date" in self.model_fields_set:
            _dict['termination_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContractList200ResponseDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "scale": obj.get("scale"),
            "title": obj.get("title"),
            "client": GetContractList200ResponseDataInnerClient.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "status": obj.get("status"),
            "worker": GetContractList200ResponseDataInnerWorker.from_dict(obj["worker"]) if obj.get("worker") is not None else None,
            "created_at": obj.get("created_at"),
            "signatures": GetContractList200ResponseDataInnerSignatures.from_dict(obj["signatures"]) if obj.get("signatures") is not None else None,
            "external_id": obj.get("external_id"),
            "invitations": GetContractList200ResponseDataInnerInvitations.from_dict(obj["invitations"]) if obj.get("invitations") is not None else None,
            "is_archived": obj.get("is_archived"),
            "is_shielded": obj.get("is_shielded"),
            "who_reports": obj.get("who_reports"),
            "notice_period": obj.get("notice_period") if obj.get("notice_period") is not None else 0,
            "termination_date": obj.get("termination_date")
        })
        return _obj


