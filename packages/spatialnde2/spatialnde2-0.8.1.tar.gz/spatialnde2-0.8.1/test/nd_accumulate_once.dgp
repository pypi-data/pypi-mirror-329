# This is a simple example of using dataguzzler-python
# with the spatialnde2 recording database. 

# To use: pass the name of an .x3d file as the first command-line parameter 
# and the name of a k4a recording as the second command line parameter

input("Press enter")

from dataguzzler_python import dgpy
import spatialnde2 as snde
import threading
import time
import numpy as np

include(dgpy,"dgpy_startup.dpi") # If you get a NameError here, be sure you are executing this file with dataguzzler-python

include(dgpy,"Qt.dpi",prefer_pyqt=False) 

include(snde,"recdb.dpi",enable_opencl=True)
include(snde,"recdb_gui.dpi")

import itertools



transact = recdb.start_transaction()	

live_channel = recdb.define_channel(transact,"/live","main")

chanmetadata = snde.constructible_metadata()
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis0_coord","X Axis"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis0_units","mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis0_offset",-10, "mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis0_scale",1, "mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis1_coord","Y Axis"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis1_units","mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis1_offset",-10, "mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-axis1_scale",1, "mm"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-ampl_coord","Amplitude"))
chanmetadata.AddMetaDatum(snde.metadatum("ande_array-ampl_units","Volts"))

accumulator_2d = snde.nd_accumulate_once.instantiate( [ snde.math_parameter_recording("/live"),
                                                                     snde.math_parameter_indexvec_const([20, 20]),
								     snde.math_parameter_indexvec_const([int(np.ravel_multi_index(a, (20,20))) for a in itertools.product(np.arange(20), np.arange(20))]),
                                                                     snde.math_parameter_sndeindex_const(400), 
								     snde.math_parameter_bool_const(False),
							   	     snde.math_parameter_bool_const(False),
								     snde.math_parameter_bool_const(True),
								     snde.math_parameter_metadata_const(chanmetadata)],
                                                                   [ snde.shared_string("/accum_2d") ],
                                                                   "/",
                                                                   False,
                                                                   False,
                                                                   False,
                                                                   snde.math_definition("nd accumulator defintion"),
                                                                   [],
                                                                   None)
recdb.add_math_function(transact,accumulator_2d,False)



globalrev = transact.end_transaction().globalrev_available()




def singlevalue_live_thread_code():
    
    while True: 
        
        value = np.random.rand()

        transact = recdb.start_transaction()	
        live_recording = snde.create_ndarray_ref(transact,live_channel,snde.SNDE_RTN_FLOAT32)
        globalrev = transact.end_transaction().globalrev_available()

        metadata = snde.constructible_metadata()
        metadata.AddMetaDatum(snde.metadatum("ande_array-ampl_coord","Amplitude"))
        metadata.AddMetaDatum(snde.metadatum("ande_array-ampl_units","Volts"))

        live_recording.rec.metadata=metadata;
        
        live_recording.rec.mark_metadata_done()
        live_recording.allocate_storage( [1,] )
        

        #print("value=%s" % (str(value)))
        
        live_recording.data[:] = value
        live_recording.rec.mark_data_ready()     
        globalrev.wait_complete()
        time.sleep(1)
        pass
    
    pass

singlevalue_live_thread = threading.Thread(target=singlevalue_live_thread_code)
singlevalue_live_thread.start()