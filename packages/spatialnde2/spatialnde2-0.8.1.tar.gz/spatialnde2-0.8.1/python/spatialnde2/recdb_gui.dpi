from dataguzzler_python import dgpy
import spatialnde2 as snde

global snde_recdb_windows
global snde_RecViewerWindow
global viewer
global main_viewer

enable_opencl = True

if not "snde_recdb_windows" in globals():
   
    snde_recdb_windows=[]
    include(snde,"recdb.dpi", enable_opencl = enable_opencl)
    include(dgpy,"Qt.dpi") # in case not already started
    
    class snde_RecViewerWindow(Qt.QtWidgets.QMainWindow): 
        viewer = None
        viewer_QWidget = None

        def __init__(self):
            super().__init__()
            self.viewer = snde.QTRecViewer(recdb,self)
            self.viewer_QWidget = self.viewer.QWidget() # Save a copy so that we can check that it is still valid with shiboken2.isValid() before accessing the potentially invalid (because the window closed, etc.) self.viewer object that is essentially a raw pointer but gives us access to the full set of methods. 
            self.setCentralWidget(self.viewer_QWidget)
            self.setWindowTitle('SpatialNDE2 Recording Database Viewer')

            # Intelligent default size
            self.resize(QApp.primaryScreen().availableGeometry().size()*0.7);

            # Call QApp.processEvents() immedately to ease debugging, per
            # https://stackoverflow.com/questions/56686603/how-to-avoid-sigpipe-due-to-a-timeout-when-debugging-an-x11-program
            QApp.processEvents()
            pass
        pass
    pass

def viewer():
    new_window = InstantiateInQtMainThread("dgpy_config","snde_RecViewerWindow")
    new_window.show()

    # Give the window a place to live where
    # it won't lose its reference count
    snde_recdb_windows.append(new_window)
    return new_window

# Create an initial viewer
main_viewer = viewer()
