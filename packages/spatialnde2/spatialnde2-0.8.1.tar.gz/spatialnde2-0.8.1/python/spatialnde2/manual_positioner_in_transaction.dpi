transaction = None # active_transaction object
positioner_channel = None  # positioner channel name
model_channel = None # name of channel containing renderable model to position
background_channel = None # name of channel containing background to render


viewer = None

if viewer is None:
    viewer = main_viewer
    pass


positioner_chan = recdb.define_channel(transaction,positioner_channel,"main")
positioner_rec = snde.create_qt_osg_compositor_view_tracking_pose_recording(transaction,positioner_chan,model_channel,background_channel,main_viewer.viewer.OSGWidget)
positioner_rec.mark_data_and_metadata_ready()


# Set main viewer camera angle to looking straight out of camera
viewer.viewer.set_camera_pose(positioner_channel,np.array(([1,0,0,  0.        ], [ 0,0,0,  1]),dtype=[('quat', '<f4', (4,)), ('offset', '<f4', (4,))]))
viewer.viewer.set_rotation_center_dist(positioner_channel,1.0)


def model_pose_func():
    # Take camera pose of positioner channel and multiply by inverse of camera pose of model channel.
    # This becomes the desired orientation of the model
    
    model_campose = viewer.viewer.get_camera_pose(model_channel)
    positioner_campose = viewer.viewer.get_camera_pose(positioner_channel)

    model_campose_inverse = snde.orientation_inverse(model_campose)
    # positioner_campose represents background coordinates over positioner camera coordinates
    # model_campose represents model coordinates over model camera coordinates
    # model_campose_inverse represents model camera coordinates over model_coordinates
    # since the cameras are made to line up by the qt_osg_compositor_view_tracking_pose viewer
    # the positioner camera coordinates can cancel the model camera coordinates. 
    return snde.orientation_orientation_multiply(positioner_campose,model_campose_inverse)

return model_pose_func # represents background coordinates over model coordinates
    

