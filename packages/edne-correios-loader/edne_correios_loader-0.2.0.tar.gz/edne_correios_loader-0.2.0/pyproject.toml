[build-system]
    requires = ["hatchling"]
    build-backend = "hatchling.build"

[project]
    name = "edne-correios-loader"
    dynamic = ["version"]
    description = "Load Brazilian Correios' e-DNE Basico text files into your database to enable CEP search"
    readme = "README.md"
    requires-python = ">=3.8"
    license = "MIT"
    keywords = ["Correios", "CEP", "endereço", "address", "DNE", "eDNE", "Brasil"]
    authors = [
        { name = "Cauê Thenório", email = "caue@thenorio.com.br" },
    ]
    classifiers = [
        "Development Status :: 4 - Beta",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
    ]
    dependencies = [
        "click~=8.1",
        "sqlalchemy~=2.0",
        "toposort~=1.1; python_version < '3.9'"
    ]

    [project.urls]
        Documentation = "https://github.com/cauethenorio/edne-correios-loader#readme"
        Issues = "https://github.com/cauethenorio/edne-correios-loader/issues"
        Source = "https://github.com/cauethenorio/edne-correios-loader"

    [project.scripts]
        edne-correios-loader = "edne_correios_loader.cli:edne_correios_loader"

    [project.optional-dependencies]
        postgresql = ["psycopg2-binary"]
        mysql = ["pymysql"]

[tool.hatch.version]
    path = "src/edne_correios_loader/__about__.py"

[tool.hatch.build.targets.sdist]
    exclude = ["/tests", '.gitignore', '.rtx.toml']

[tool.hatch.build.targets.wheel]
    packages = ["src/edne_correios_loader"]

[tool.hatch.envs.default]
    python = "3.11"
    dependencies = [
        "coverage[toml]>=6.5",
        "pytest",
        "pytest-mock", # use mock/patch as fixtures
        "faker", # generate sample data
        "pdbpp", # improve debug prompt
        "python-dotenv", # read docker container data in tests
        "psycopg-binary", # connect to postgres during tests
        "pymysql", # connect to mysql during tests
        "cryptography", # required by pymysql
        "testcontainers-postgres", # run postgres container on demand during tests
        "testcontainers-mysql", # run mysql container on demand during tests
    ]

    [tool.hatch.envs.default.scripts]
        test = "pytest {args:tests}"
        test-cov = "coverage run -m pytest {args:tests}"
        cov-report = [
            "- coverage combine",
            "coverage html",
        ]
        cov = [
            "test-cov",
            "cov-report",
        ]

[[tool.hatch.envs.all.matrix]]
    python = ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

[tool.hatch.envs.lint]
    detached = true
    dependencies = [
        "black>=23.1.0",
        "ruff>=0.0.243",
    ]
    [tool.hatch.envs.lint.scripts]
        style = [
            "ruff check {args:.}",
            "ruff format --diff {args:.}",
        ]
        fmt = [
            "ruff format {args:.}",
            "ruff --fix {args:.}",
            "style",
        ]
        all = [
            "style",
        ]

[tool.black]
    target-version = ["py38"]
    line-length = 88

[tool.ruff]
    target-version = "py38"
    line-length = 88
    src = ["src", "tests"]

    [tool.ruff.lint]
        select = [
            "A",
            "ARG",
            "B",
            "B9",
            "C",
            "C4",
            "DTZ",
            "E", # pycodestyle errors (https://docs.astral.sh/ruff/rules/#error-e)
            "EM",
            "F", # pyflakes (https://docs.astral.sh/ruff/rules/#pyflakes-f)
            "FBT",
            "G",
            "I", # isort (https://docs.astral.sh/ruff/rules/#isort-i)
            "ICN",
            "N", # pep8-naming (https://docs.astral.sh/ruff/rules/#pep8-naming-n)
            "PIE",
            "PLC",
            "PLE",
            "PLR",
            "PLW",
            "PTH",
            "Q",
            "RET",
            "RUF",
            "S", # flake8-bandit (https://docs.astral.sh/ruff/rules/#flake8-bandit-s)
            "SIM",
            "T",
            "T10",
            "T20",
            "TID",
            "TRY",
            "UP", # pyupgrade (https://docs.astral.sh/ruff/rules/#pyupgrade-up)
            "W", # pycodestyle warnings (https://docs.astral.sh/ruff/rules/#warning-w)
            "YTT" # flake8-2020 (https://docs.astral.sh/ruff/rules/#flake8-2020-ytt)
        ]
        ignore = [
            # Allow non-abstract empty methods in abstract base classes
            "B027",
            # Allow multi-line imports
            "E401",
            # Allow boolean positional values in function calls, like `dict.get(... True)`
            "FBT003",
            # Ignore checks for possible passwords
            "S105", "S106", "S107",
            # Allow nested context manager as they are easier to read
            "SIM117",
            # Ignore complexity
            "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
            # Allow relative imports
            "TID252",
        ]
        unfixable = [
            # Don't touch unused imports
            "F401",
            # Don't touch unused variables
            "F841",
            # Don't touch unused function arguments
            "ARG001"
        ]

    [tool.ruff.lint.isort]
        known-first-party = ["edne_correios_loader"]

    [tool.ruff.lint.flake8-tidy-imports]
        ban-relative-imports = "all"

    [tool.ruff.lint.per-file-ignores]
        # Tests can use
        "tests/**/*" = [
            # magic values
            "PLR2004",
            # assertions
            "S101",
            # relative imports
            "TID252",
            # Ambiguous variable name
            "E741",
            # opening files without using a context manager
            "SIM115",

        ]

[tool.coverage.run]
    source_pkgs = ["edne_correios_loader", "tests"]
    branch = true
    parallel = true
    omit = [
        "src/edne_correios_loader/__about__.py",
        "tests/conftest.py",
    ]

[tool.coverage.paths]
    edne_correios_loader = [
        "src/edne_correios_loader",
        "*/edne-correios-loader/src/edne_correios_loader"
    ]
    tests = ["tests", "*/edne-correios-loader/tests"]

[tool.coverage.report]
    exclude_lines = [
        "no cov",
        "if __name__ == .__main__.:",
        "if TYPE_CHECKING:",
    ]