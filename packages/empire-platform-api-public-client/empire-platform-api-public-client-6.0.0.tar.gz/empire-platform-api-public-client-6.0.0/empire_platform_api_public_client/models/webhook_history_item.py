# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.0.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from empire_platform_api_public_client.models.webhook_event_status import WebhookEventStatus
from empire_platform_api_public_client.models.webhook_event_type import WebhookEventType
from typing import Optional, Set
from typing_extensions import Self

class WebhookHistoryItem(BaseModel):
    """
    WebhookHistoryItem
    """ # noqa: E501
    status: WebhookEventStatus
    event_type: WebhookEventType = Field(alias="eventType")
    sent_at: Optional[datetime] = Field(default=None, description="Date and time with zone information, marks an **absolute point** on the timeline  - theoretically can be sent and received with any zone offset (until it marks the desired **absolute point** on the timeline) - in practice it is advised to transfer it in UTC timezone (with Z offset, \"Zulu time\") - ISO 8601 compliant string in `yyyy-mm-ddThh:mm:ss.SSSZ` format ", alias="sentAt")
    request_headers: StrictStr = Field(alias="requestHeaders")
    request_body: StrictStr = Field(alias="requestBody")
    error_message: Optional[StrictStr] = Field(default=None, alias="errorMessage")
    response_code: Optional[StrictStr] = Field(default=None, alias="responseCode")
    response_headers: Optional[StrictStr] = Field(default=None, alias="responseHeaders")
    response_body: Optional[StrictStr] = Field(default=None, alias="responseBody")
    __properties: ClassVar[List[str]] = ["status", "eventType", "sentAt", "requestHeaders", "requestBody", "errorMessage", "responseCode", "responseHeaders", "responseBody"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookHistoryItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookHistoryItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "status": obj.get("status"),
            "eventType": obj.get("eventType"),
            "sentAt": obj.get("sentAt"),
            "requestHeaders": obj.get("requestHeaders"),
            "requestBody": obj.get("requestBody"),
            "errorMessage": obj.get("errorMessage"),
            "responseCode": obj.get("responseCode"),
            "responseHeaders": obj.get("responseHeaders"),
            "responseBody": obj.get("responseBody")
        })
        return _obj


