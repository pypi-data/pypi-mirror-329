#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.1.2
# Product:       sfm3304
# Model-Version: 1.0.0
#

import pytest
from sensirion_i2c_sfm3304.device import Sfm3304Device


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x2E,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sfm3304Device(channel)


def test_configure_averaging1(sensor):
    sensor.configure_averaging(2)


def test_read_product_identifier1(sensor):
    (product_identifier, serial_number
     ) = sensor.read_product_identifier()
    print(f"product_identifier: {product_identifier}; "
          f"serial_number: {serial_number}; "
          )


def test_read_scale_offset_unit1(sensor):
    (flow_scale_factor, flow_offset, flow_unit
     ) = sensor.read_scale_offset_unit(13827)
    print(f"flow_scale_factor: {flow_scale_factor}; "
          f"flow_offset: {flow_offset}; "
          f"flow_unit: {flow_unit}; "
          )


def test_enter_sleep1(sensor):
    sensor.enter_sleep()
    sensor.exit_sleep()


def test_start_continuous_measurement1(sensor):
    sensor.start_continuous_measurement()
    (a_flow, a_temperature, a_status_word
     ) = sensor.read_measurement_data()
    print(f"a_flow: {a_flow}; "
          f"a_temperature: {a_temperature}; "
          f"a_status_word: {a_status_word}; "
          )
    (flow, temperature, status_word
     ) = sensor.read_measurement_data_raw()
    print(f"flow: {flow}; "
          f"temperature: {temperature}; "
          f"status_word: {status_word}; "
          )
    a_flow = sensor.read_measurement_flow()
    print(f"a_flow: {a_flow}; "
          )
    flow = sensor.read_measurement_flow_raw()
    print(f"flow: {flow}; "
          )
    sensor.stop_continuous_measurement()


def test_start_continuous_measurement_with_filter1(sensor):
    sensor.start_continuous_measurement_with_filter(50961)
    (a_flow, a_temperature, a_status_word
     ) = sensor.read_measurement_data()
    print(f"a_flow: {a_flow}; "
          f"a_temperature: {a_temperature}; "
          f"a_status_word: {a_status_word}; "
          )
    (flow, temperature, status_word
     ) = sensor.read_measurement_data_raw()
    print(f"flow: {flow}; "
          f"temperature: {temperature}; "
          f"status_word: {status_word}; "
          )
    a_flow = sensor.read_measurement_flow()
    print(f"a_flow: {a_flow}; "
          )
    flow = sensor.read_measurement_flow_raw()
    print(f"flow: {flow}; "
          )
    sensor.stop_continuous_measurement()

