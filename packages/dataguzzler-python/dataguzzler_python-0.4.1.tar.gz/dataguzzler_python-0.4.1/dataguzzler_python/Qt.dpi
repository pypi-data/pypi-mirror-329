"""
datguzzler-python support for Qt:

Usage: 
include(dgpy,"Qt.dpi",prefer_pyqt=False)
"""


prefer_pyqt = False

import dataguzzler_python.QtConfig
dataguzzler_python.QtConfig.prefer_pyqt = prefer_pyqt



import sys
from dataguzzler_python import main_thread
import threading
import importlib

global Qt

global QtWrapper
global QApp

global InstantiateInQtMainThread


if not "Qt" in globals():
   # Qt not already loaded
   
   Qt = None 
   QtWrapper = None
   
   #in_sub_thread=True

   if threading.current_thread() is threading.main_thread():

      from dataguzzler_python import Qt
      from dataguzzler_python import QtWrapper
      #in_sub_thread=False

      #  UseDesktopOpenGL is required for spatialnde2 compatibility
      Qt.QtCore.QCoreApplication.setAttribute(Qt.QtCore.Qt.AA_UseDesktopOpenGL)
      Qt.QtCore.QCoreApplication.setAttribute(Qt.QtCore.Qt.AA_ShareOpenGLContexts)
      QApp = Qt.QtWidgets.QApplication(sys.argv)
      QApp.setQuitOnLastWindowClosed(False)
      # Call QApp.processEvents() immedately to ease debugging, per
      # https://stackoverflow.com/questions/56686603/how-to-avoid-sigpipe-due-to-a-timeout-when-debugging-an-x11-program
      QApp.processEvents()

      # Ensures that signals are handed over to Python
      Qt.SignalWakeupHandler(QApp)
      
      # Queue take over of main thread with the Qt event loop   
      main_thread.queue_to_run_in_main_thread(lambda: Qt.QtCore.QMetaObject.invokeMethod(QApp,"quit",Qt.QtCore.Qt.QueuedConnection),Qt.QtEventLoop,QApp)
      pass
   else:
      # Must perform import from main thread
      
      qt_imported = threading.Condition()
      
      def start_qt():
         global Qt
         global QtWrapper
         global qt_imported
         global QApp
         from dataguzzler_python import Qt
         from dataguzzler_python import QtWrapper

         with qt_imported:
            qt_imported.notify()
            pass
         
         QCoreApplication.setAttribute(Qt.AA_ShareOpenGLContexts)
         QApp = QtWidgets.QApplication(sys.argv)
         QApp.setQuitOnLastWindowClosed(False)
         # Call QApp.processEvents() immedately to ease debugging, per
         # https://stackoverflow.com/questions/56686603/how-to-avoid-sigpipe-due-to-a-timeout-when-debugging-an-x11-program
         QApp.processEvents()

         # Ensures that signals are handed over to Python
         Qt.SignalWakeupHandler(QApp)
         
         Qt.QtEventLoop(QApp)
         pass
      
      # Take over the main thread with the Qt event loop
      main_thread.queue_to_run_in_main_thread(lambda: Qt.QtCore.QMetaObject.invokeMethod(QApp,"quit",Qt.QtCore.Qt.QueuedConnection),start_qt)
      
      # Wait for import completion
      with qt_imported:
         qt_imported.wait_for(lambda: Qt is not None)
         pass
      pass


   
   InstantiateInQtMainThread = QtWrapper.InstantiateInQtMainThread
   pass
