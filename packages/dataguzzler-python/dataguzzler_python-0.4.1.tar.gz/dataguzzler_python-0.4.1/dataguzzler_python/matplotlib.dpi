#########################################################################
# plotting.dpi -- Matplotlib Plotting Include Configuration File
# Tyler Lesthaeghe, UDRI, Tyler.Lesthaeghe@udri.udayton.edu
# Created 2021-08-24
#########################################################################
# Copyright 2021 University of Dayton Research Institute
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the 
# "Software"), to deal in the Software without restriction, including 
# without limitation the rights to use, copy, modify, merge, publish, 
# distribute, sublicense, and/or sell copies of the Software, and to 
# permit persons to whom the Software is furnished to do so, subject to 
# the following conditions:
#
# The above copyright notice and this permission notice shall be included 
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#########################################################################
# Change Log
#     2021-08-24:  File Created (Tyler/UDRI)
#     2021-12-29:  Reworked for compatibility with new Qt layer (sdh4)
#########################################################################
""" Matplotlib Plotting for Dataguzzler
"""
import sys
import threading


# Requires Qt loaded first
include(dgpy,"Qt.dpi")
from dataguzzler_python import QtWrapper

global matplotlib
# Going to place plt in the global namespace for convenience of access
# from the dataguzzler prompt
global plt

def matplotlib_startup():
    global plt 
    import matplotlib
    # Before we do anything else with matplotlib, we need to change the 
    # backend.
    matplotlib.use("Qt5Agg")
    from matplotlib import pyplot as plt
    from inspect import getmembers, isfunction

    
    setattr(matplotlib.pyplot, "_figure", getattr(matplotlib.pyplot, "figure"))
    
    #def figurewrapper(*args, **kwargs):
    #    t = matplotlib.pyplot._figure(*args, **kwargs)
    #    t.canvas.mpl_connect("close_event", 
    #                         lambda _: t.canvas.manager.window.destroy())
    #    return t

    #setattr(matplotlib.pyplot, "figure", figurewrapper)

    for function in list(getmembers(matplotlib.pyplot, isfunction)):
        setattr(
            matplotlib.pyplot,
            function[0],
            QtWrapper.QtWrapper(getattr(matplotlib.pyplot, function[0])),
        )
        
        
        pass

    plt.ion() # default to interactive mode
    # Call QApp.processEvents() immedately to ease debugging, per
    # https://stackoverflow.com/questions/56686603/how-to-avoid-sigpipe-due-to-a-timeout-when-debugging-an-x11-program
    QApp.processEvents()

    def matplotlib_cleanup():
        import threading
        from dataguzzler_python.context import SimpleContext,InitThreadContext,PushThreadContext,PopThreadContext
        if threading.current_thread() is threading.main_thread():
            plt.close()
            pass
        else:
            QuitContext=SimpleContext()    
            InitThreadContext(QuitContext,"dgpy_mpl_quit") # Allow to run stuff from main thread
            PushThreadContext(QuitContext)
            try:
                plt.close()
                pass
            finally:
                PopThreadContext()
                pass
            
            pass
        
        
        pass
    
    #import atexit
    #atexit.register(matplotlib_cleanup)

    pass



if not "matplotlib" in globals():
    # Still need to load matplotlib

    
    
   if threading.current_thread() is threading.main_thread():
       # In ths case we are running during initialization and
       # we __are__ the main thread, but the Qt Main Loop
       # isn't started yet. Thus it is safe just to load
       # matplotlib now

       matplotlib_startup()
       pass

   else:

       # Ask Qt to start up matplotlib in the main thread for us
       
       QtWrapper(matplotlib_startup)()

       pass
   pass

