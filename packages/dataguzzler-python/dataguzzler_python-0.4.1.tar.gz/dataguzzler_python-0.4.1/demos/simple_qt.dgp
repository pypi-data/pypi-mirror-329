from dataguzzler_python import dgpy
import threading

include(dgpy,"dgpy_startup.dpi") # If you get a NameError here, be sure you are executing this file with dataguzzler-python


# This is a simple example of a Qt GUI for dataguzzler-python


# Including Qt.dpi triggers or queues loading of Qt
# and starting the QT event loop.
include(dgpy,"Qt.dpi",prefer_pyqt=False) 



# Can use Qt.Import_SubModule("QtGui"), etc. to get more Qt modules, independent of which bindings you are using

Qt.Import_SubModule("QtGui")

dgpython_release_main_thread() # allow qt main loop to take over the main thread and run in parallel with our code below

# Define the class. Be warned it is NOT currently
# safe to call any dataguzzler-python modules from
# QT classes (can cause deadlocks from main loop contention).
# This will eventually be fixed by making calls into
# dataguzzler-python modules be processed asynchronously
# where they start up a sub-QtEventLoop so events can
# still be handled while waiting on a dataguzzler-python
# module. 
class TestWindow(Qt.QtWidgets.QMainWindow):
    label = None
    
    def __init__(self):
        if threading.current_thread() is not  threading.main_thread():
            raise ValueError()
        
        super().__init__()
        self.label = Qt.QtWidgets.QLabel("Hello, World",self)
        self.show()
        pass
    pass


# The QT GUI MUST run in the main thread. All QWidget-derived
# classes may ONLY be accessed


#MyQWindow = InstantiateInQtMainThread("Qt.QtGui","QWindow")


# For classes such as TestWindow defined in a config file, make sure they are
# declared as global (if in an include file) then use "dgpy_config" for the module
MyTestWindow = InstantiateInQtMainThread("dgpy_config","TestWindow")

    
