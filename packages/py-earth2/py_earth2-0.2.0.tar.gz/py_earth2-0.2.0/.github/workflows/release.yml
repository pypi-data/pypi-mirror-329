name: Release
on:
  workflow_dispatch:
    inputs:
      tag:
        type: string

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build_wheels:
    name: >
      Build wheels on ${{ matrix.os }} for ${{ matrix.pyglob }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
          os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-14]
          pyglob: ["cp310", "cp311", "cp312", cp313]
    steps:
      - name: Use Python
        uses: actions/setup-python@v5
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Build wheels
        run: uv tool run cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "${{ matrix.pyglob }}-*"
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.pyglob }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl
  make_sdist:
    name: Make SDist
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Build SDist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz
  check_tag:
    runs-on: ubuntu-latest
    if: ${{ inputs.tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v5
      - name: Get package version
        id: get-version
        run: echo "NEW_VERSION=$(uv tool run -q  hatchling version)" | xargs >> $GITHUB_ENV

      - name: check matches
        run: |
          if [ "v$NEW_VERSION" != "${{ inputs.tag }}" ]; then
            echo "package version $NEW_VERSION does not match tag ${{ inputs.tag }}" >&2
            exit 1;
          else
            echo "Releasing ${{ inputs.tag }}"
          fi
  release_github:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_wheels, make_sdist, check_tag]
    permissions:
      contents: write
    environment: release
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true
      - run: |
          gh release create ${{ inputs.tag }} --generate-notes -d dist/*
  release_pypi:
    name: Release PyPI
    runs-on: ubuntu-latest
    needs: [release_github]
    environment: release
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: cibw-*
          merge-multiple: true
          path: dist
      - run: ls -R dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
