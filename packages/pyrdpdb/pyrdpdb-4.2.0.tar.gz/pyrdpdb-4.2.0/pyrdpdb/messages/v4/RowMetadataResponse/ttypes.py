#
# Autogenerated by Thrift Compiler (0.20.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
#import ColumnMetadata.ttypes
from .. import ColumnMetadata

from thrift.transport import TTransport
all_structs = []


class RowMetadataResponse(object):
    """
    Attributes:
     - numColumns
     - columns
     - isBoundedResult

    """


    def __init__(self, numColumns=None, columns=None, isBoundedResult=None,):
        self.numColumns = numColumns
        self.columns = columns
        self.isBoundedResult = isBoundedResult

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.numColumns = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.columns = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ColumnMetadata.ttypes.ColumnMetadata()
                        _elem5.read(iprot)
                        self.columns.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isBoundedResult = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RowMetadataResponse')
        if self.numColumns is not None:
            oprot.writeFieldBegin('numColumns', TType.I32, 1)
            oprot.writeI32(self.numColumns)
            oprot.writeFieldEnd()
        if self.columns is not None:
            oprot.writeFieldBegin('columns', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.columns))
            for iter6 in self.columns:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.isBoundedResult is not None:
            oprot.writeFieldBegin('isBoundedResult', TType.BOOL, 3)
            oprot.writeBool(self.isBoundedResult)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.numColumns is None:
            raise TProtocolException(message='Required field numColumns is unset!')
        if self.columns is None:
            raise TProtocolException(message='Required field columns is unset!')
        if self.isBoundedResult is None:
            raise TProtocolException(message='Required field isBoundedResult is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(RowMetadataResponse)
RowMetadataResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'numColumns', None, None, ),  # 1
    (2, TType.LIST, 'columns', (TType.STRUCT, [ColumnMetadata.ttypes.ColumnMetadata, None], False), None, ),  # 2
    (3, TType.BOOL, 'isBoundedResult', None, None, ),  # 3
)
fix_spec(all_structs)
del all_structs
