#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class ProtocolIncompatibleResponse(object):
    """
    Attributes:
     - clientProtocolVersion
     - minimumProtocolVersion
     - maximumProtocolVersion
     - serverSoftwareVersion
     - serverBuildInfo
     - errorMessage
    """


    def __init__(self, clientProtocolVersion=None, minimumProtocolVersion=None, maximumProtocolVersion=None, serverSoftwareVersion=None, serverBuildInfo=None, errorMessage=None,):
        self.clientProtocolVersion = clientProtocolVersion
        self.minimumProtocolVersion = minimumProtocolVersion
        self.maximumProtocolVersion = maximumProtocolVersion
        self.serverSoftwareVersion = serverSoftwareVersion
        self.serverBuildInfo = serverBuildInfo
        self.errorMessage = errorMessage

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.clientProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.minimumProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.maximumProtocolVersion = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.serverSoftwareVersion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.serverBuildInfo = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.errorMessage = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProtocolIncompatibleResponse')
        if self.clientProtocolVersion is not None:
            oprot.writeFieldBegin('clientProtocolVersion', TType.I32, 1)
            oprot.writeI32(self.clientProtocolVersion)
            oprot.writeFieldEnd()
        if self.minimumProtocolVersion is not None:
            oprot.writeFieldBegin('minimumProtocolVersion', TType.I32, 2)
            oprot.writeI32(self.minimumProtocolVersion)
            oprot.writeFieldEnd()
        if self.maximumProtocolVersion is not None:
            oprot.writeFieldBegin('maximumProtocolVersion', TType.I32, 3)
            oprot.writeI32(self.maximumProtocolVersion)
            oprot.writeFieldEnd()
        if self.serverSoftwareVersion is not None:
            oprot.writeFieldBegin('serverSoftwareVersion', TType.STRING, 4)
            oprot.writeString(self.serverSoftwareVersion.encode('utf-8') if sys.version_info[0] == 2 else self.serverSoftwareVersion)
            oprot.writeFieldEnd()
        if self.serverBuildInfo is not None:
            oprot.writeFieldBegin('serverBuildInfo', TType.STRING, 5)
            oprot.writeString(self.serverBuildInfo.encode('utf-8') if sys.version_info[0] == 2 else self.serverBuildInfo)
            oprot.writeFieldEnd()
        if self.errorMessage is not None:
            oprot.writeFieldBegin('errorMessage', TType.STRING, 6)
            oprot.writeString(self.errorMessage.encode('utf-8') if sys.version_info[0] == 2 else self.errorMessage)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.clientProtocolVersion is None:
            raise TProtocolException(message='Required field clientProtocolVersion is unset!')
        if self.minimumProtocolVersion is None:
            raise TProtocolException(message='Required field minimumProtocolVersion is unset!')
        if self.maximumProtocolVersion is None:
            raise TProtocolException(message='Required field maximumProtocolVersion is unset!')
        if self.serverSoftwareVersion is None:
            raise TProtocolException(message='Required field serverSoftwareVersion is unset!')
        if self.serverBuildInfo is None:
            raise TProtocolException(message='Required field serverBuildInfo is unset!')
        if self.errorMessage is None:
            raise TProtocolException(message='Required field errorMessage is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ProtocolIncompatibleResponse)
ProtocolIncompatibleResponse.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'clientProtocolVersion', None, None, ),  # 1
    (2, TType.I32, 'minimumProtocolVersion', None, None, ),  # 2
    (3, TType.I32, 'maximumProtocolVersion', None, None, ),  # 3
    (4, TType.STRING, 'serverSoftwareVersion', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'serverBuildInfo', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'errorMessage', 'UTF8', None, ),  # 6
)
fix_spec(all_structs)
del all_structs
