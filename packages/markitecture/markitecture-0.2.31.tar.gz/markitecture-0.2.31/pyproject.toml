[build-system]
build-backend = 'hatchling.build'
requires = [ "hatch-fancy-pypi-readme", "hatchling" ]

[project]
name = "markitecture"
description = "❂ Markdown tools for modular and flexible docs: link validation, reference link conversion, text splitting, & more."
dynamic = ["readme", "version"]
keywords = [
    "automated-markdown",
    "content-management",
    "documentation-tools",
    "intelligent-documentation",
    "markdown-ai",
    "markdown-link-checker",
    "markdown-parser",
    "markdown-splitter",
    "markdown-tools",
    "mkdocs",
    "modular-docs",
    "readme-generator",
    "reference-links",
    "smart-markdown",
]
license = "MIT"
authors = [ { name = "Eli Salamie", email = "egsalamie@gmail.com" } ]
requires-python = ">=3.10, <=3.14"
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
    "Framework :: Pytest",
    "Framework :: Pydantic",
]
dependencies = [
    "httpx",
    "pydantic",
    "pydantic-settings",
    "pyyaml",
    "requests",
    "rich",
    "toml ; python_full_version < '3.11'",
]

[project.urls]
documentation = "https://github.com/eli64s/markitecture/blob/main/README.md"
homepage = "https://github.com/eli64s/markitecture"
repository = "https://github.com/eli64s/markitecture"

[project.scripts]
markitect = "markitecture.__main__:run_cli"

[dependency-groups]
dev = [
    "devtools",
    "dspy",
    "hatch",
    "ipykernel",
]
test = [
    "coverage[toml]",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "pytest-pretty",
    "pytest-randomly",
    "pytest-sugar",
    "pytest-xdist",
]
lint = [
    "mypy",
    "pyright",
    "ruff",
    "types-pyyaml",
    "types-requests",
]

[tool.hatch.build]
include = [
  "src/*"
]

[tool.hatch.build.targets.wheel]
packages = [ "src/markitecture" ]

[tool.hatch.build.targets.sdist]
include = [
  "Makefile",
  "/*.toml",
  "/*.json",
  "/*.lock",
  "/*.md",
  "docs/*",
  "src/*",
  "tests/*",
]

[tool.hatch.version]
path = 'src/markitecture/version.py'

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = 'text/markdown'
substitutions = [
    { pattern = '(\s+)#(\d+)', replacement = '\1[#\2](https://github.com/eli64s/markitecture/issues/\2)' },
    { pattern = '(\s+)@([\w\-]+)', replacement = '\1[@\2](https://github.com/\2)' },
    # replace relative links with absolute links
    { pattern = '\[(.+?)\]\(((?!https?://)\S+?)\)', replacement = '[\1](https://github.com/eli64s/markitecture/tree/main/\g<2>)'},
]

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "-n=auto",
    "--durations=5",
    "--cov=src/",
    "--cov-branch",
    "--cov-fail-under=0",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=json:tests/.reports/coverage.json",
]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"
log_cli = true
log_level = "INFO"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def repr",
    "raise NotImplementedError",
    "if name == .__main__.:",
    "if TYPE_CHECKING:",
    "pass",
    "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_empty = true
sort = "cover"

[tool.coverage.run]
data_file = "tests/.reports/.coverage"
omit = [
    "docs/*",
    "examples/*",
    "tests/*",
    "**/__init__.py",
    "noxfile.py",
]
source = ["src/markitecture"]

[tool.coverage.json]
output = "tests/.reports/coverage.json"
pretty_print = true

[tool.pyright]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportUnnecessaryIsInstance = false
reportUnnecessaryTypeIgnoreComment = true
include = [ "markitecture", "tests" ]
venvPath = ".venv"
executionEnvironments = [
    { root = "tests", reportUnusedFunction = false },
]
