[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "cosimtlk"
dynamic = ["version"]
description = 'Cosimulation toolkit.'
readme = "README.md"
requires-python = ">=3.10"
license = "BSD-3-Clause"
keywords = []
authors = [
    { name = "Attila Balint", email = "attila.balint@kuleuven.be" },
]
packages = [{ include = "cosimtlk", from = "src" }]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: BSD License",
]
dependencies = [
    "attrs>=23.0.0",
    "cattrs>=23.0.0",
    "cron_converter>=1.0.0,<2.0.0",
    "FMPy>=0.3.0,<0.4.0",
    "pandas>=1.4.0,<3.0.0",
    "simpy>=4.0.0,<5.0.0",
    "tqdm>=4.0.0,<5.0.0",
]

[project.urls]
Homepage = "https://github.com/attila-balint-kul/cosimulation-toolkit"
Source = "https://github.com/attila-balint-kul/cosimulation-toolkit"
Documentation = "https://github.com/attila-balint-kul/cosimulation-toolkit#readme"
Issues = "https://github.com/attila-balint-kul/cosimulation-toolkit/issues"

[project.scripts]
cosimtlk = "cosimtlk.cli:app"

[project.optional-dependencies]
server = [
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn>=0.20.0,<1.0.0",
    "requests>=2.26.0,<3.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0,<3.0.0",
    "typer[all]>=0.9.0,<1.0.0",
]

[tool.hatch.version]
path = "src/cosimtlk/__about__.py"

[tool.hatch.build]
exclude = [
    ".DS_Store",
]

[tool.hatch.build.targets.sdist]
only-include = [
    "src/",
    "tests/",
    "LICENSE",
    "Makefile",
    "README.md",
    "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
    "cosimtlk[server]",
    "coverage[toml]>=6.5",
    "pytest",
    "httpx",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "mypy>=1.0.0",
    "ruff>=0.9.0",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/cosimtlk tests}"
style = [
    "ruff check {args:.}",
]
fmt = [
    "ruff check --fix {args:.}",
    "style",
]
all = [
    "style",
    "fmt",
]


[tool.ruff]
line-length = 120
target-version = "py311"
show-fixes = true

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["cosimtlk"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["cosimtlk"]
branch = true
parallel = true
omit = [
    "src/cosimtlk/__about__.py",
]

[tool.coverage.paths]
cosimtlk = ["src/cosimtlk", "*/cosimtlk/src/cosimtlk"]
tests = ["tests", "*/cosimtlk/tests"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
