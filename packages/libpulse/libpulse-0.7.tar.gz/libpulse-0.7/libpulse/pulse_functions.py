"""File pulse_functions.

This file has been generated by libpulse_parser.py - DO NOT MODIFY.
"""


pulse_functions = \
{'callbacks': {'defer_enable': ('void', ['pa_defer_event *', 'int']),
               'defer_free': ('void', ['pa_defer_event *']),
               'defer_new': ('pa_defer_event *',
                             ['pa_mainloop_api *', 'pa_defer_event_cb_t', 'void *']),
               'defer_set_destroy': ('void', ['pa_defer_event *', 'pa_defer_event_destroy_cb_t']),
               'io_enable': ('void', ['pa_io_event *', 'pa_io_event_flags_t']),
               'io_free': ('void', ['pa_io_event *']),
               'io_new': ('pa_io_event *',
                          ['pa_mainloop_api *',
                           'int',
                           'pa_io_event_flags_t',
                           'pa_io_event_cb_t',
                           'void *']),
               'io_set_destroy': ('void', ['pa_io_event *', 'pa_io_event_destroy_cb_t']),
               'pa_autoload_info_cb_t': ('void',
                                         ['pa_context *', 'pa_autoload_info *', 'int', 'void *']),
               'pa_card_info_cb_t': ('void', ['pa_context *', 'pa_card_info *', 'int', 'void *']),
               'pa_client_info_cb_t': ('void',
                                       ['pa_context *', 'pa_client_info *', 'int', 'void *']),
               'pa_context_event_cb_t': ('void',
                                         ['pa_context *', 'char *', 'pa_proplist *', 'void *']),
               'pa_context_index_cb_t': ('void', ['pa_context *', 'uint32_t', 'void *']),
               'pa_context_notify_cb_t': ('void', ['pa_context *', 'void *']),
               'pa_context_play_sample_cb_t': ('void', ['pa_context *', 'uint32_t', 'void *']),
               'pa_context_string_cb_t': ('void', ['pa_context *', 'int', 'char *', 'void *']),
               'pa_context_subscribe_cb_t': ('void',
                                             ['pa_context *',
                                              'pa_subscription_event_type_t',
                                              'uint32_t',
                                              'void *']),
               'pa_context_success_cb_t': ('void', ['pa_context *', 'int', 'void *']),
               'pa_defer_event_cb_t': ('void', ['pa_mainloop_api *', 'pa_defer_event *', 'void *']),
               'pa_defer_event_destroy_cb_t': ('void',
                                               ['pa_mainloop_api *', 'pa_defer_event *', 'void *']),
               'pa_ext_device_restore_read_device_formats_cb_t': ('void',
                                                                  ['pa_context *',
                                                                   'pa_ext_device_restore_info *',
                                                                   'int',
                                                                   'void *']),
               'pa_ext_device_restore_subscribe_cb_t': ('void',
                                                        ['pa_context *',
                                                         'pa_device_type_t',
                                                         'uint32_t',
                                                         'void *']),
               'pa_ext_device_restore_test_cb_t': ('void', ['pa_context *', 'uint32_t', 'void *']),
               'pa_free_cb_t': ('void', ['void *']),
               'pa_io_event_cb_t': ('void',
                                    ['pa_mainloop_api *',
                                     'pa_io_event *',
                                     'int',
                                     'pa_io_event_flags_t',
                                     'void *']),
               'pa_io_event_destroy_cb_t': ('void',
                                            ['pa_mainloop_api *', 'pa_io_event *', 'void *']),
               'pa_module_info_cb_t': ('void',
                                       ['pa_context *', 'pa_module_info *', 'int', 'void *']),
               'pa_operation_notify_cb_t': ('void', ['pa_operation *', 'void *']),
               'pa_poll_func': ('int', ['struct pollfd *', 'unsigned long', 'int', 'void *']),
               'pa_sample_info_cb_t': ('void',
                                       ['pa_context *', 'pa_sample_info *', 'int', 'void *']),
               'pa_server_info_cb_t': ('void', ['pa_context *', 'pa_server_info *', 'void *']),
               'pa_signal_cb_t': ('void',
                                  ['pa_mainloop_api *', 'pa_signal_event *', 'int', 'void *']),
               'pa_signal_destroy_cb_t': ('void',
                                          ['pa_mainloop_api *', 'pa_signal_event *', 'void *']),
               'pa_sink_info_cb_t': ('void', ['pa_context *', 'pa_sink_info *', 'int', 'void *']),
               'pa_sink_input_info_cb_t': ('void',
                                           ['pa_context *',
                                            'pa_sink_input_info *',
                                            'int',
                                            'void *']),
               'pa_source_info_cb_t': ('void',
                                       ['pa_context *', 'pa_source_info *', 'int', 'void *']),
               'pa_source_output_info_cb_t': ('void',
                                              ['pa_context *',
                                               'pa_source_output_info *',
                                               'int',
                                               'void *']),
               'pa_stat_info_cb_t': ('void', ['pa_context *', 'pa_stat_info *', 'void *']),
               'pa_stream_event_cb_t': ('void',
                                        ['pa_stream *', 'char *', 'pa_proplist *', 'void *']),
               'pa_stream_notify_cb_t': ('void', ['pa_stream *', 'void *']),
               'pa_stream_request_cb_t': ('void', ['pa_stream *', 'size_t', 'void *']),
               'pa_stream_success_cb_t': ('void', ['pa_stream *', 'int', 'void *']),
               'pa_time_event_cb_t': ('void',
                                      ['pa_mainloop_api *',
                                       'pa_time_event *',
                                       'struct timeval *',
                                       'void *']),
               'pa_time_event_destroy_cb_t': ('void',
                                              ['pa_mainloop_api *', 'pa_time_event *', 'void *']),
               'quit': ('void', ['pa_mainloop_api *', 'int']),
               'time_free': ('void', ['pa_time_event *']),
               'time_new': ('pa_time_event *',
                            ['pa_mainloop_api *',
                             'struct timeval *',
                             'pa_time_event_cb_t',
                             'void *']),
               'time_restart': ('void', ['pa_time_event *', 'struct timeval *']),
               'time_set_destroy': ('void', ['pa_time_event *', 'pa_time_event_destroy_cb_t'])},
 'signatures': {'pa_ascii_filter': ('char *', ['char *']),
                'pa_ascii_valid': ('char *', ['char *']),
                'pa_bytes_per_second': ('size_t', ['pa_sample_spec *']),
                'pa_bytes_snprint': ('char *', ['char *', 'size_t', 'unsigned']),
                'pa_bytes_to_usec': ('pa_usec_t', ['uint64_t', 'pa_sample_spec *']),
                'pa_channel_map_can_balance': ('int', ['pa_channel_map *']),
                'pa_channel_map_can_fade': ('int', ['pa_channel_map *']),
                'pa_channel_map_can_lfe_balance': ('int', ['pa_channel_map *']),
                'pa_channel_map_compatible': ('int', ['pa_channel_map *', 'pa_sample_spec *']),
                'pa_channel_map_equal': ('int', ['pa_channel_map *', 'pa_channel_map *']),
                'pa_channel_map_has_position': ('int',
                                                ['pa_channel_map *', 'pa_channel_position_t']),
                'pa_channel_map_init': ('pa_channel_map *', ['pa_channel_map *']),
                'pa_channel_map_init_auto': ('pa_channel_map *',
                                             ['pa_channel_map *',
                                              'unsigned',
                                              'pa_channel_map_def_t']),
                'pa_channel_map_init_extend': ('pa_channel_map *',
                                               ['pa_channel_map *',
                                                'unsigned',
                                                'pa_channel_map_def_t']),
                'pa_channel_map_init_mono': ('pa_channel_map *', ['pa_channel_map *']),
                'pa_channel_map_init_stereo': ('pa_channel_map *', ['pa_channel_map *']),
                'pa_channel_map_mask': ('pa_channel_position_mask_t', ['pa_channel_map *']),
                'pa_channel_map_parse': ('pa_channel_map *', ['pa_channel_map *', 'char *']),
                'pa_channel_map_snprint': ('char *', ['char *', 'size_t', 'pa_channel_map *']),
                'pa_channel_map_superset': ('int', ['pa_channel_map *', 'pa_channel_map *']),
                'pa_channel_map_to_name': ('char *', ['pa_channel_map *']),
                'pa_channel_map_to_pretty_name': ('char *', ['pa_channel_map *']),
                'pa_channel_map_valid': ('int', ['pa_channel_map *']),
                'pa_channel_position_from_string': ('pa_channel_position_t', ['char *']),
                'pa_channel_position_to_pretty_string': ('char *', ['pa_channel_position_t']),
                'pa_channel_position_to_string': ('char *', ['pa_channel_position_t']),
                'pa_channels_valid': ('int', ['uint8_t']),
                'pa_context_add_autoload': ('pa_operation *',
                                            ['pa_context *',
                                             'char *',
                                             'pa_autoload_type_t',
                                             'char *',
                                             'char *',
                                             'pa_context_index_cb_t',
                                             'void *']),
                'pa_context_connect': ('int',
                                       ['pa_context *',
                                        'char *',
                                        'pa_context_flags_t',
                                        'pa_spawn_api *']),
                'pa_context_disconnect': ('void', ['pa_context *']),
                'pa_context_drain': ('pa_operation *',
                                     ['pa_context *', 'pa_context_notify_cb_t', 'void *']),
                'pa_context_errno': ('int', ['pa_context *']),
                'pa_context_exit_daemon': ('pa_operation *',
                                           ['pa_context *', 'pa_context_success_cb_t', 'void *']),
                'pa_context_get_autoload_info_by_index': ('pa_operation *',
                                                          ['pa_context *',
                                                           'uint32_t',
                                                           'pa_autoload_info_cb_t',
                                                           'void *']),
                'pa_context_get_autoload_info_by_name': ('pa_operation *',
                                                         ['pa_context *',
                                                          'char *',
                                                          'pa_autoload_type_t',
                                                          'pa_autoload_info_cb_t',
                                                          'void *']),
                'pa_context_get_autoload_info_list': ('pa_operation *',
                                                      ['pa_context *',
                                                       'pa_autoload_info_cb_t',
                                                       'void *']),
                'pa_context_get_card_info_by_index': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'pa_card_info_cb_t',
                                                       'void *']),
                'pa_context_get_card_info_by_name': ('pa_operation *',
                                                     ['pa_context *',
                                                      'char *',
                                                      'pa_card_info_cb_t',
                                                      'void *']),
                'pa_context_get_card_info_list': ('pa_operation *',
                                                  ['pa_context *', 'pa_card_info_cb_t', 'void *']),
                'pa_context_get_client_info': ('pa_operation *',
                                               ['pa_context *',
                                                'uint32_t',
                                                'pa_client_info_cb_t',
                                                'void *']),
                'pa_context_get_client_info_list': ('pa_operation *',
                                                    ['pa_context *',
                                                     'pa_client_info_cb_t',
                                                     'void *']),
                'pa_context_get_index': ('uint32_t', ['pa_context *']),
                'pa_context_get_module_info': ('pa_operation *',
                                               ['pa_context *',
                                                'uint32_t',
                                                'pa_module_info_cb_t',
                                                'void *']),
                'pa_context_get_module_info_list': ('pa_operation *',
                                                    ['pa_context *',
                                                     'pa_module_info_cb_t',
                                                     'void *']),
                'pa_context_get_protocol_version': ('uint32_t', ['pa_context *']),
                'pa_context_get_sample_info_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'pa_sample_info_cb_t',
                                                         'void *']),
                'pa_context_get_sample_info_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'pa_sample_info_cb_t',
                                                        'void *']),
                'pa_context_get_sample_info_list': ('pa_operation *',
                                                    ['pa_context *',
                                                     'pa_sample_info_cb_t',
                                                     'void *']),
                'pa_context_get_server': ('char *', ['pa_context *']),
                'pa_context_get_server_info': ('pa_operation *',
                                               ['pa_context *', 'pa_server_info_cb_t', 'void *']),
                'pa_context_get_server_protocol_version': ('uint32_t', ['pa_context *']),
                'pa_context_get_sink_info_by_index': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'pa_sink_info_cb_t',
                                                       'void *']),
                'pa_context_get_sink_info_by_name': ('pa_operation *',
                                                     ['pa_context *',
                                                      'char *',
                                                      'pa_sink_info_cb_t',
                                                      'void *']),
                'pa_context_get_sink_info_list': ('pa_operation *',
                                                  ['pa_context *', 'pa_sink_info_cb_t', 'void *']),
                'pa_context_get_sink_input_info': ('pa_operation *',
                                                   ['pa_context *',
                                                    'uint32_t',
                                                    'pa_sink_input_info_cb_t',
                                                    'void *']),
                'pa_context_get_sink_input_info_list': ('pa_operation *',
                                                        ['pa_context *',
                                                         'pa_sink_input_info_cb_t',
                                                         'void *']),
                'pa_context_get_source_info_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'pa_source_info_cb_t',
                                                         'void *']),
                'pa_context_get_source_info_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'pa_source_info_cb_t',
                                                        'void *']),
                'pa_context_get_source_info_list': ('pa_operation *',
                                                    ['pa_context *',
                                                     'pa_source_info_cb_t',
                                                     'void *']),
                'pa_context_get_source_output_info': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'pa_source_output_info_cb_t',
                                                       'void *']),
                'pa_context_get_source_output_info_list': ('pa_operation *',
                                                           ['pa_context *',
                                                            'pa_source_output_info_cb_t',
                                                            'void *']),
                'pa_context_get_state': ('pa_context_state_t', ['pa_context *']),
                'pa_context_get_tile_size': ('size_t', ['pa_context *', 'pa_sample_spec *']),
                'pa_context_is_local': ('int', ['pa_context *']),
                'pa_context_is_pending': ('int', ['pa_context *']),
                'pa_context_kill_client': ('pa_operation *',
                                           ['pa_context *',
                                            'uint32_t',
                                            'pa_context_success_cb_t',
                                            'void *']),
                'pa_context_kill_sink_input': ('pa_operation *',
                                               ['pa_context *',
                                                'uint32_t',
                                                'pa_context_success_cb_t',
                                                'void *']),
                'pa_context_kill_source_output': ('pa_operation *',
                                                  ['pa_context *',
                                                   'uint32_t',
                                                   'pa_context_success_cb_t',
                                                   'void *']),
                'pa_context_load_cookie_from_file': ('int', ['pa_context *', 'char *']),
                'pa_context_load_module': ('pa_operation *',
                                           ['pa_context *',
                                            'char *',
                                            'char *',
                                            'pa_context_index_cb_t',
                                            'void *']),
                'pa_context_move_sink_input_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'uint32_t',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_move_sink_input_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'uint32_t',
                                                        'char *',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_move_source_output_by_index': ('pa_operation *',
                                                           ['pa_context *',
                                                            'uint32_t',
                                                            'uint32_t',
                                                            'pa_context_success_cb_t',
                                                            'void *']),
                'pa_context_move_source_output_by_name': ('pa_operation *',
                                                          ['pa_context *',
                                                           'uint32_t',
                                                           'char *',
                                                           'pa_context_success_cb_t',
                                                           'void *']),
                'pa_context_new': ('pa_context *', ['pa_mainloop_api *', 'char *']),
                'pa_context_new_with_proplist': ('pa_context *',
                                                 ['pa_mainloop_api *', 'char *', 'pa_proplist *']),
                'pa_context_play_sample': ('pa_operation *',
                                           ['pa_context *',
                                            'char *',
                                            'char *',
                                            'pa_volume_t',
                                            'pa_context_success_cb_t',
                                            'void *']),
                'pa_context_play_sample_with_proplist': ('pa_operation *',
                                                         ['pa_context *',
                                                          'char *',
                                                          'char *',
                                                          'pa_volume_t',
                                                          'pa_proplist *',
                                                          'pa_context_play_sample_cb_t',
                                                          'void *']),
                'pa_context_proplist_remove': ('pa_operation *',
                                               ['pa_context *',
                                                'char * *',
                                                'pa_context_success_cb_t',
                                                'void *']),
                'pa_context_proplist_update': ('pa_operation *',
                                               ['pa_context *',
                                                'pa_update_mode_t',
                                                'pa_proplist *',
                                                'pa_context_success_cb_t',
                                                'void *']),
                'pa_context_ref': ('pa_context *', ['pa_context *']),
                'pa_context_remove_autoload_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_remove_autoload_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'pa_autoload_type_t',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_remove_sample': ('pa_operation *',
                                             ['pa_context *',
                                              'char *',
                                              'pa_context_success_cb_t',
                                              'void *']),
                'pa_context_rttime_new': ('pa_time_event *',
                                          ['pa_context *',
                                           'pa_usec_t',
                                           'pa_time_event_cb_t',
                                           'void *']),
                'pa_context_rttime_restart': ('void',
                                              ['pa_context *', 'pa_time_event *', 'pa_usec_t']),
                'pa_context_send_message_to_object': ('pa_operation *',
                                                      ['pa_context *',
                                                       'char *',
                                                       'char *',
                                                       'char *',
                                                       'pa_context_string_cb_t',
                                                       'void *']),
                'pa_context_set_card_profile_by_index': ('pa_operation *',
                                                         ['pa_context *',
                                                          'uint32_t',
                                                          'char *',
                                                          'pa_context_success_cb_t',
                                                          'void *']),
                'pa_context_set_card_profile_by_name': ('pa_operation *',
                                                        ['pa_context *',
                                                         'char *',
                                                         'char *',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_set_default_sink': ('pa_operation *',
                                                ['pa_context *',
                                                 'char *',
                                                 'pa_context_success_cb_t',
                                                 'void *']),
                'pa_context_set_default_source': ('pa_operation *',
                                                  ['pa_context *',
                                                   'char *',
                                                   'pa_context_success_cb_t',
                                                   'void *']),
                'pa_context_set_event_callback': ('void',
                                                  ['pa_context *',
                                                   'pa_context_event_cb_t',
                                                   'void *']),
                'pa_context_set_name': ('pa_operation *',
                                        ['pa_context *',
                                         'char *',
                                         'pa_context_success_cb_t',
                                         'void *']),
                'pa_context_set_port_latency_offset': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'char *',
                                                        'int64_t',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_set_sink_input_mute': ('pa_operation *',
                                                   ['pa_context *',
                                                    'uint32_t',
                                                    'int',
                                                    'pa_context_success_cb_t',
                                                    'void *']),
                'pa_context_set_sink_input_volume': ('pa_operation *',
                                                     ['pa_context *',
                                                      'uint32_t',
                                                      'pa_cvolume *',
                                                      'pa_context_success_cb_t',
                                                      'void *']),
                'pa_context_set_sink_mute_by_index': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'int',
                                                       'pa_context_success_cb_t',
                                                       'void *']),
                'pa_context_set_sink_mute_by_name': ('pa_operation *',
                                                     ['pa_context *',
                                                      'char *',
                                                      'int',
                                                      'pa_context_success_cb_t',
                                                      'void *']),
                'pa_context_set_sink_port_by_index': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'char *',
                                                       'pa_context_success_cb_t',
                                                       'void *']),
                'pa_context_set_sink_port_by_name': ('pa_operation *',
                                                     ['pa_context *',
                                                      'char *',
                                                      'char *',
                                                      'pa_context_success_cb_t',
                                                      'void *']),
                'pa_context_set_sink_volume_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'pa_cvolume *',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_set_sink_volume_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'pa_cvolume *',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_set_source_mute_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'int',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_set_source_mute_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'int',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_set_source_output_mute': ('pa_operation *',
                                                      ['pa_context *',
                                                       'uint32_t',
                                                       'int',
                                                       'pa_context_success_cb_t',
                                                       'void *']),
                'pa_context_set_source_output_volume': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'pa_cvolume *',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_set_source_port_by_index': ('pa_operation *',
                                                        ['pa_context *',
                                                         'uint32_t',
                                                         'char *',
                                                         'pa_context_success_cb_t',
                                                         'void *']),
                'pa_context_set_source_port_by_name': ('pa_operation *',
                                                       ['pa_context *',
                                                        'char *',
                                                        'char *',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_set_source_volume_by_index': ('pa_operation *',
                                                          ['pa_context *',
                                                           'uint32_t',
                                                           'pa_cvolume *',
                                                           'pa_context_success_cb_t',
                                                           'void *']),
                'pa_context_set_source_volume_by_name': ('pa_operation *',
                                                         ['pa_context *',
                                                          'char *',
                                                          'pa_cvolume *',
                                                          'pa_context_success_cb_t',
                                                          'void *']),
                'pa_context_set_state_callback': ('void',
                                                  ['pa_context *',
                                                   'pa_context_notify_cb_t',
                                                   'void *']),
                'pa_context_set_subscribe_callback': ('void',
                                                      ['pa_context *',
                                                       'pa_context_subscribe_cb_t',
                                                       'void *']),
                'pa_context_stat': ('pa_operation *',
                                    ['pa_context *', 'pa_stat_info_cb_t', 'void *']),
                'pa_context_subscribe': ('pa_operation *',
                                         ['pa_context *',
                                          'pa_subscription_mask_t',
                                          'pa_context_success_cb_t',
                                          'void *']),
                'pa_context_suspend_sink_by_index': ('pa_operation *',
                                                     ['pa_context *',
                                                      'uint32_t',
                                                      'int',
                                                      'pa_context_success_cb_t',
                                                      'void *']),
                'pa_context_suspend_sink_by_name': ('pa_operation *',
                                                    ['pa_context *',
                                                     'char *',
                                                     'int',
                                                     'pa_context_success_cb_t',
                                                     'void *']),
                'pa_context_suspend_source_by_index': ('pa_operation *',
                                                       ['pa_context *',
                                                        'uint32_t',
                                                        'int',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_context_suspend_source_by_name': ('pa_operation *',
                                                      ['pa_context *',
                                                       'char *',
                                                       'int',
                                                       'pa_context_success_cb_t',
                                                       'void *']),
                'pa_context_unload_module': ('pa_operation *',
                                             ['pa_context *',
                                              'uint32_t',
                                              'pa_context_success_cb_t',
                                              'void *']),
                'pa_context_unref': ('void', ['pa_context *']),
                'pa_cvolume_avg': ('pa_volume_t', ['pa_cvolume *']),
                'pa_cvolume_avg_mask': ('pa_volume_t',
                                        ['pa_cvolume *',
                                         'pa_channel_map *',
                                         'pa_channel_position_mask_t']),
                'pa_cvolume_channels_equal_to': ('int', ['pa_cvolume *', 'pa_volume_t']),
                'pa_cvolume_compatible': ('int', ['pa_cvolume *', 'pa_sample_spec *']),
                'pa_cvolume_compatible_with_channel_map': ('int',
                                                           ['pa_cvolume *', 'pa_channel_map *']),
                'pa_cvolume_dec': ('pa_cvolume *', ['pa_cvolume *', 'pa_volume_t']),
                'pa_cvolume_equal': ('int', ['pa_cvolume *', 'pa_cvolume *']),
                'pa_cvolume_get_balance': ('float', ['pa_cvolume *', 'pa_channel_map *']),
                'pa_cvolume_get_fade': ('float', ['pa_cvolume *', 'pa_channel_map *']),
                'pa_cvolume_get_lfe_balance': ('float', ['pa_cvolume *', 'pa_channel_map *']),
                'pa_cvolume_get_position': ('pa_volume_t',
                                            ['pa_cvolume *',
                                             'pa_channel_map *',
                                             'pa_channel_position_t']),
                'pa_cvolume_inc': ('pa_cvolume *', ['pa_cvolume *', 'pa_volume_t']),
                'pa_cvolume_inc_clamp': ('pa_cvolume *',
                                         ['pa_cvolume *', 'pa_volume_t', 'pa_volume_t']),
                'pa_cvolume_init': ('pa_cvolume *', ['pa_cvolume *']),
                'pa_cvolume_max': ('pa_volume_t', ['pa_cvolume *']),
                'pa_cvolume_max_mask': ('pa_volume_t',
                                        ['pa_cvolume *',
                                         'pa_channel_map *',
                                         'pa_channel_position_mask_t']),
                'pa_cvolume_merge': ('pa_cvolume *',
                                     ['pa_cvolume *', 'pa_cvolume *', 'pa_cvolume *']),
                'pa_cvolume_min': ('pa_volume_t', ['pa_cvolume *']),
                'pa_cvolume_min_mask': ('pa_volume_t',
                                        ['pa_cvolume *',
                                         'pa_channel_map *',
                                         'pa_channel_position_mask_t']),
                'pa_cvolume_remap': ('pa_cvolume *',
                                     ['pa_cvolume *', 'pa_channel_map *', 'pa_channel_map *']),
                'pa_cvolume_scale': ('pa_cvolume *', ['pa_cvolume *', 'pa_volume_t']),
                'pa_cvolume_scale_mask': ('pa_cvolume *',
                                          ['pa_cvolume *',
                                           'pa_volume_t',
                                           'pa_channel_map *',
                                           'pa_channel_position_mask_t']),
                'pa_cvolume_set': ('pa_cvolume *', ['pa_cvolume *', 'unsigned', 'pa_volume_t']),
                'pa_cvolume_set_balance': ('pa_cvolume *',
                                           ['pa_cvolume *', 'pa_channel_map *', 'float']),
                'pa_cvolume_set_fade': ('pa_cvolume *',
                                        ['pa_cvolume *', 'pa_channel_map *', 'float']),
                'pa_cvolume_set_lfe_balance': ('pa_cvolume *',
                                               ['pa_cvolume *', 'pa_channel_map *', 'float']),
                'pa_cvolume_set_position': ('pa_cvolume *',
                                            ['pa_cvolume *',
                                             'pa_channel_map *',
                                             'pa_channel_position_t',
                                             'pa_volume_t']),
                'pa_cvolume_snprint': ('char *', ['char *', 'size_t', 'pa_cvolume *']),
                'pa_cvolume_snprint_verbose': ('char *',
                                               ['char *',
                                                'size_t',
                                                'pa_cvolume *',
                                                'pa_channel_map *',
                                                'int']),
                'pa_cvolume_valid': ('int', ['pa_cvolume *']),
                'pa_direction_to_string': ('char *', ['pa_direction_t']),
                'pa_direction_valid': ('int', ['pa_direction_t']),
                'pa_encoding_from_string': ('pa_encoding_t', ['char *']),
                'pa_encoding_to_string': ('char *', ['pa_encoding_t']),
                'pa_ext_device_restore_read_formats': ('pa_operation *',
                                                       ['pa_context *',
                                                        'pa_device_type_t',
                                                        'uint32_t',
                                                        'pa_ext_device_restore_read_device_formats_cb_t',
                                                        'void *']),
                'pa_ext_device_restore_read_formats_all': ('pa_operation *',
                                                           ['pa_context *',
                                                            'pa_ext_device_restore_read_device_formats_cb_t',
                                                            'void *']),
                'pa_ext_device_restore_save_formats': ('pa_operation *',
                                                       ['pa_context *',
                                                        'pa_device_type_t',
                                                        'uint32_t',
                                                        'uint8_t',
                                                        'pa_format_info * *',
                                                        'pa_context_success_cb_t',
                                                        'void *']),
                'pa_ext_device_restore_set_subscribe_cb': ('void',
                                                           ['pa_context *',
                                                            'pa_ext_device_restore_subscribe_cb_t',
                                                            'void *']),
                'pa_ext_device_restore_subscribe': ('pa_operation *',
                                                    ['pa_context *',
                                                     'int',
                                                     'pa_context_success_cb_t',
                                                     'void *']),
                'pa_ext_device_restore_test': ('pa_operation *',
                                               ['pa_context *',
                                                'pa_ext_device_restore_test_cb_t',
                                                'void *']),
                'pa_format_info_copy': ('pa_format_info *', ['pa_format_info *']),
                'pa_format_info_free': ('void', ['pa_format_info *']),
                'pa_format_info_free_string_array': ('void', ['char * *', 'int']),
                'pa_format_info_from_sample_spec': ('pa_format_info *',
                                                    ['pa_sample_spec *', 'pa_channel_map *']),
                'pa_format_info_from_string': ('pa_format_info *', ['char *']),
                'pa_format_info_get_channel_map': ('int', ['pa_format_info *', 'pa_channel_map *']),
                'pa_format_info_get_channels': ('int', ['pa_format_info *', 'uint8_t *']),
                'pa_format_info_get_prop_int': ('int', ['pa_format_info *', 'char *', 'int *']),
                'pa_format_info_get_prop_int_array': ('int',
                                                      ['pa_format_info *',
                                                       'char *',
                                                       'int * *',
                                                       'int *']),
                'pa_format_info_get_prop_int_range': ('int',
                                                      ['pa_format_info *',
                                                       'char *',
                                                       'int *',
                                                       'int *']),
                'pa_format_info_get_prop_string': ('int',
                                                   ['pa_format_info *', 'char *', 'char * *']),
                'pa_format_info_get_prop_string_array': ('int',
                                                         ['pa_format_info *',
                                                          'char *',
                                                          'char * * *',
                                                          'int *']),
                'pa_format_info_get_prop_type': ('pa_prop_type_t', ['pa_format_info *', 'char *']),
                'pa_format_info_get_rate': ('int', ['pa_format_info *', 'uint32_t *']),
                'pa_format_info_get_sample_format': ('int',
                                                     ['pa_format_info *', 'pa_sample_format_t *']),
                'pa_format_info_is_compatible': ('int', ['pa_format_info *', 'pa_format_info *']),
                'pa_format_info_is_pcm': ('int', ['pa_format_info *']),
                'pa_format_info_new': ('pa_format_info *', ['void']),
                'pa_format_info_set_channel_map': ('void',
                                                   ['pa_format_info *', 'pa_channel_map *']),
                'pa_format_info_set_channels': ('void', ['pa_format_info *', 'int']),
                'pa_format_info_set_prop_int': ('void', ['pa_format_info *', 'char *', 'int']),
                'pa_format_info_set_prop_int_array': ('void',
                                                      ['pa_format_info *',
                                                       'char *',
                                                       'int *',
                                                       'int']),
                'pa_format_info_set_prop_int_range': ('void',
                                                      ['pa_format_info *', 'char *', 'int', 'int']),
                'pa_format_info_set_prop_string': ('void',
                                                   ['pa_format_info *', 'char *', 'char *']),
                'pa_format_info_set_prop_string_array': ('void',
                                                         ['pa_format_info *',
                                                          'char *',
                                                          'char * *',
                                                          'int']),
                'pa_format_info_set_rate': ('void', ['pa_format_info *', 'int']),
                'pa_format_info_set_sample_format': ('void',
                                                     ['pa_format_info *', 'pa_sample_format_t']),
                'pa_format_info_snprint': ('char *', ['char *', 'size_t', 'pa_format_info *']),
                'pa_format_info_to_sample_spec': ('int',
                                                  ['pa_format_info *',
                                                   'pa_sample_spec *',
                                                   'pa_channel_map *']),
                'pa_format_info_valid': ('int', ['pa_format_info *']),
                'pa_frame_size': ('size_t', ['pa_sample_spec *']),
                'pa_get_binary_name': ('char *', ['char *', 'size_t']),
                'pa_get_fqdn': ('char *', ['char *', 'size_t']),
                'pa_get_home_dir': ('char *', ['char *', 'size_t']),
                'pa_get_host_name': ('char *', ['char *', 'size_t']),
                'pa_get_library_version': ('char *', ['void']),
                'pa_get_user_name': ('char *', ['char *', 'size_t']),
                'pa_gettimeofday': ('struct timeval *', ['struct timeval *']),
                'pa_locale_to_utf8': ('char *', ['char *']),
                'pa_mainloop_api_once': ('void',
                                         ['pa_mainloop_api *',
                                          ('void', ['pa_mainloop_api *', 'void *']),
                                          'void *']),
                'pa_mainloop_dispatch': ('int', ['pa_mainloop *']),
                'pa_mainloop_free': ('void', ['pa_mainloop *']),
                'pa_mainloop_get_api': ('pa_mainloop_api *', ['pa_mainloop *']),
                'pa_mainloop_get_retval': ('int', ['pa_mainloop *']),
                'pa_mainloop_iterate': ('int', ['pa_mainloop *', 'int', 'int *']),
                'pa_mainloop_new': ('pa_mainloop *', ['void']),
                'pa_mainloop_poll': ('int', ['pa_mainloop *']),
                'pa_mainloop_prepare': ('int', ['pa_mainloop *', 'int']),
                'pa_mainloop_quit': ('void', ['pa_mainloop *', 'int']),
                'pa_mainloop_run': ('int', ['pa_mainloop *', 'int *']),
                'pa_mainloop_set_poll_func': ('void', ['pa_mainloop *', 'pa_poll_func', 'void *']),
                'pa_mainloop_wakeup': ('void', ['pa_mainloop *']),
                'pa_msleep': ('int', ['unsigned long']),
                'pa_operation_cancel': ('void', ['pa_operation *']),
                'pa_operation_get_state': ('pa_operation_state_t', ['pa_operation *']),
                'pa_operation_ref': ('pa_operation *', ['pa_operation *']),
                'pa_operation_set_state_callback': ('void',
                                                    ['pa_operation *',
                                                     'pa_operation_notify_cb_t',
                                                     'void *']),
                'pa_operation_unref': ('void', ['pa_operation *']),
                'pa_parse_sample_format': ('pa_sample_format_t', ['char *']),
                'pa_path_get_filename': ('char *', ['char *']),
                'pa_proplist_clear': ('void', ['pa_proplist *']),
                'pa_proplist_contains': ('int', ['pa_proplist *', 'char *']),
                'pa_proplist_copy': ('pa_proplist *', ['pa_proplist *']),
                'pa_proplist_equal': ('int', ['pa_proplist *', 'pa_proplist *']),
                'pa_proplist_free': ('void', ['pa_proplist *']),
                'pa_proplist_from_string': ('pa_proplist *', ['char *']),
                'pa_proplist_get': ('int', ['pa_proplist *', 'char *', 'void * *', 'size_t *']),
                'pa_proplist_gets': ('char *', ['pa_proplist *', 'char *']),
                'pa_proplist_isempty': ('int', ['pa_proplist *']),
                'pa_proplist_iterate': ('char *', ['pa_proplist *', 'void * *']),
                'pa_proplist_key_valid': ('int', ['char *']),
                'pa_proplist_new': ('pa_proplist *', ['void']),
                'pa_proplist_set': ('int', ['pa_proplist *', 'char *', 'void *', 'size_t']),
                'pa_proplist_setp': ('int', ['pa_proplist *', 'char *']),
                'pa_proplist_sets': ('int', ['pa_proplist *', 'char *', 'char *']),
                'pa_proplist_size': ('unsigned', ['pa_proplist *']),
                'pa_proplist_to_string': ('char *', ['pa_proplist *']),
                'pa_proplist_to_string_sep': ('char *', ['pa_proplist *', 'char *']),
                'pa_proplist_unset': ('int', ['pa_proplist *', 'char *']),
                'pa_proplist_unset_many': ('int', ['pa_proplist *', 'char * *']),
                'pa_proplist_update': ('void',
                                       ['pa_proplist *', 'pa_update_mode_t', 'pa_proplist *']),
                'pa_rtclock_now': ('pa_usec_t', ['void']),
                'pa_sample_format_is_be': ('int', ['pa_sample_format_t']),
                'pa_sample_format_is_le': ('int', ['pa_sample_format_t']),
                'pa_sample_format_to_string': ('char *', ['pa_sample_format_t']),
                'pa_sample_format_valid': ('int', ['unsigned']),
                'pa_sample_rate_valid': ('int', ['uint32_t']),
                'pa_sample_size': ('size_t', ['pa_sample_spec *']),
                'pa_sample_size_of_format': ('size_t', ['pa_sample_format_t']),
                'pa_sample_spec_equal': ('int', ['pa_sample_spec *', 'pa_sample_spec *']),
                'pa_sample_spec_init': ('pa_sample_spec *', ['pa_sample_spec *']),
                'pa_sample_spec_snprint': ('char *', ['char *', 'size_t', 'pa_sample_spec *']),
                'pa_sample_spec_valid': ('int', ['pa_sample_spec *']),
                'pa_signal_done': ('void', ['void']),
                'pa_signal_free': ('void', ['pa_signal_event *']),
                'pa_signal_init': ('int', ['pa_mainloop_api *']),
                'pa_signal_new': ('pa_signal_event *', ['int', 'pa_signal_cb_t', 'void *']),
                'pa_signal_set_destroy': ('void', ['pa_signal_event *', 'pa_signal_destroy_cb_t']),
                'pa_stream_begin_write': ('int', ['pa_stream *', 'void * *', 'size_t *']),
                'pa_stream_cancel_write': ('int', ['pa_stream *']),
                'pa_stream_connect_playback': ('int',
                                               ['pa_stream *',
                                                'char *',
                                                'pa_buffer_attr *',
                                                'pa_stream_flags_t',
                                                'pa_cvolume *',
                                                'pa_stream *']),
                'pa_stream_connect_record': ('int',
                                             ['pa_stream *',
                                              'char *',
                                              'pa_buffer_attr *',
                                              'pa_stream_flags_t']),
                'pa_stream_connect_upload': ('int', ['pa_stream *', 'size_t']),
                'pa_stream_cork': ('pa_operation *',
                                   ['pa_stream *', 'int', 'pa_stream_success_cb_t', 'void *']),
                'pa_stream_disconnect': ('int', ['pa_stream *']),
                'pa_stream_drain': ('pa_operation *',
                                    ['pa_stream *', 'pa_stream_success_cb_t', 'void *']),
                'pa_stream_drop': ('int', ['pa_stream *']),
                'pa_stream_finish_upload': ('int', ['pa_stream *']),
                'pa_stream_flush': ('pa_operation *',
                                    ['pa_stream *', 'pa_stream_success_cb_t', 'void *']),
                'pa_stream_get_buffer_attr': ('pa_buffer_attr *', ['pa_stream *']),
                'pa_stream_get_channel_map': ('pa_channel_map *', ['pa_stream *']),
                'pa_stream_get_context': ('pa_context *', ['pa_stream *']),
                'pa_stream_get_device_index': ('uint32_t', ['pa_stream *']),
                'pa_stream_get_device_name': ('char *', ['pa_stream *']),
                'pa_stream_get_format_info': ('pa_format_info *', ['pa_stream *']),
                'pa_stream_get_index': ('uint32_t', ['pa_stream *']),
                'pa_stream_get_latency': ('int', ['pa_stream *', 'pa_usec_t *', 'int *']),
                'pa_stream_get_monitor_stream': ('uint32_t', ['pa_stream *']),
                'pa_stream_get_sample_spec': ('pa_sample_spec *', ['pa_stream *']),
                'pa_stream_get_state': ('pa_stream_state_t', ['pa_stream *']),
                'pa_stream_get_time': ('int', ['pa_stream *', 'pa_usec_t *']),
                'pa_stream_get_timing_info': ('pa_timing_info *', ['pa_stream *']),
                'pa_stream_get_underflow_index': ('int64_t', ['pa_stream *']),
                'pa_stream_is_corked': ('int', ['pa_stream *']),
                'pa_stream_is_suspended': ('int', ['pa_stream *']),
                'pa_stream_new': ('pa_stream *',
                                  ['pa_context *',
                                   'char *',
                                   'pa_sample_spec *',
                                   'pa_channel_map *']),
                'pa_stream_new_extended': ('pa_stream *',
                                           ['pa_context *',
                                            'char *',
                                            'pa_format_info * *',
                                            'unsigned int',
                                            'pa_proplist *']),
                'pa_stream_new_with_proplist': ('pa_stream *',
                                                ['pa_context *',
                                                 'char *',
                                                 'pa_sample_spec *',
                                                 'pa_channel_map *',
                                                 'pa_proplist *']),
                'pa_stream_peek': ('int', ['pa_stream *', 'void * *', 'size_t *']),
                'pa_stream_prebuf': ('pa_operation *',
                                     ['pa_stream *', 'pa_stream_success_cb_t', 'void *']),
                'pa_stream_proplist_remove': ('pa_operation *',
                                              ['pa_stream *',
                                               'char * *',
                                               'pa_stream_success_cb_t',
                                               'void *']),
                'pa_stream_proplist_update': ('pa_operation *',
                                              ['pa_stream *',
                                               'pa_update_mode_t',
                                               'pa_proplist *',
                                               'pa_stream_success_cb_t',
                                               'void *']),
                'pa_stream_readable_size': ('size_t', ['pa_stream *']),
                'pa_stream_ref': ('pa_stream *', ['pa_stream *']),
                'pa_stream_set_buffer_attr': ('pa_operation *',
                                              ['pa_stream *',
                                               'pa_buffer_attr *',
                                               'pa_stream_success_cb_t',
                                               'void *']),
                'pa_stream_set_buffer_attr_callback': ('void',
                                                       ['pa_stream *',
                                                        'pa_stream_notify_cb_t',
                                                        'void *']),
                'pa_stream_set_event_callback': ('void',
                                                 ['pa_stream *', 'pa_stream_event_cb_t', 'void *']),
                'pa_stream_set_latency_update_callback': ('void',
                                                          ['pa_stream *',
                                                           'pa_stream_notify_cb_t',
                                                           'void *']),
                'pa_stream_set_monitor_stream': ('int', ['pa_stream *', 'uint32_t']),
                'pa_stream_set_moved_callback': ('void',
                                                 ['pa_stream *',
                                                  'pa_stream_notify_cb_t',
                                                  'void *']),
                'pa_stream_set_name': ('pa_operation *',
                                       ['pa_stream *',
                                        'char *',
                                        'pa_stream_success_cb_t',
                                        'void *']),
                'pa_stream_set_overflow_callback': ('void',
                                                    ['pa_stream *',
                                                     'pa_stream_notify_cb_t',
                                                     'void *']),
                'pa_stream_set_read_callback': ('void',
                                                ['pa_stream *',
                                                 'pa_stream_request_cb_t',
                                                 'void *']),
                'pa_stream_set_started_callback': ('void',
                                                   ['pa_stream *',
                                                    'pa_stream_notify_cb_t',
                                                    'void *']),
                'pa_stream_set_state_callback': ('void',
                                                 ['pa_stream *',
                                                  'pa_stream_notify_cb_t',
                                                  'void *']),
                'pa_stream_set_suspended_callback': ('void',
                                                     ['pa_stream *',
                                                      'pa_stream_notify_cb_t',
                                                      'void *']),
                'pa_stream_set_underflow_callback': ('void',
                                                     ['pa_stream *',
                                                      'pa_stream_notify_cb_t',
                                                      'void *']),
                'pa_stream_set_write_callback': ('void',
                                                 ['pa_stream *',
                                                  'pa_stream_request_cb_t',
                                                  'void *']),
                'pa_stream_trigger': ('pa_operation *',
                                      ['pa_stream *', 'pa_stream_success_cb_t', 'void *']),
                'pa_stream_unref': ('void', ['pa_stream *']),
                'pa_stream_update_sample_rate': ('pa_operation *',
                                                 ['pa_stream *',
                                                  'uint32_t',
                                                  'pa_stream_success_cb_t',
                                                  'void *']),
                'pa_stream_update_timing_info': ('pa_operation *',
                                                 ['pa_stream *',
                                                  'pa_stream_success_cb_t',
                                                  'void *']),
                'pa_stream_writable_size': ('size_t', ['pa_stream *']),
                'pa_stream_write': ('int',
                                    ['pa_stream *',
                                     'void *',
                                     'size_t',
                                     'pa_free_cb_t',
                                     'int64_t',
                                     'pa_seek_mode_t']),
                'pa_stream_write_ext_free': ('int',
                                             ['pa_stream *',
                                              'void *',
                                              'size_t',
                                              'pa_free_cb_t',
                                              'void *',
                                              'int64_t',
                                              'pa_seek_mode_t']),
                'pa_strerror': ('char *', ['int']),
                'pa_sw_cvolume_divide': ('pa_cvolume *',
                                         ['pa_cvolume *', 'pa_cvolume *', 'pa_cvolume *']),
                'pa_sw_cvolume_divide_scalar': ('pa_cvolume *',
                                                ['pa_cvolume *', 'pa_cvolume *', 'pa_volume_t']),
                'pa_sw_cvolume_multiply': ('pa_cvolume *',
                                           ['pa_cvolume *', 'pa_cvolume *', 'pa_cvolume *']),
                'pa_sw_cvolume_multiply_scalar': ('pa_cvolume *',
                                                  ['pa_cvolume *', 'pa_cvolume *', 'pa_volume_t']),
                'pa_sw_cvolume_snprint_dB': ('char *', ['char *', 'size_t', 'pa_cvolume *']),
                'pa_sw_volume_divide': ('pa_volume_t', ['pa_volume_t', 'pa_volume_t']),
                'pa_sw_volume_from_dB': ('pa_volume_t', ['double']),
                'pa_sw_volume_from_linear': ('pa_volume_t', ['double']),
                'pa_sw_volume_multiply': ('pa_volume_t', ['pa_volume_t', 'pa_volume_t']),
                'pa_sw_volume_snprint_dB': ('char *', ['char *', 'size_t', 'pa_volume_t']),
                'pa_sw_volume_to_dB': ('double', ['pa_volume_t']),
                'pa_sw_volume_to_linear': ('double', ['pa_volume_t']),
                'pa_thread_make_realtime': ('int', ['int']),
                'pa_threaded_mainloop_accept': ('void', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_free': ('void', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_get_api': ('pa_mainloop_api *', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_get_retval': ('int', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_in_thread': ('int', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_lock': ('void', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_new': ('pa_threaded_mainloop *', ['void']),
                'pa_threaded_mainloop_once_unlocked': ('void',
                                                       ['pa_threaded_mainloop *',
                                                        ('void',
                                                         ['pa_threaded_mainloop *', 'void *']),
                                                        'void *']),
                'pa_threaded_mainloop_set_name': ('void', ['pa_threaded_mainloop *', 'char *']),
                'pa_threaded_mainloop_signal': ('void', ['pa_threaded_mainloop *', 'int']),
                'pa_threaded_mainloop_start': ('int', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_stop': ('void', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_unlock': ('void', ['pa_threaded_mainloop *']),
                'pa_threaded_mainloop_wait': ('void', ['pa_threaded_mainloop *']),
                'pa_timeval_add': ('struct timeval *', ['struct timeval *', 'pa_usec_t']),
                'pa_timeval_age': ('pa_usec_t', ['struct timeval *']),
                'pa_timeval_cmp': ('int', ['struct timeval *', 'struct timeval *']),
                'pa_timeval_diff': ('pa_usec_t', ['struct timeval *', 'struct timeval *']),
                'pa_timeval_load': ('pa_usec_t', ['struct timeval *']),
                'pa_timeval_store': ('struct timeval *', ['struct timeval *', 'pa_usec_t']),
                'pa_timeval_sub': ('struct timeval *', ['struct timeval *', 'pa_usec_t']),
                'pa_usec_to_bytes': ('size_t', ['pa_usec_t', 'pa_sample_spec *']),
                'pa_utf8_filter': ('char *', ['char *']),
                'pa_utf8_to_locale': ('char *', ['char *']),
                'pa_utf8_valid': ('char *', ['char *']),
                'pa_volume_snprint': ('char *', ['char *', 'size_t', 'pa_volume_t']),
                'pa_volume_snprint_verbose': ('char *',
                                              ['char *', 'size_t', 'pa_volume_t', 'int'])}}
