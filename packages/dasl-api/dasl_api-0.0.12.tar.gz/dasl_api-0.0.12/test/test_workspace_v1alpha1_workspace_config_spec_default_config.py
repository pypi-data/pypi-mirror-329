# coding: utf-8

"""
    Antimatter Security Lakehouse Public API

    Interact with the Antimatter ASL API.

    The version of the OpenAPI document: 0.0.12
    Contact: support@antimatter.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from dasl_api.models.workspace_v1alpha1_workspace_config_spec_default_config import WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig

class TestWorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig(unittest.TestCase):
    """WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig:
        """Test WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig`
        """
        model = WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig()
        if include_optional:
            return WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig(
                datasources = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                    notebook_location = '', 
                    bronze_schema = '', 
                    silver_schema = '', 
                    gold_schema = '', 
                    catalog_name = '', 
                    default_max_resources_per_job = 56, 
                    checkpoint_location = '', 
                    compute_group_overrides = {
                        'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                            max_resources_per_job = 56, )
                        }, ),
                transforms = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                    notebook_location = '', 
                    bronze_schema = '', 
                    silver_schema = '', 
                    gold_schema = '', 
                    catalog_name = '', 
                    default_max_resources_per_job = 56, 
                    checkpoint_location = '', 
                    compute_group_overrides = {
                        'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                            max_resources_per_job = 56, )
                        }, ),
                rules = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                    notebook_location = '', 
                    bronze_schema = '', 
                    silver_schema = '', 
                    gold_schema = '', 
                    catalog_name = '', 
                    default_max_resources_per_job = 56, 
                    checkpoint_location = '', 
                    compute_group_overrides = {
                        'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                            max_resources_per_job = 56, )
                        }, ),
                var_global = dasl_api.models.workspace/v1alpha1/default_config.workspace.v1alpha1.DefaultConfig(
                    notebook_location = '', 
                    bronze_schema = '', 
                    silver_schema = '', 
                    gold_schema = '', 
                    catalog_name = '', 
                    default_max_resources_per_job = 56, 
                    checkpoint_location = '', 
                    compute_group_overrides = {
                        'key' : dasl_api.models.workspace_v1alpha1_default_config_compute_group_overrides_value.workspace_v1alpha1_DefaultConfig_computeGroupOverrides_value(
                            max_resources_per_job = 56, )
                        }, )
            )
        else:
            return WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig(
        )
        """

    def testWorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig(self):
        """Test WorkspaceV1alpha1WorkspaceConfigSpecDefaultConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
