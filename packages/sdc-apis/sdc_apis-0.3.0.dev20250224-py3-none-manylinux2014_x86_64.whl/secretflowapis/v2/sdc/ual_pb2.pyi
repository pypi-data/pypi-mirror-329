"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class UnifiedAttestationAttributes(google.protobuf.message.Message):
    """/ UnifiedAttestationAttributes collect all attributes information
    / of trusted application from UnifiedAttestationReport format report.
    / All attributes are optional when used in UnifiedAttestationPolicy.
    / The TEE implement decides which attribute is used in the report and policy.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_TEE_PLATFORM_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_HW_VERSION_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_SW_VERSION_FIELD_NUMBER: builtins.int
    HEX_SECURE_FLAGS_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_BOOT_MEASUREMENT_FIELD_NUMBER: builtins.int
    STR_TEE_NAME_FIELD_NUMBER: builtins.int
    STR_TEE_IDENTITY_FIELD_NUMBER: builtins.int
    HEX_TA_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_TA_DYN_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_SIGNER_FIELD_NUMBER: builtins.int
    HEX_PROD_ID_FIELD_NUMBER: builtins.int
    STR_MIN_ISVSVN_FIELD_NUMBER: builtins.int
    BOOL_DEBUG_DISABLED_FIELD_NUMBER: builtins.int
    HEX_USER_DATA_FIELD_NUMBER: builtins.int
    HEX_HASH_OR_PEM_PUBKEY_FIELD_NUMBER: builtins.int
    HEX_NONCE_FIELD_NUMBER: builtins.int
    HEX_SPID_FIELD_NUMBER: builtins.int
    STR_VERIFIED_TIME_FIELD_NUMBER: builtins.int
    str_tee_platform: builtins.str
    """The TEE platform, in case some verifier needs to verify this."""
    hex_platform_hw_version: builtins.str
    """The TEE platform hardware-related identity or version"""
    hex_platform_sw_version: builtins.str
    """The TEE platform TCB software-related version"""
    hex_secure_flags: builtins.str
    """The TEE platform security-related attributes or flags"""
    hex_platform_measurement: builtins.str
    """The measurement of TEE implement internal stuff"""
    hex_boot_measurement: builtins.str
    """The measurement of TEE instance boot time stuff"""
    str_tee_name: builtins.str
    """The name of this tee instance"""
    str_tee_identity: builtins.str
    """The TEE instance or trust application identity when generating the report"""
    hex_ta_measurement: builtins.str
    """The static measurement of trust application when loading the code"""
    hex_ta_dyn_measurement: builtins.str
    """The dynamical measurement of trust application code,
    for example, the real-time measurement of code in secure memory
    after the trust application is already run.
    """
    hex_signer: builtins.str
    """The measurement or other identity of the trust application signer"""
    hex_prod_id: builtins.str
    """The product ID of the TEE instance or trust application"""
    str_min_isvsvn: builtins.str
    """The minimal ISV SVN of the TEE instance or trust application"""
    bool_debug_disabled: builtins.str
    """The bool string "0" for debuggable, "1" for not debuggable"""
    hex_user_data: builtins.str
    """The user data for generating the attestation report"""
    hex_hash_or_pem_pubkey: builtins.str
    """hex string hash or original pem public key"""
    hex_nonce: builtins.str
    """The independent freshness value besides what is in user data"""
    hex_spid: builtins.str
    """The service provider id, e.g. use in sgx1, 64 bytes hex string"""
    str_verified_time: builtins.str
    """The report verified time set by verifier if there is trust time"""
    def __init__(
        self,
        *,
        str_tee_platform: builtins.str = ...,
        hex_platform_hw_version: builtins.str = ...,
        hex_platform_sw_version: builtins.str = ...,
        hex_secure_flags: builtins.str = ...,
        hex_platform_measurement: builtins.str = ...,
        hex_boot_measurement: builtins.str = ...,
        str_tee_name: builtins.str = ...,
        str_tee_identity: builtins.str = ...,
        hex_ta_measurement: builtins.str = ...,
        hex_ta_dyn_measurement: builtins.str = ...,
        hex_signer: builtins.str = ...,
        hex_prod_id: builtins.str = ...,
        str_min_isvsvn: builtins.str = ...,
        bool_debug_disabled: builtins.str = ...,
        hex_user_data: builtins.str = ...,
        hex_hash_or_pem_pubkey: builtins.str = ...,
        hex_nonce: builtins.str = ...,
        hex_spid: builtins.str = ...,
        str_verified_time: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["bool_debug_disabled", b"bool_debug_disabled", "hex_boot_measurement", b"hex_boot_measurement", "hex_hash_or_pem_pubkey", b"hex_hash_or_pem_pubkey", "hex_nonce", b"hex_nonce", "hex_platform_hw_version", b"hex_platform_hw_version", "hex_platform_measurement", b"hex_platform_measurement", "hex_platform_sw_version", b"hex_platform_sw_version", "hex_prod_id", b"hex_prod_id", "hex_secure_flags", b"hex_secure_flags", "hex_signer", b"hex_signer", "hex_spid", b"hex_spid", "hex_ta_dyn_measurement", b"hex_ta_dyn_measurement", "hex_ta_measurement", b"hex_ta_measurement", "hex_user_data", b"hex_user_data", "str_min_isvsvn", b"str_min_isvsvn", "str_tee_identity", b"str_tee_identity", "str_tee_name", b"str_tee_name", "str_tee_platform", b"str_tee_platform", "str_verified_time", b"str_verified_time"]) -> None: ...

global___UnifiedAttestationAttributes = UnifiedAttestationAttributes

@typing.final
class UnifiedAttestationPolicy(google.protobuf.message.Message):
    """/ UnifiedAttestationPolicy is used when verifying the attestation report.
    / Both main or nested submodule attester support multi-version of instances.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PEM_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    MAIN_ATTRIBUTES_FIELD_NUMBER: builtins.int
    NESTED_POLICIES_FIELD_NUMBER: builtins.int
    pem_public_key: builtins.str
    """Assume one public key is bound to one report, specify it here.
    We can also specify the public key or its hash in the main or submodule
    UnifiedAttestationAttributes. Public key verification will happen
    in both two places.
    NOTE: if there is a submodule attester, we must specify the public key
    here to verify the signature of the submodel attestation result.
    """
    @property
    def main_attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationAttributes]:
        """For the main attester"""

    @property
    def nested_policies(self) -> global___UnifiedAttestationNestedPolicies:
        """For submodule attesters"""

    def __init__(
        self,
        *,
        pem_public_key: builtins.str = ...,
        main_attributes: collections.abc.Iterable[global___UnifiedAttestationAttributes] | None = ...,
        nested_policies: global___UnifiedAttestationNestedPolicies | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["nested_policies", b"nested_policies"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["main_attributes", b"main_attributes", "nested_policies", b"nested_policies", "pem_public_key", b"pem_public_key"]) -> None: ...

global___UnifiedAttestationPolicy = UnifiedAttestationPolicy

@typing.final
class UnifiedAttestationNestedPolicies(google.protobuf.message.Message):
    """/ Match rules for nested reports verification"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_GROUP_NAME_FIELD_NUMBER: builtins.int
    STR_GROUP_ID_FIELD_NUMBER: builtins.int
    POLICIES_FIELD_NUMBER: builtins.int
    str_group_name: builtins.str
    """The group name and id are used for group attestation"""
    str_group_id: builtins.str
    @property
    def policies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationNestedPolicy]: ...
    def __init__(
        self,
        *,
        str_group_name: builtins.str = ...,
        str_group_id: builtins.str = ...,
        policies: collections.abc.Iterable[global___UnifiedAttestationNestedPolicy] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["policies", b"policies", "str_group_id", b"str_group_id", "str_group_name", b"str_group_name"]) -> None: ...

global___UnifiedAttestationNestedPolicies = UnifiedAttestationNestedPolicies

@typing.final
class UnifiedAttestationNestedPolicy(google.protobuf.message.Message):
    """/ Match rules for nested report verification"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUB_ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def sub_attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationAttributes]: ...
    def __init__(
        self,
        *,
        sub_attributes: collections.abc.Iterable[global___UnifiedAttestationAttributes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["sub_attributes", b"sub_attributes"]) -> None: ...

global___UnifiedAttestationNestedPolicy = UnifiedAttestationNestedPolicy

@typing.final
class UnifiedAttestationReportParams(google.protobuf.message.Message):
    """/ Special Parameters for different TEE platforms, keep consistent with kubetee
    / attestation.proto
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_REPORT_IDENTITY_FIELD_NUMBER: builtins.int
    HEX_USER_DATA_FIELD_NUMBER: builtins.int
    JSON_NESTED_REPORTS_FIELD_NUMBER: builtins.int
    PEM_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    HEX_SPID_FIELD_NUMBER: builtins.int
    str_report_identity: builtins.str
    """The identity string for the report instance which is cached inside TEE.
    It's optional and usually used in Asynchronous processes.
    """
    hex_user_data: builtins.str
    """The user data in some TEE platforms, Max to 64 Bytes of HEX string.
    Users need to convert binary value data to HEX string themselves.
    """
    json_nested_reports: builtins.str
    """The JSON serialized string of UnifiedAttestationNestedReports"""
    pem_public_key: builtins.str
    """User specified public key instead of UAK to be put into report_data"""
    hex_spid: builtins.str
    """Service Provider ID for SGX1 only"""
    def __init__(
        self,
        *,
        str_report_identity: builtins.str = ...,
        hex_user_data: builtins.str = ...,
        json_nested_reports: builtins.str = ...,
        pem_public_key: builtins.str = ...,
        hex_spid: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["hex_spid", b"hex_spid", "hex_user_data", b"hex_user_data", "json_nested_reports", b"json_nested_reports", "pem_public_key", b"pem_public_key", "str_report_identity", b"str_report_identity"]) -> None: ...

global___UnifiedAttestationReportParams = UnifiedAttestationReportParams

@typing.final
class UnifiedAttestationGenerationParams(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEE_IDENTITY_FIELD_NUMBER: builtins.int
    REPORT_TYPE_FIELD_NUMBER: builtins.int
    REPORT_HEX_NONCE_FIELD_NUMBER: builtins.int
    REPORT_PARAMS_FIELD_NUMBER: builtins.int
    tee_identity: builtins.str
    """For which TEE instance to generate the unified attestation report"""
    report_type: builtins.str
    """which type of unified attestation report to be generated"""
    report_hex_nonce: builtins.str
    """Provide freshness if necessary."""
    @property
    def report_params(self) -> global___UnifiedAttestationReportParams: ...
    def __init__(
        self,
        *,
        tee_identity: builtins.str = ...,
        report_type: builtins.str = ...,
        report_hex_nonce: builtins.str = ...,
        report_params: global___UnifiedAttestationReportParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["report_params", b"report_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["report_hex_nonce", b"report_hex_nonce", "report_params", b"report_params", "report_type", b"report_type", "tee_identity", b"tee_identity"]) -> None: ...

global___UnifiedAttestationGenerationParams = UnifiedAttestationGenerationParams

@typing.final
class UnifiedAttestationReport(google.protobuf.message.Message):
    """/ Unified Attestation Report, keep consistent with kubetee attestation.proto"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_REPORT_VERSION_FIELD_NUMBER: builtins.int
    STR_REPORT_TYPE_FIELD_NUMBER: builtins.int
    STR_TEE_PLATFORM_FIELD_NUMBER: builtins.int
    JSON_REPORT_FIELD_NUMBER: builtins.int
    JSON_NESTED_REPORTS_FIELD_NUMBER: builtins.int
    str_report_version: builtins.str
    """For compatibility and update later, the current version is "1.0" """
    str_report_type: builtins.str
    """Valid type string: "BackgroundCheck"|"Passport"|"Uas" """
    str_tee_platform: builtins.str
    """The TEE platform name"""
    json_report: builtins.str
    """Different JSON serialized string for each TEE platform
    The TEE platforms are in charge of parsing it in their own way.
    """
    json_nested_reports: builtins.str
    """The JSON serialized string of UnifiedAttestationNestedReports"""
    def __init__(
        self,
        *,
        str_report_version: builtins.str = ...,
        str_report_type: builtins.str = ...,
        str_tee_platform: builtins.str = ...,
        json_report: builtins.str = ...,
        json_nested_reports: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["json_nested_reports", b"json_nested_reports", "json_report", b"json_report", "str_report_type", b"str_report_type", "str_report_version", b"str_report_version", "str_tee_platform", b"str_tee_platform"]) -> None: ...

global___UnifiedAttestationReport = UnifiedAttestationReport

@typing.final
class UnifiedAttestationAuthReport(google.protobuf.message.Message):
    """/ Unified attestation report with public key authentication"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REPORT_FIELD_NUMBER: builtins.int
    PEM_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    pem_public_key: builtins.str
    @property
    def report(self) -> global___UnifiedAttestationReport: ...
    def __init__(
        self,
        *,
        report: global___UnifiedAttestationReport | None = ...,
        pem_public_key: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["report", b"report"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["pem_public_key", b"pem_public_key", "report", b"report"]) -> None: ...

global___UnifiedAttestationAuthReport = UnifiedAttestationAuthReport

@typing.final
class DcapReport(google.protobuf.message.Message):
    """/ UnifiedAttestationReport::json_report for SGX2 DCAP
    / Store the quote and PCCS verification collateral for SGX2 DCAP attestation
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_QUOTE_FIELD_NUMBER: builtins.int
    JSON_COLLATERAL_FIELD_NUMBER: builtins.int
    b64_quote: builtins.str
    """For BackgroundCheck type report: Only quote in the report"""
    json_collateral: builtins.str
    """For Passport type report: Quote and collateral in report
    The serialized JSON string of the SgxQlQveCollateral
    """
    def __init__(
        self,
        *,
        b64_quote: builtins.str = ...,
        json_collateral: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_quote", b"b64_quote", "json_collateral", b"json_collateral"]) -> None: ...

global___DcapReport = DcapReport

@typing.final
class SgxQlQveCollateral(google.protobuf.message.Message):
    """/ SGX DCAP quote verification collateral
    / Get this after generating the quote and adding it to the report
    / In this way, the challenger will don't need to connect PCCS anymore.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VERSION_FIELD_NUMBER: builtins.int
    PCK_CRL_ISSUER_CHAIN_FIELD_NUMBER: builtins.int
    ROOT_CA_CRL_FIELD_NUMBER: builtins.int
    PCK_CRL_FIELD_NUMBER: builtins.int
    TCB_INFO_ISSUER_CHAIN_FIELD_NUMBER: builtins.int
    TCB_INFO_FIELD_NUMBER: builtins.int
    QE_IDENTITY_ISSUER_CHAIN_FIELD_NUMBER: builtins.int
    QE_IDENTITY_FIELD_NUMBER: builtins.int
    TEE_TYPE_FIELD_NUMBER: builtins.int
    version: builtins.int
    """uint32_t, version = 1. PCK Cert chain is in the Quote."""
    pck_crl_issuer_chain: builtins.str
    root_ca_crl: builtins.str
    pck_crl: builtins.str
    tcb_info_issuer_chain: builtins.str
    tcb_info: builtins.str
    qe_identity_issuer_chain: builtins.str
    qe_identity: builtins.str
    tee_type: builtins.int
    """<  0x00000000: SGX or 0x00000081: TDX"""
    def __init__(
        self,
        *,
        version: builtins.int = ...,
        pck_crl_issuer_chain: builtins.str = ...,
        root_ca_crl: builtins.str = ...,
        pck_crl: builtins.str = ...,
        tcb_info_issuer_chain: builtins.str = ...,
        tcb_info: builtins.str = ...,
        qe_identity_issuer_chain: builtins.str = ...,
        qe_identity: builtins.str = ...,
        tee_type: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["pck_crl", b"pck_crl", "pck_crl_issuer_chain", b"pck_crl_issuer_chain", "qe_identity", b"qe_identity", "qe_identity_issuer_chain", b"qe_identity_issuer_chain", "root_ca_crl", b"root_ca_crl", "tcb_info", b"tcb_info", "tcb_info_issuer_chain", b"tcb_info_issuer_chain", "tee_type", b"tee_type", "version", b"version"]) -> None: ...

global___SgxQlQveCollateral = SgxQlQveCollateral

@typing.final
class HyperEnclaveReport(google.protobuf.message.Message):
    """/ UnifiedAttestationReport::json_report for HyperEnclave
    / Only a quote is required for HyperEnclave attestation
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_QUOTE_FIELD_NUMBER: builtins.int
    b64_quote: builtins.str
    def __init__(
        self,
        *,
        b64_quote: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_quote", b"b64_quote"]) -> None: ...

global___HyperEnclaveReport = HyperEnclaveReport

@typing.final
class KunpengReport(google.protobuf.message.Message):
    """/ UnifiedAttestationReport::json_report for Huawei Kunpeng"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_QUOTE_FIELD_NUMBER: builtins.int
    INT64_VERSION_FIELD_NUMBER: builtins.int
    b64_quote: builtins.str
    int64_version: builtins.int
    def __init__(
        self,
        *,
        b64_quote: builtins.str = ...,
        int64_version: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_quote", b"b64_quote", "int64_version", b"int64_version"]) -> None: ...

global___KunpengReport = KunpengReport

@typing.final
class HygonCsvReport(google.protobuf.message.Message):
    """/ UnifiedAttestationReport::json_report for Hygon CSV"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_QUOTE_FIELD_NUMBER: builtins.int
    JSON_CERT_CHAIN_FIELD_NUMBER: builtins.int
    STR_CHIP_ID_FIELD_NUMBER: builtins.int
    b64_quote: builtins.str
    """For BackgroundCheck type report: Only quote in the report"""
    json_cert_chain: builtins.str
    """For Passport type report: Quote and collateral in report
    The serialized JSON string of the HygonCsvCertChain
    """
    str_chip_id: builtins.str
    """Save chip id to avoid to parse it from b64_quote when verify report"""
    def __init__(
        self,
        *,
        b64_quote: builtins.str = ...,
        json_cert_chain: builtins.str = ...,
        str_chip_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_quote", b"b64_quote", "json_cert_chain", b"json_cert_chain", "str_chip_id", b"str_chip_id"]) -> None: ...

global___HygonCsvReport = HygonCsvReport

@typing.final
class IntelTdxReport(google.protobuf.message.Message):
    """/ UnifiedAttestationReport::json_report for Intel TDX"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_QUOTE_FIELD_NUMBER: builtins.int
    JSON_COLLATERAL_FIELD_NUMBER: builtins.int
    b64_quote: builtins.str
    json_collateral: builtins.str
    """For Passport type report: Quote and collateral in report
    The serialized JSON string of the SgxQlQveCollateral
    """
    def __init__(
        self,
        *,
        b64_quote: builtins.str = ...,
        json_collateral: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_quote", b"b64_quote", "json_collateral", b"json_collateral"]) -> None: ...

global___IntelTdxReport = IntelTdxReport

@typing.final
class HygonCsvCertChain(google.protobuf.message.Message):
    """/ Hygon CSV report verification collateral about certificates
    / Get this after generating the quote and adding it to the report
    / In this way, the challenger will don't need to connect PCCS anymore.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    B64_HSK_CERT_FIELD_NUMBER: builtins.int
    B64_CEK_CERT_FIELD_NUMBER: builtins.int
    b64_hsk_cert: builtins.str
    """The Base64 string of hygon_root_cert_t"""
    b64_cek_cert: builtins.str
    """The Base64 string of csv_cert_t"""
    def __init__(
        self,
        *,
        b64_hsk_cert: builtins.str = ...,
        b64_cek_cert: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["b64_cek_cert", b"b64_cek_cert", "b64_hsk_cert", b"b64_hsk_cert"]) -> None: ...

global___HygonCsvCertChain = HygonCsvCertChain
