"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import secretflowapis.v1.common_pb2
import secretflowapis.v1.sdc.core_pb2
import secretflowapis.v1.sdc.digital_envelope_pb2
import secretflowapis.v1.sdc.teeapps.tee_task_params_pb2
import secretflowapis.v1.status_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class GetExportDataKeyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_FIELD_NUMBER: builtins.int
    DATA_UUID_FIELD_NUMBER: builtins.int
    PARTITION_ID_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    data_uuid: builtins.str
    """数据信息"""
    partition_id: builtins.str
    """分区 id"""
    @property
    def header(self) -> secretflowapis.v1.common_pb2.RequestHeader: ...
    @property
    def public_key(self) -> secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey:
        """数据请求者的公钥"""

    def __init__(
        self,
        *,
        header: secretflowapis.v1.common_pb2.RequestHeader | None = ...,
        data_uuid: builtins.str = ...,
        partition_id: builtins.str = ...,
        public_key: secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["header", b"header", "public_key", b"public_key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data_uuid", b"data_uuid", "header", b"header", "partition_id", b"partition_id", "public_key", b"public_key"]) -> None: ...

global___GetExportDataKeyRequest = GetExportDataKeyRequest

@typing.final
class GetExportDataKeyResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATUS_FIELD_NUMBER: builtins.int
    DATA_KEYS_FIELD_NUMBER: builtins.int
    @property
    def status(self) -> secretflowapis.v1.status_pb2.Status: ...
    @property
    def data_keys(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[secretflowapis.v1.sdc.core_pb2.SegmentDataMeta]:
        """数据解密密钥"""

    def __init__(
        self,
        *,
        status: secretflowapis.v1.status_pb2.Status | None = ...,
        data_keys: collections.abc.Iterable[secretflowapis.v1.sdc.core_pb2.SegmentDataMeta] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["status", b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["data_keys", b"data_keys", "status", b"status"]) -> None: ...

global___GetExportDataKeyResponse = GetExportDataKeyResponse

@typing.final
class GetComputeMetaRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HEADER_FIELD_NUMBER: builtins.int
    ATTESTATION_REPORT_FIELD_NUMBER: builtins.int
    TEE_TASK_PARAMS_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    @property
    def header(self) -> secretflowapis.v1.common_pb2.RequestHeader: ...
    @property
    def attestation_report(self) -> secretflowapis.v1.sdc.core_pb2.UnifiedAttestationReport:
        """quote.report_data = sha256(tee_task_params|public_key)"""

    @property
    def tee_task_params(self) -> secretflowapis.v1.sdc.teeapps.tee_task_params_pb2.TeeTaskParams: ...
    @property
    def public_key(self) -> secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey:
        """The temporary public key generated by the worker"""

    def __init__(
        self,
        *,
        header: secretflowapis.v1.common_pb2.RequestHeader | None = ...,
        attestation_report: secretflowapis.v1.sdc.core_pb2.UnifiedAttestationReport | None = ...,
        tee_task_params: secretflowapis.v1.sdc.teeapps.tee_task_params_pb2.TeeTaskParams | None = ...,
        public_key: secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["attestation_report", b"attestation_report", "header", b"header", "public_key", b"public_key", "tee_task_params", b"tee_task_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["attestation_report", b"attestation_report", "header", b"header", "public_key", b"public_key", "tee_task_params", b"tee_task_params"]) -> None: ...

global___GetComputeMetaRequest = GetComputeMetaRequest

@typing.final
class ComputeMeta(google.protobuf.message.Message):
    """This plaintext message will be encrypted by GetComputeMetaResponse"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InputMeta(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        SCHEMA_FIELD_NUMBER: builtins.int
        DATA_URI_WITH_DKS_FIELD_NUMBER: builtins.int
        @property
        def schema(self) -> secretflowapis.v1.sdc.core_pb2.Schema: ...
        @property
        def data_uri_with_dks(self) -> secretflowapis.v1.sdc.core_pb2.DataUri:
            """The data storage path and the corresponding data decryption key"""

        def __init__(
            self,
            *,
            schema: secretflowapis.v1.sdc.core_pb2.Schema | None = ...,
            data_uri_with_dks: secretflowapis.v1.sdc.core_pb2.DataUri | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["data_uri_with_dks", b"data_uri_with_dks", "schema", b"schema"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["data_uri_with_dks", b"data_uri_with_dks", "schema", b"schema"]) -> None: ...

    CMD_FIELD_NUMBER: builtins.int
    ACCESS_TOKEN_FIELD_NUMBER: builtins.int
    INPUT_METAS_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    ALL_ANCESTORS_FIELD_NUMBER: builtins.int
    cmd: builtins.str
    @property
    def access_token(self) -> secretflowapis.v1.sdc.core_pb2.DataAccessToken: ...
    @property
    def input_metas(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ComputeMeta.InputMeta]:
        """The order of `input_metas` is same to `TeeTaskParams.inputs`."""

    @property
    def public_key(self) -> secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey:
        """The public key of AuthManager

        The worker completes the computation, it will randomly generate a data
        encryption key to encrypt the result, and this data encryption key needs to
        be encrypted with the public key of `AuthManager` before being persistently
        stored.
        """

    @property
    def all_ancestors(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[secretflowapis.v1.sdc.core_pb2.Ancestor]:
        """All ancestors of the output data

        When AuthManager verifies the permissions of the task, it collects all
        inputs' ancestors, and merges them into a deduplicated set of ancestors,
        which represents all ancestor information of the outputs.
        After completing the computation, the worker fills in the meta information
        of each output data with `all_ancestors`, making it easier
        for AuthManager to quickly search for them.
        """

    def __init__(
        self,
        *,
        cmd: builtins.str = ...,
        access_token: secretflowapis.v1.sdc.core_pb2.DataAccessToken | None = ...,
        input_metas: collections.abc.Iterable[global___ComputeMeta.InputMeta] | None = ...,
        public_key: secretflowapis.v1.sdc.digital_envelope_pb2.PublicKey | None = ...,
        all_ancestors: collections.abc.Iterable[secretflowapis.v1.sdc.core_pb2.Ancestor] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["access_token", b"access_token", "public_key", b"public_key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["access_token", b"access_token", "all_ancestors", b"all_ancestors", "cmd", b"cmd", "input_metas", b"input_metas", "public_key", b"public_key"]) -> None: ...

global___ComputeMeta = ComputeMeta

@typing.final
class GetComputeMetaResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STATUS_FIELD_NUMBER: builtins.int
    ENCRYPTED_RESPONSE_FIELD_NUMBER: builtins.int
    @property
    def status(self) -> secretflowapis.v1.status_pb2.Status: ...
    @property
    def encrypted_response(self) -> secretflowapis.v1.sdc.digital_envelope_pb2.AsymmetricSecret:
        """Encrypted AppMeta using digital envelope."""

    def __init__(
        self,
        *,
        status: secretflowapis.v1.status_pb2.Status | None = ...,
        encrypted_response: secretflowapis.v1.sdc.digital_envelope_pb2.AsymmetricSecret | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["encrypted_response", b"encrypted_response", "status", b"status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["encrypted_response", b"encrypted_response", "status", b"status"]) -> None: ...

global___GetComputeMetaResponse = GetComputeMetaResponse
