# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from secretflowapis.v1.sdc.authmanager import auth_manager_pb2 as secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2
from secretflowapis.v1.sdc.dataagent import data_agent_pb2 as secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2


class AuthManagerStub(object):
    """/ 运行在 TEE 中的授权管理服务，用于验证任务执行权限，以及数据导出权限

    *
    任务执行权限，授权管理服务依据数据授权信息以及任务是否需要先验审批，来决定任
    务是否可以执行：
    - 数据授权信息具体见 `DataAuth`中的描述，数据提供者会指定数据使用者以及可
    被使用的任务种类等信息，如果任务不满足数据授权要求，就会被拒绝执行；
    - 对于任务中需要包含动态脚本的任务（如 SQL 查询），虽然数据结果在经过数据
    导出授权前都是密文状态，但是仍然可能会有侧信道攻击的风险，因此在执行需要数据
    提供者审批（对任务内容进行签名，见 TaskInfo），以防止恶意动态脚本执行。
    当然，这是一个可选配置，因为每次发起任务都需要审批会降低易用性，实际部署需
    要在易用性和安全性做折中考虑。
    * 数据导出权限，满足以下条件的请求者可以获得数据加密密钥
    - 原始数据：请求者是该数据的 owner；
    - 中间数据：
    统计类数据：请求者是任务发起者或者原始数据提供者
    模型/分析结果：请求者是任务发起者，并且所有原始数据提供者已授权
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetExportDataKey = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/GetExportDataKey',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyResponse.FromString,
                )
        self.GetComputeMeta = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/GetComputeMeta',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaResponse.FromString,
                )
        self.GetRaCertPems = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/GetRaCertPems',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsResponse.FromString,
                )
        self.CreateDataWithAuth = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/CreateDataWithAuth',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthResponse.FromString,
                )
        self.RegisterInsPubKey = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/RegisterInsPubKey',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyResponse.FromString,
                )
        self.CreateDataMacKey = channel.unary_unary(
                '/secretflowapis.v1.sdc.authmanager.AuthManager/CreateDataMacKey',
                request_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyRequest.SerializeToString,
                response_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyResponse.FromString,
                )


class AuthManagerServicer(object):
    """/ 运行在 TEE 中的授权管理服务，用于验证任务执行权限，以及数据导出权限

    *
    任务执行权限，授权管理服务依据数据授权信息以及任务是否需要先验审批，来决定任
    务是否可以执行：
    - 数据授权信息具体见 `DataAuth`中的描述，数据提供者会指定数据使用者以及可
    被使用的任务种类等信息，如果任务不满足数据授权要求，就会被拒绝执行；
    - 对于任务中需要包含动态脚本的任务（如 SQL 查询），虽然数据结果在经过数据
    导出授权前都是密文状态，但是仍然可能会有侧信道攻击的风险，因此在执行需要数据
    提供者审批（对任务内容进行签名，见 TaskInfo），以防止恶意动态脚本执行。
    当然，这是一个可选配置，因为每次发起任务都需要审批会降低易用性，实际部署需
    要在易用性和安全性做折中考虑。
    * 数据导出权限，满足以下条件的请求者可以获得数据加密密钥
    - 原始数据：请求者是该数据的 owner；
    - 中间数据：
    统计类数据：请求者是任务发起者或者原始数据提供者
    模型/分析结果：请求者是任务发起者，并且所有原始数据提供者已授权
    """

    def GetExportDataKey(self, request, context):
        """请求获取数据加密密钥，AuthManager
        验证请求者拥有数据导出权限后， 会使用请求者公钥加密数据加密密钥
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetComputeMeta(self, request, context):
        """The following services are implemented for TEE apps. TEE apps communicate
        with server via digital envelops. TEE apps send self-generated public key
        with RA report to server. Server then uses this public key to encrypt
        requested data back to TEE apps.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRaCertPems(self, request, context):
        """功能：请求auth、返回RA报告、证书
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDataWithAuth(self, request, context):
        """功能：请求auth
        1. 生成授权data meta
        2. 储存数据的加密data_key（由于数据直接发送到ray
        worker，因此数据不存储）
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterInsPubKey(self, request, context):
        """功能：注册机构public key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDataMacKey(self, request, context):
        """功能：注册mac key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetExportDataKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExportDataKey,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyResponse.SerializeToString,
            ),
            'GetComputeMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComputeMeta,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaResponse.SerializeToString,
            ),
            'GetRaCertPems': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRaCertPems,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsResponse.SerializeToString,
            ),
            'CreateDataWithAuth': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataWithAuth,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthResponse.SerializeToString,
            ),
            'RegisterInsPubKey': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterInsPubKey,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyResponse.SerializeToString,
            ),
            'CreateDataMacKey': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDataMacKey,
                    request_deserializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyRequest.FromString,
                    response_serializer=secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'secretflowapis.v1.sdc.authmanager.AuthManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AuthManager(object):
    """/ 运行在 TEE 中的授权管理服务，用于验证任务执行权限，以及数据导出权限

    *
    任务执行权限，授权管理服务依据数据授权信息以及任务是否需要先验审批，来决定任
    务是否可以执行：
    - 数据授权信息具体见 `DataAuth`中的描述，数据提供者会指定数据使用者以及可
    被使用的任务种类等信息，如果任务不满足数据授权要求，就会被拒绝执行；
    - 对于任务中需要包含动态脚本的任务（如 SQL 查询），虽然数据结果在经过数据
    导出授权前都是密文状态，但是仍然可能会有侧信道攻击的风险，因此在执行需要数据
    提供者审批（对任务内容进行签名，见 TaskInfo），以防止恶意动态脚本执行。
    当然，这是一个可选配置，因为每次发起任务都需要审批会降低易用性，实际部署需
    要在易用性和安全性做折中考虑。
    * 数据导出权限，满足以下条件的请求者可以获得数据加密密钥
    - 原始数据：请求者是该数据的 owner；
    - 中间数据：
    统计类数据：请求者是任务发起者或者原始数据提供者
    模型/分析结果：请求者是任务发起者，并且所有原始数据提供者已授权
    """

    @staticmethod
    def GetExportDataKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/GetExportDataKey',
            secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetExportDataKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetComputeMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/GetComputeMeta',
            secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_authmanager_dot_auth__manager__pb2.GetComputeMetaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRaCertPems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/GetRaCertPems',
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.GetRaCertPemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDataWithAuth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/CreateDataWithAuth',
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataWithAuthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterInsPubKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/RegisterInsPubKey',
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.RegisterInsPubKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDataMacKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflowapis.v1.sdc.authmanager.AuthManager/CreateDataMacKey',
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyRequest.SerializeToString,
            secretflowapis_dot_v1_dot_sdc_dot_dataagent_dot_data__agent__pb2.CreateDataMacKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
