"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import collections.abc
import google.protobuf.any_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class TeeTaskParams(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Input(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DATA_UUID_FIELD_NUMBER: builtins.int
        PARTITION_ID_FIELD_NUMBER: builtins.int
        FEATURES_FIELD_NUMBER: builtins.int
        LABELS_FIELD_NUMBER: builtins.int
        ID_FIELDS_FIELD_NUMBER: builtins.int
        TABLE_NAME_FIELD_NUMBER: builtins.int
        PARTITION_EXPR_FIELD_NUMBER: builtins.int
        data_uuid: builtins.str
        """数据 ID"""
        partition_id: builtins.str
        """分区 ID"""
        table_name: builtins.str
        """表名(optional),针对 SQL 算子"""
        partition_expr: builtins.str
        """分区表达式"""
        @property
        def features(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """特征名"""

        @property
        def labels(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """标签名"""

        @property
        def id_fields(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
            """求交字段(optional)，针对 PSI 算子"""

        def __init__(
            self,
            *,
            data_uuid: builtins.str = ...,
            partition_id: builtins.str = ...,
            features: collections.abc.Iterable[builtins.str] | None = ...,
            labels: collections.abc.Iterable[builtins.str] | None = ...,
            id_fields: collections.abc.Iterable[builtins.str] | None = ...,
            table_name: builtins.str = ...,
            partition_expr: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["data_uuid", b"data_uuid", "features", b"features", "id_fields", b"id_fields", "labels", b"labels", "partition_expr", b"partition_expr", "partition_id", b"partition_id", "table_name", b"table_name"]) -> None: ...

    @typing.final
    class Output(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DATA_UUID_FIELD_NUMBER: builtins.int
        PARTITION_ID_FIELD_NUMBER: builtins.int
        DATA_FORMAT_FIELD_NUMBER: builtins.int
        data_uuid: builtins.str
        """数据 ID"""
        partition_id: builtins.str
        """分区 ID"""
        data_format: builtins.str
        """CSV，例如 SQL 的输出
        OBJ 非结构化数据，例如 XGB 训练的输出
        """
        def __init__(
            self,
            *,
            data_uuid: builtins.str = ...,
            partition_id: builtins.str = ...,
            data_format: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["data_format", b"data_format", "data_uuid", b"data_uuid", "partition_id", b"partition_id"]) -> None: ...

    @typing.final
    class DataHolderSigsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.bytes
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    TASK_ID_FIELD_NUMBER: builtins.int
    REQUESTER_ID_FIELD_NUMBER: builtins.int
    APP_TYPE_FIELD_NUMBER: builtins.int
    CODE_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    SIGNATURE_FIELD_NUMBER: builtins.int
    DATA_HOLDER_SIGS_FIELD_NUMBER: builtins.int
    EXTRA_PARAMS_FIELD_NUMBER: builtins.int
    task_id: builtins.str
    requester_id: builtins.str
    """任务发起者公钥哈希"""
    app_type: builtins.str
    """算子类型，如 XGB, LR，对应 AppInfo::app_type"""
    code: builtins.str
    """任务的可编程脚本代码，string，sql 或 python 脚本等
    TECC中code为json格式{
    session_x_enc_task_script:"****",
    iv:"****",
    kx_enc_session_x:"****",
    script_mac:"****"
    }
    开源tee device: code = base64(sha256(serilize(func)))
    内部服务: command
    """
    signature: builtins.bytes
    """任务发起者私钥签名以上字段:
    SIGNATURE =
    SIG(task_id||requester_id||app_type||code||params||inputs||outputs)
    """
    extra_params: builtins.str
    """reserved field
    TECC pandas中如下形式
    {"pandas_result":"result1,result2"}
    """
    @property
    def params(self) -> google.protobuf.any_pb2.Any:
        """不同任务参数见 params 目录下，不同任务的定义，如：
        xgb 训练任务，对应 XgbHyperParams
        """

    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TeeTaskParams.Input]:
        """输入信息"""

    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TeeTaskParams.Output]:
        """输出信息"""

    @property
    def data_holder_sigs(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.bytes]:
        """原始数据持有者签名
        原始数据持有者Id -> 签名
        """

    def __init__(
        self,
        *,
        task_id: builtins.str = ...,
        requester_id: builtins.str = ...,
        app_type: builtins.str = ...,
        code: builtins.str = ...,
        params: google.protobuf.any_pb2.Any | None = ...,
        inputs: collections.abc.Iterable[global___TeeTaskParams.Input] | None = ...,
        outputs: collections.abc.Iterable[global___TeeTaskParams.Output] | None = ...,
        signature: builtins.bytes = ...,
        data_holder_sigs: collections.abc.Mapping[builtins.str, builtins.bytes] | None = ...,
        extra_params: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["params", b"params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["app_type", b"app_type", "code", b"code", "data_holder_sigs", b"data_holder_sigs", "extra_params", b"extra_params", "inputs", b"inputs", "outputs", b"outputs", "params", b"params", "requester_id", b"requester_id", "signature", b"signature", "task_id", b"task_id"]) -> None: ...

global___TeeTaskParams = TeeTaskParams

@typing.final
class SubTaskParams(google.protobuf.message.Message):
    """仅TECC使用
    分布式任务的每个子任务参数
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class SubInput(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DATA_UUID_FIELD_NUMBER: builtins.int
        PARTITION_ID_FIELD_NUMBER: builtins.int
        SEGMENT_IDS_FIELD_NUMBER: builtins.int
        data_uuid: builtins.str
        """数据 ID"""
        partition_id: builtins.str
        """分区 ID"""
        @property
        def segment_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """分段 ID"""

        def __init__(
            self,
            *,
            data_uuid: builtins.str = ...,
            partition_id: builtins.str = ...,
            segment_ids: collections.abc.Iterable[builtins.int] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["data_uuid", b"data_uuid", "partition_id", b"partition_id", "segment_ids", b"segment_ids"]) -> None: ...

    @typing.final
    class SubOutput(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DATA_UUID_FIELD_NUMBER: builtins.int
        PARTITION_ID_FIELD_NUMBER: builtins.int
        OUTPUT_NAME_FIELD_NUMBER: builtins.int
        data_uuid: builtins.str
        """数据 ID"""
        partition_id: builtins.str
        """分区 ID"""
        output_name: builtins.str
        """输出文件名"""
        def __init__(
            self,
            *,
            data_uuid: builtins.str = ...,
            partition_id: builtins.str = ...,
            output_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["data_uuid", b"data_uuid", "output_name", b"output_name", "partition_id", b"partition_id"]) -> None: ...

    @typing.final
    class AddressInfo(google.protobuf.message.Message):
        """仅TECC 使用
        集群信息
        """

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        GROUP_ID_FIELD_NUMBER: builtins.int
        PARTY_ID_FIELD_NUMBER: builtins.int
        IP_FIELD_NUMBER: builtins.int
        PORT_FIELD_NUMBER: builtins.int
        group_id: builtins.int
        party_id: builtins.int
        ip: builtins.str
        port: builtins.int
        def __init__(
            self,
            *,
            group_id: builtins.int = ...,
            party_id: builtins.int = ...,
            ip: builtins.str = ...,
            port: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["group_id", b"group_id", "ip", b"ip", "party_id", b"party_id", "port", b"port"]) -> None: ...

    TASK_PARAMS_FIELD_NUMBER: builtins.int
    SUB_INPUTS_FIELD_NUMBER: builtins.int
    SUB_OUTPUTS_FIELD_NUMBER: builtins.int
    NR_GROUP_FIELD_NUMBER: builtins.int
    GROUP_ID_FIELD_NUMBER: builtins.int
    PARTY_ID_FIELD_NUMBER: builtins.int
    MASTER_GROUP_FIELD_NUMBER: builtins.int
    ADDRESS_INFOS_FIELD_NUMBER: builtins.int
    nr_group: builtins.int
    """本次任务分布式组数量"""
    group_id: builtins.int
    """该节点在本次分布式任务中的组号"""
    party_id: builtins.int
    """该节点的角色A-0, B-1, C-2"""
    master_group: builtins.int
    """master组的序号，一般为0"""
    @property
    def task_params(self) -> global___TeeTaskParams: ...
    @property
    def sub_inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubTaskParams.SubInput]: ...
    @property
    def sub_outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubTaskParams.SubOutput]: ...
    @property
    def address_infos(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SubTaskParams.AddressInfo]:
        """TECC used only"""

    def __init__(
        self,
        *,
        task_params: global___TeeTaskParams | None = ...,
        sub_inputs: collections.abc.Iterable[global___SubTaskParams.SubInput] | None = ...,
        sub_outputs: collections.abc.Iterable[global___SubTaskParams.SubOutput] | None = ...,
        nr_group: builtins.int = ...,
        group_id: builtins.int = ...,
        party_id: builtins.int = ...,
        master_group: builtins.int = ...,
        address_infos: collections.abc.Iterable[global___SubTaskParams.AddressInfo] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["task_params", b"task_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["address_infos", b"address_infos", "group_id", b"group_id", "master_group", b"master_group", "nr_group", b"nr_group", "party_id", b"party_id", "sub_inputs", b"sub_inputs", "sub_outputs", b"sub_outputs", "task_params", b"task_params"]) -> None: ...

global___SubTaskParams = SubTaskParams

@typing.final
class TeeTaskResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TASK_ID_FIELD_NUMBER: builtins.int
    RESULT_FIELD_NUMBER: builtins.int
    MESSAGE_FIELD_NUMBER: builtins.int
    task_id: builtins.str
    result: builtins.int
    message: builtins.str
    def __init__(
        self,
        *,
        task_id: builtins.str = ...,
        result: builtins.int = ...,
        message: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["message", b"message", "result", b"result", "task_id", b"task_id"]) -> None: ...

global___TeeTaskResponse = TeeTaskResponse
