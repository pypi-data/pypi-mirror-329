"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class PublicKey(google.protobuf.message.Message):
    """/ 公钥定义
     目前系统中，国密和国际密码标准不会出现混用的情况：
      * TECC 当前系统中默认使用 SM2/SM3/SM4 国密算法
      * 隐语 当前系统默认使用 RSA/SHA256/AES128 算法
     为了简化系统实现，对私钥签名以及公钥加密算法做如下规定：
      * 如果 scheme = "SM2", 则
        签名算法为： SM3withSM2;
        数字信封中对称加密算法为（目前 SM4 没有 GCM 实现）： SM4-CBC, HMAC-SM3
      * 如果 scheme = "RSA", 则
        签名算法为： SHA256withRSA;
        数字信封中对称加密算法为： AES-128-GCM
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEME_FIELD_NUMBER: builtins.int
    PUBLIC_KEY_FIELD_NUMBER: builtins.int
    scheme: builtins.str
    """`RSA`, `SM2`"""
    public_key: builtins.str
    """公钥格式见 RFC5280 中 `SubjectPublicKeyInfo` 结构
    pem format
    """
    def __init__(
        self,
        *,
        scheme: builtins.str = ...,
        public_key: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["public_key", b"public_key", "scheme", b"scheme"]) -> None: ...

global___PublicKey = PublicKey

@typing.final
class AsymmetricSecret(google.protobuf.message.Message):
    """/ Digital envelope encryption/decryption data"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ASYMMETRIC_ENCRYPTED_KEY_FIELD_NUMBER: builtins.int
    SYMMETRIC_SECRET_FIELD_NUMBER: builtins.int
    asymmetric_encrypted_key: builtins.bytes
    """Asymmetric encrypted symmetric key"""
    @property
    def symmetric_secret(self) -> global___SymmetricSecret:
        """Symmetric secret"""

    def __init__(
        self,
        *,
        asymmetric_encrypted_key: builtins.bytes = ...,
        symmetric_secret: global___SymmetricSecret | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["symmetric_secret", b"symmetric_secret"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["asymmetric_encrypted_key", b"asymmetric_encrypted_key", "symmetric_secret", b"symmetric_secret"]) -> None: ...

global___AsymmetricSecret = AsymmetricSecret

@typing.final
class SymmetricSecret(google.protobuf.message.Message):
    """/ Symmetric encryption/decryption data"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ENCRYPTED_DATA_FIELD_NUMBER: builtins.int
    ENCRYPTED_DATA_CMAC_FIELD_NUMBER: builtins.int
    INITIAL_VECTOR_FIELD_NUMBER: builtins.int
    ADDITIONAL_AUTHENTICATION_DATA_FIELD_NUMBER: builtins.int
    encrypted_data: builtins.bytes
    """Symmetric encryption data"""
    encrypted_data_cmac: builtins.bytes
    """Symmetric encryption data cmac"""
    initial_vector: builtins.bytes
    """Initial vector"""
    additional_authentication_data: builtins.bytes
    """Additional authentication data(AAD)"""
    def __init__(
        self,
        *,
        encrypted_data: builtins.bytes = ...,
        encrypted_data_cmac: builtins.bytes = ...,
        initial_vector: builtins.bytes = ...,
        additional_authentication_data: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["additional_authentication_data", b"additional_authentication_data", "encrypted_data", b"encrypted_data", "encrypted_data_cmac", b"encrypted_data_cmac", "initial_vector", b"initial_vector"]) -> None: ...

global___SymmetricSecret = SymmetricSecret
