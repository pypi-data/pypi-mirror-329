import json
from signal import SIGCONT, SIGSTOP
from typing import IO, Iterable, Iterator

from .block import Block
from .element import BaseElement


class OutputGenerator:
    """Assemble blocks generated by elements into a status line."""

    def __init__(
        self,
        elements: Iterable[BaseElement],
        click_events=False,
    ) -> None:
        self.elements = list(elements)
        self.click_events = bool(click_events)

    def blocks(self) -> Iterator[Block]:
        for element in self.elements:
            yield from element.blocks()

    def process(self, file: IO[str]) -> Iterator:
        def send(line: str) -> None:
            print(line, flush=True, file=file)

        send(
            json.dumps(
                dict(
                    version=1,
                    stop_signal=SIGSTOP,
                    cont_signal=SIGCONT,
                    click_events=self.click_events,
                )
            )
        )
        send("[[]")
        while True:
            send(",{}".format(json.dumps([block.dict() for block in self.blocks()])))
            yield
