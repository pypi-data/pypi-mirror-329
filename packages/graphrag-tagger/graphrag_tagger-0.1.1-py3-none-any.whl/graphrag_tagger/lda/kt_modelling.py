from typing import List

from ktrain.text.eda import TopicModel


class KtrainTopicExtractor:
    """
    Topic extractor using ktrain's topic modeling capabilities.

    This class leverages ktrain's `get_topic_model` to build and utilize
    Latent Dirichlet Allocation (LDA) models for topic extraction from text data.
    """

    def __init__(
        self,
        n_components: int = None,
        n_features: int = 512,
        min_df: int = 2,
        max_df: float = 0.95,
        threshold: float = 0.25,
    ):
        """
        Initialize the TopicExtractor with parameters for ktrain's topic model.

        :param n_components: Number of topics to extract, defaults to None (automatic determination).
        :type n_components: int, optional
        :param n_features: Maximum number of features (words) to consider in the vocabulary, defaults to 512.
        :type n_features: int
        :param min_df: Minimum document frequency for a word to be included in the vocabulary, defaults to 2.
        :type min_df: int
        :param max_df: Maximum document frequency for a word to be included in the vocabulary, defaults to 0.95.
        :type max_df: float
        :param threshold: Threshold value for filtering words in the topic model building process, defaults to 0.25.
        :type threshold: float
        """
        self.n_features = n_features
        self.min_df = min_df
        self.max_df = max_df
        self.threshold = threshold
        self.n_components = n_components
        self.topic_model: TopicModel = None  # To store the ktrain topic model instance

    def fit(self, texts: List[str]):
        """
        Build the topic model using the provided list of texts.

        :param texts: A list of strings, where each string is a document.
        :type texts: List[str]
        :raises ValueError: If the input `texts` list is empty.
        :return: Returns the instance itself to allow for method chaining.
        :rtype: KtrainTopicExtractor
        """
        if not texts:
            raise ValueError("Input 'texts' list cannot be empty.")

        self.topic_model = TopicModel(
            texts,
            n_features=self.n_features,
            min_df=self.min_df,
            max_df=self.max_df,
            n_topics=self.n_components,
        )
        self.topic_model.build(texts, threshold=self.threshold)
        return self

    def get_topics(self) -> List[str]:
        """
        Retrieve the topics generated by the LDA model.

        :raises ValueError: If the topic model has not been built yet (i.e., `fit()` has not been called).
        :return: A list of topic strings.
        :rtype: List[str]
        """
        if self.topic_model is None:
            raise ValueError("Topic model not built. Call fit() first.")
        topics = self.topic_model.get_topics()
        return topics


# ----- Example usage -----
if __name__ == "__main__":
    from sklearn.datasets import fetch_20newsgroups

    # Sample texts from 20 newsgroups dataset
    remove_categories = ("headers", "footers", "quotes")
    newsgroups_test = fetch_20newsgroups(subset="test", remove=remove_categories)
    texts: List[str] = newsgroups_test.data

    # Initialize and fit the topic extractor.
    extractor = KtrainTopicExtractor()
    extractor.fit(texts)

    # Retrieve the extracted topics.
    extracted_topics = extractor.get_topics()
    print("Topics from LDA:")
    for topic in extracted_topics:
        print("-", topic)
