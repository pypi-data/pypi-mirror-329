#!/usr/bin/env python3
## interface generated by gen_dbc_interface.py

from abc import ABC, abstractmethod

class DbcInterface(ABC):
    @abstractmethod
    async def request(self, msg_name: str, timeout: float = 0.5) -> dict:
        pass

    async def get_version(self) -> dict:
        return await self.request("Get_Version")

    async def get_error(self) -> dict:
        return await self.request("Get_Error")

    async def get_encoder_estimates(self) -> dict:
        return await self.request("Get_Encoder_Estimates")

    async def get_iq(self) -> dict:
        return await self.request("Get_Iq")

    async def get_temperature(self) -> dict:
        return await self.request("Get_Temperature")

    async def get_bus_voltage_current(self) -> dict:
        return await self.request("Get_Bus_Voltage_Current")

    async def get_torques(self) -> dict:
        return await self.request("Get_Torques")

    async def get_powers(self) -> dict:
        return await self.request("Get_Powers")

    def set_axis_state(self, axis_requested_state: str):
        self._send_message("Set_Axis_State", {"Axis_Requested_State": axis_requested_state})

    def set_controller_mode(self, control_mode: str, input_mode: str):
        self._send_message("Set_Controller_Mode", {"Control_Mode": control_mode, "Input_Mode": input_mode})

    def set_input_pos(self, input_pos: float, vel_ff: int, torque_ff: int):
        self._send_message("Set_Input_Pos", {"Input_Pos": input_pos, "Vel_FF": vel_ff, "Torque_FF": torque_ff})

    def set_input_vel(self, input_vel: float, input_torque_ff: float):
        self._send_message("Set_Input_Vel", {"Input_Vel": input_vel, "Input_Torque_FF": input_torque_ff})

    def set_input_torque(self, input_torque: float):
        self._send_message("Set_Input_Torque", {"Input_Torque": input_torque})

    def set_limits(self, velocity_limit: float, current_limit: float):
        self._send_message("Set_Limits", {"Velocity_Limit": velocity_limit, "Current_Limit": current_limit})

    def set_traj_vel_limit(self, traj_vel_limit: float):
        self._send_message("Set_Traj_Vel_Limit", {"Traj_Vel_Limit": traj_vel_limit})

    def set_traj_accel_limits(self, traj_accel_limit: float, traj_decel_limit: float):
        self._send_message("Set_Traj_Accel_Limits", {"Traj_Accel_Limit": traj_accel_limit, "Traj_Decel_Limit": traj_decel_limit})

    def set_traj_inertia(self, traj_inertia: float):
        self._send_message("Set_Traj_Inertia", {"Traj_Inertia": traj_inertia})

    def set_absolute_position(self, position: float):
        self._send_message("Set_Absolute_Position", {"Position": position})

    def set_pos_gain(self, pos_gain: float):
        self._send_message("Set_Pos_Gain", {"Pos_Gain": pos_gain})

    def set_vel_gains(self, vel_gain: float, vel_integrator_gain: float):
        self._send_message("Set_Vel_Gains", {"Vel_Gain": vel_gain, "Vel_Integrator_Gain": vel_integrator_gain})
