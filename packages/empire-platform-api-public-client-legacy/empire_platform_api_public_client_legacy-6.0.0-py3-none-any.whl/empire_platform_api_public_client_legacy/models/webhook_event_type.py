# coding: utf-8

"""
    Platform API

    _OpenAPI specification for the **Platform API** of **Empire**, the allocation and nomination platform of BritNed_  ---  Additional documentation available in the API's [GitHub repository](https://github.com/britned/empire-platform-api) 

    The version of the OpenAPI document: 6.0.0
    Contact: britned.info@britned.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import json
import pprint
import re  # noqa: F401
from aenum import Enum, no_arg





class WebhookEventType(str, Enum):
    """
    WebhookEventType
    """

    """
    allowed enum values
    """
    LONG_TERM_AUCTION_SPECIFICATION_UPDATED = 'LONG_TERM_AUCTION_SPECIFICATION_UPDATED'
    DAY_AHEAD_AUCTION_SPECIFICATION_UPDATED = 'DAY_AHEAD_AUCTION_SPECIFICATION_UPDATED'
    INTRA_DAY_AUCTION_SPECIFICATION_UPDATED = 'INTRA_DAY_AUCTION_SPECIFICATION_UPDATED'
    AUCTION_STATUS_UPDATED = 'AUCTION_STATUS_UPDATED'
    AUCTION_CANCELLED = 'AUCTION_CANCELLED'
    LONG_TERM_AUCTION_ALLOCATED = 'LONG_TERM_AUCTION_ALLOCATED'
    DAY_AHEAD_AUCTION_ALLOCATED = 'DAY_AHEAD_AUCTION_ALLOCATED'
    INTRA_DAY_AUCTION_ALLOCATED = 'INTRA_DAY_AUCTION_ALLOCATED'
    UNPLANNED_OUTAGE_CREATED = 'UNPLANNED_OUTAGE_CREATED'
    UNPLANNED_OUTAGE_UPDATED = 'UNPLANNED_OUTAGE_UPDATED'
    UNPLANNED_OUTAGE_CANCELLED = 'UNPLANNED_OUTAGE_CANCELLED'
    UNPLANNED_OUTAGE_ENDED = 'UNPLANNED_OUTAGE_ENDED'
    CURTAILMENT_EXECUTED = 'CURTAILMENT_EXECUTED'
    BUY_NOW_OFFER_PUBLISHED = 'BUY_NOW_OFFER_PUBLISHED'
    NOMINATION_WINDOW_OVERRIDE_CREATED = 'NOMINATION_WINDOW_OVERRIDE_CREATED'
    NOMINATION_WINDOW_OVERRIDE_UPDATED = 'NOMINATION_WINDOW_OVERRIDE_UPDATED'
    LONG_TERM_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED = 'LONG_TERM_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED'
    DAY_AHEAD_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED = 'DAY_AHEAD_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED'
    INTRA_DAY_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED = 'INTRA_DAY_SECONDARY_MARKET_TRANSFER_REQUEST_RECEIVED'
    FINANCE_INVOICE_SENT = 'FINANCE_INVOICE_SENT'
    FINANCE_INVOICE_MARKED_AS_PAID = 'FINANCE_INVOICE_MARKED_AS_PAID'
    WEBHOOK_TESTED = 'WEBHOOK_TESTED'

    @classmethod
    def from_json(cls, json_str: str) -> WebhookEventType:
        """Create an instance of WebhookEventType from a JSON string"""
        return WebhookEventType(json.loads(json_str))


