import types
from collections.abc import Callable
from typing import Any

from statsd.client.base import StatsClientBase

def safe_wraps(wrapper: Callable[..., Any], *args: Any, **kwargs: Any) -> Callable[..., Any]: ...

class Timer:
    client: StatsClientBase
    stat: str
    rate: float
    ms: float
    def __init__(self, client: StatsClientBase, stat: str, rate: float = 1) -> None: ...
    def __call__(self, f: Callable[..., Any]) -> Callable[..., Any]: ...
    def __enter__(self) -> Timer: ...
    def __exit__(self, typ: type[BaseException] | None, value: BaseException | None, tb: types.TracebackType | None) -> None: ...
    def start(self) -> Timer: ...
    def stop(self, send: bool = True) -> Timer: ...
    def send(self) -> None: ...
