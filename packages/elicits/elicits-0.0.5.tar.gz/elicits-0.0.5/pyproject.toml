[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "elicits" 
version = "0.0.5"
description = "Tool for learning prior distributions based on expert knowledge"
license = "Apache-2.0"
license-files = "LICEN[CS]E*"
authors = [
    {name = "Florence Bockting", email = "florence.bockting@tu-dortmund.de"},
    {name = "Paul-Christian Bürkner", email = "paul.buerkner@gmail.com"},
]
maintainers = [
    {name = "Florence Bockting", email = "florence.bockting@tu-dortmund.de"}
]
readme = "README.md"
packages = [
	{ include = "elicit" }
]
keywords = [
    "prior elicitation", "prior distribution", "expert elicitation",
    "expert knowledge"
]

[tool.poetry]
name = "elicits" 
version = "0.0.5"
description = "Tool for learning prior distributions based on expert knowledge"
license = "Apache-2.0"
authors = [
    "Florence Bockting <florence.bockting@tu-dortmund.de>",
    "Paul-Christian Bürkner <paul.buerkner@gmail.com>",
]
maintainers = [
    "Florence Bockting <florence.bockting@tu-dortmund.de>",
]
readme = "README.md"
packages = [
	{ include = "elicit" }
]

[project.urls]
Homepage = "https://florence-bockting.github.io/elicit"
Documentation = "https://florence-bockting.github.io/elicit"
Repository = "https://github.com/florence-bockting/elicit"

[tool.poetry.dependencies]
python = "3.10.16"
configs = "3.0.3"
numpy = "1.26.4"
pandas = "2.2.3"
pyarrow = "16.1.0"
signac = "2.2.0"
tensorflow = "2.15.1"
tensorflow-probability = "0.23.0"
tensorflow-io-gcs-filesystem = "0.31.0"
bayesflow = "1.1.6"
matplotlib = "3.10.0"
sphinx-pyproject = "0.3.0"
sphinx = "7.3.7"
sphinx-book-theme = "1.1.2"
numpydoc = "1.7.0"
myst_nb = "1.1.0"
sphinx_design = "0.6.0"
sphinxemoji = "0.3.1"
defusedxml = "0.7.1"
python-json-logger = "2.0.7"
genbadge = "1.1.1"
poetry-core = "*"

[tool.poetry.group.test.dependencies]  
pytest-randomly = "^3.15.0"  
pytest = "^8.2.0" 

[tool.poetry.group.dev.dependencies]  
pytest = "^8.3.3"  
coverage = "^7.6.1"  

[tool.coverage.run]  
branch = true  
source = ["tests"]  
dynamic_context = "test_function"  
  
[tool.coverage.report]  
show_missing = true  
fail_under = 0  

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "reports/coverage/coverage.xml"

	