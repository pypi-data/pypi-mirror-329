---
title: "Biber analyzer"
jupyter: python3
---

Biber's Mulit-Dimensional Analysis [@biber1985investigating] is a specific implementation of exploratory factor analysis and has been used in a wide variety of studies. A representative sample of such studies can be seen in [the table of contents of a tribute volume](https://benjamins.com/catalog/scl.60){.external target="_blank"}.

Multi-Dimensional Analysis (MDA) is a process made up of 4 main steps:

1. Identification of relevant variables
2. Extraction of factors from variables
3. Functional interpretation of factors as dimensions
4. Placement of categories on the dimensions

A description of the procedure can be found [here](https://www.uni-bamberg.de/fileadmin/eng-ling/fs/Chapter_21/1Welcome.html){.external target="_blank"}.

## Create a biber document-feature matrix

First we will import our libraries and some data:

```{python}
import spacy
import pybiber as pb
import polars as pl
from pybiber.data import micusp_mini
```

Then process that data:

```{python}
nlp = spacy.load("en_core_web_sm", disable=["ner"])
df_spacy = pb.spacy_parse(micusp_mini, nlp_model=nlp)
df_biber = pb.biber(df_spacy)
```

## Format categories

The MDA procedure requires a categorical variable.

The data that we're using for this demonstration have the names of disciplines encoded into the `doc_id`. The first three letters before the underscore represent an academic discipline (e.g., BIO for biology, ENG for English, etc.).

```{python}
df_biber.head()
```

::: {.callout-note}
The data are down-sampled from the Michigan Corpus of Upper-Level Student Papers.
:::

We can extract that string and place it into a new column called `discipline`

```{python}
df_biber = (
    df_biber
    .with_columns(
        pl.col("doc_id").str.extract(r"^([A-Z])+", 0)
        .alias("discipline")
	  )
      )

df_biber.head()
```

## Process the data with BiberAnalyzer

Now the data can be processed using [](`~pybiber.biber_analyzer.BiberAnalyzer`)

```{python}
df = pb.BiberAnalyzer(df_biber, id_column=True)
```

## Determine the number of factors to extract


```{python}
df.mdaviz_screeplot();
```

## Extract factors

```{python}
df.mda(n_factors=3)
```

## Check the summary

```{python}
df.mda_summary
```

## Plot factors

```{python}
df.mdaviz_groupmeans(factor=2);
```

## Check the dimension scores
```{python}
df.mda_dim_scores
```