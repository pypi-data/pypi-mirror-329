Metadata-Version: 2.1
Name: turbx
Version: 0.5.0
Summary: Extensible toolkit for analyzing turbulent flow datasets
Home-page: https://github.com/iagappel/turbx
Author: Jason A
Maintainer: Jason A
License: MIT
Keywords: scientific computing,post-processing,statistics,simulation,turbulence
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Database
Classifier: Topic :: System :: Distributed Computing
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: mpi4py>=4.0
Requires-Dist: numpy>=2.0
Requires-Dist: scipy>=1.14
Requires-Dist: h5py>=3.10
Requires-Dist: matplotlib>=3.9
Requires-Dist: tqdm>=4.66
Requires-Dist: cmocean>=3.0
Requires-Dist: colorcet>=3.0
Requires-Dist: cmasher>=1.7

# turbx
[![PyPI version](https://badge.fury.io/py/turbx.svg)](https://badge.fury.io/py/turbx)
[![Downloads](https://pepy.tech/badge/turbx)](https://pepy.tech/project/turbx)

`turbx` is a `python3` module which contains tools for organization, storage and parallelized processing of turbulent flow datasets, including `super()`ed wrappers of `h5py.File` that streamline data & metadata access.

```
python3 -m pip install turbx
```

`turbx` runs in `python3` and uses parallel `HDF5` (wrapped by `h5py`) for high-performance collective MPI-IO with `mpi4py`. This requires:

- A `python3` installation (3.11+ recommended)
- An MPI implementation such as `OpenMPI`
- A parallel `HDF5` installation (must be compiled with `--enable-parallel`) 
- `mpi4py`
- `h5py` compiled with parallel configuration

Visualization of `HDF5` datasets in `Paraview` is supported through the use of `XML`/`XDMF` sidecar descriptor files. All major data classes (such as `rgd`) can automatically generate the descriptor files by calling `.make_xdmf()`.
