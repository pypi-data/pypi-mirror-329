"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from typing import Mapping, Optional
from zillow_rapidapi_client import models, utils
from zillow_rapidapi_client._hooks import HookContext
from zillow_rapidapi_client.types import OptionalNullable, UNSET


class Properties(BaseSDK):
    def extended_search(
        self,
        *,
        location: Optional[str] = None,
        page: Optional[int] = None,
        status_type: Optional[models.StatusType] = None,
        home_type: Optional[models.HomeType] = None,
        sort: Optional[models.Sort] = None,
        min_price: Optional[float] = None,
        max_price: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PropertySearchResponse:
        r"""Search for properties

        :param location: Location details (address, county, neighborhood, or Zip code). Required if polygon or coordinates are empty.
        :param page: Page number for paginated results. Max value is 20.
        :param status_type: Property status type.
        :param home_type: Property type. Comma-separated list.
        :param sort: Sorting order.
        :param min_price: Minimum price filter.
        :param max_price: Maximum price filter.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PropertyExtendedSearchRequest(
            location=location,
            page=page,
            status_type=status_type,
            home_type=home_type,
            sort=sort,
            min_price=min_price,
            max_price=max_price,
        )

        req = self._build_request(
            method="GET",
            path="/propertyExtendedSearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="propertyExtendedSearch",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PropertySearchResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def extended_search_async(
        self,
        *,
        location: Optional[str] = None,
        page: Optional[int] = None,
        status_type: Optional[models.StatusType] = None,
        home_type: Optional[models.HomeType] = None,
        sort: Optional[models.Sort] = None,
        min_price: Optional[float] = None,
        max_price: Optional[float] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.PropertySearchResponse:
        r"""Search for properties

        :param location: Location details (address, county, neighborhood, or Zip code). Required if polygon or coordinates are empty.
        :param page: Page number for paginated results. Max value is 20.
        :param status_type: Property status type.
        :param home_type: Property type. Comma-separated list.
        :param sort: Sorting order.
        :param min_price: Minimum price filter.
        :param max_price: Maximum price filter.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.PropertyExtendedSearchRequest(
            location=location,
            page=page,
            status_type=status_type,
            home_type=home_type,
            sort=sort,
            min_price=min_price,
            max_price=max_price,
        )

        req = self._build_request_async(
            method="GET",
            path="/propertyExtendedSearch",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="propertyExtendedSearch",
                oauth2_scopes=[],
                security_source=None,
            ),
            request=req,
            error_status_codes=["400", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return utils.unmarshal_json(http_res.text, models.PropertySearchResponse)
        if utils.match_response(http_res, ["400", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise models.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise models.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
