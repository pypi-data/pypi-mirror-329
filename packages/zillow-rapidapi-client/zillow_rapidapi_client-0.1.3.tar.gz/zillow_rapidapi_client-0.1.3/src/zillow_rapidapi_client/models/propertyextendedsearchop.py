"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from zillow_rapidapi_client.types import BaseModel
from zillow_rapidapi_client.utils import FieldMetadata, QueryParamMetadata


class StatusType(str, Enum):
    r"""Property status type."""

    FOR_SALE = "ForSale"
    RECENTLY_SOLD = "RecentlySold"
    FOR_RENT = "ForRent"


class HomeType(str, Enum):
    r"""Property type. Comma-separated list."""

    HOUSES = "Houses"
    APARTMENTS_CONDOS_CO_OPS = "Apartments_Condos_Co-ops"
    MULTI_FAMILY = "Multi-family"
    APARTMENTS = "Apartments"
    MANUFACTURED = "Manufactured"
    CONDOS = "Condos"
    LOTS_LAND = "LotsLand"
    TOWNHOMES = "Townhomes"


class Sort(str, Enum):
    r"""Sorting order."""

    HOMES_FOR_YOU = "Homes_for_You"
    PRICE_HIGH_LOW = "Price_High_Low"
    PRICE_LOW_HIGH = "Price_Low_High"
    NEWEST = "Newest"
    BEDROOMS = "Bedrooms"
    BATHROOMS = "Bathrooms"
    SQUARE_FEET = "Square_Feet"
    LOT_SIZE = "Lot_Size"


class PropertyExtendedSearchRequestTypedDict(TypedDict):
    location: NotRequired[str]
    r"""Location details (address, county, neighborhood, or Zip code). Required if polygon or coordinates are empty."""
    page: NotRequired[int]
    r"""Page number for paginated results. Max value is 20."""
    status_type: NotRequired[StatusType]
    r"""Property status type."""
    home_type: NotRequired[HomeType]
    r"""Property type. Comma-separated list."""
    sort: NotRequired[Sort]
    r"""Sorting order."""
    min_price: NotRequired[float]
    r"""Minimum price filter."""
    max_price: NotRequired[float]
    r"""Maximum price filter."""


class PropertyExtendedSearchRequest(BaseModel):
    location: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Location details (address, county, neighborhood, or Zip code). Required if polygon or coordinates are empty."""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Page number for paginated results. Max value is 20."""

    status_type: Annotated[
        Optional[StatusType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Property status type."""

    home_type: Annotated[
        Optional[HomeType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Property type. Comma-separated list."""

    sort: Annotated[
        Optional[Sort],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sorting order."""

    min_price: Annotated[
        Optional[float],
        pydantic.Field(alias="minPrice"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Minimum price filter."""

    max_price: Annotated[
        Optional[float],
        pydantic.Field(alias="maxPrice"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Maximum price filter."""
