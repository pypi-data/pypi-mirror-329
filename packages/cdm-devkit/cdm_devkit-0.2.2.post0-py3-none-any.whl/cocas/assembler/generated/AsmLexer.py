# Generated from assembler/grammar/AsmLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,5,29,203,8,29,
        10,29,12,29,206,9,29,1,30,1,30,5,30,210,8,30,10,30,12,30,213,9,30,
        1,30,1,30,5,30,217,8,30,10,30,12,30,220,9,30,1,30,1,30,1,31,4,31,
        225,8,31,11,31,12,31,226,1,32,1,32,1,32,1,32,4,32,233,8,32,11,32,
        12,32,234,1,33,1,33,1,33,1,33,4,33,241,8,33,11,33,12,33,242,1,34,
        1,34,4,34,247,8,34,11,34,12,34,248,1,34,1,34,5,34,253,8,34,10,34,
        12,34,256,9,34,1,34,1,34,1,35,1,35,4,35,262,8,35,11,35,12,35,263,
        1,35,1,35,5,35,268,8,35,10,35,12,35,271,9,35,1,35,1,35,1,36,3,36,
        276,8,36,1,36,1,36,1,37,1,37,5,37,282,8,37,10,37,12,37,285,9,37,
        1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,4,39,298,
        8,39,11,39,12,39,299,1,40,1,40,0,0,41,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,1,0,12,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        5,0,46,46,48,57,65,90,95,95,97,122,1,0,48,57,1,0,48,49,3,0,48,57,
        65,70,97,102,2,0,34,34,92,92,2,0,39,39,92,92,1,0,10,10,2,0,9,9,32,
        32,5,0,43,43,47,57,61,61,65,90,97,122,1,0,0,65534,317,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,1,
        83,1,0,0,0,3,89,1,0,0,0,5,95,1,0,0,0,7,104,1,0,0,0,9,107,1,0,0,0,
        11,112,1,0,0,0,13,116,1,0,0,0,15,120,1,0,0,0,17,123,1,0,0,0,19,126,
        1,0,0,0,21,129,1,0,0,0,23,135,1,0,0,0,25,141,1,0,0,0,27,147,1,0,
        0,0,29,152,1,0,0,0,31,159,1,0,0,0,33,165,1,0,0,0,35,170,1,0,0,0,
        37,176,1,0,0,0,39,178,1,0,0,0,41,180,1,0,0,0,43,182,1,0,0,0,45,184,
        1,0,0,0,47,186,1,0,0,0,49,188,1,0,0,0,51,190,1,0,0,0,53,192,1,0,
        0,0,55,194,1,0,0,0,57,197,1,0,0,0,59,200,1,0,0,0,61,207,1,0,0,0,
        63,224,1,0,0,0,65,228,1,0,0,0,67,236,1,0,0,0,69,244,1,0,0,0,71,259,
        1,0,0,0,73,275,1,0,0,0,75,279,1,0,0,0,77,288,1,0,0,0,79,292,1,0,
        0,0,81,301,1,0,0,0,83,84,5,97,0,0,84,85,5,115,0,0,85,86,5,101,0,
        0,86,87,5,99,0,0,87,88,5,116,0,0,88,2,1,0,0,0,89,90,5,98,0,0,90,
        91,5,114,0,0,91,92,5,101,0,0,92,93,5,97,0,0,93,94,5,107,0,0,94,4,
        1,0,0,0,95,96,5,99,0,0,96,97,5,111,0,0,97,98,5,110,0,0,98,99,5,116,
        0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,102,5,117,0,0,102,103,
        5,101,0,0,103,6,1,0,0,0,104,105,5,100,0,0,105,106,5,111,0,0,106,
        8,1,0,0,0,107,108,5,101,0,0,108,109,5,108,0,0,109,110,5,115,0,0,
        110,111,5,101,0,0,111,10,1,0,0,0,112,113,5,101,0,0,113,114,5,110,
        0,0,114,115,5,100,0,0,115,12,1,0,0,0,116,117,5,101,0,0,117,118,5,
        120,0,0,118,119,5,116,0,0,119,14,1,0,0,0,120,121,5,102,0,0,121,122,
        5,105,0,0,122,16,1,0,0,0,123,124,5,105,0,0,124,125,5,102,0,0,125,
        18,1,0,0,0,126,127,5,105,0,0,127,128,5,115,0,0,128,20,1,0,0,0,129,
        130,5,109,0,0,130,131,5,97,0,0,131,132,5,99,0,0,132,133,5,114,0,
        0,133,134,5,111,0,0,134,22,1,0,0,0,135,136,5,114,0,0,136,137,5,115,
        0,0,137,138,5,101,0,0,138,139,5,99,0,0,139,140,5,116,0,0,140,24,
        1,0,0,0,141,142,5,115,0,0,142,143,5,116,0,0,143,144,5,97,0,0,144,
        145,5,121,0,0,145,146,5,115,0,0,146,26,1,0,0,0,147,148,5,116,0,0,
        148,149,5,104,0,0,149,150,5,101,0,0,150,151,5,110,0,0,151,28,1,0,
        0,0,152,153,5,116,0,0,153,154,5,112,0,0,154,155,5,108,0,0,155,156,
        5,97,0,0,156,157,5,116,0,0,157,158,5,101,0,0,158,30,1,0,0,0,159,
        160,5,117,0,0,160,161,5,110,0,0,161,162,5,116,0,0,162,163,5,105,
        0,0,163,164,5,108,0,0,164,32,1,0,0,0,165,166,5,119,0,0,166,167,5,
        101,0,0,167,168,5,110,0,0,168,169,5,100,0,0,169,34,1,0,0,0,170,171,
        5,119,0,0,171,172,5,104,0,0,172,173,5,105,0,0,173,174,5,108,0,0,
        174,175,5,101,0,0,175,36,1,0,0,0,176,177,5,46,0,0,177,38,1,0,0,0,
        178,179,5,44,0,0,179,40,1,0,0,0,180,181,5,43,0,0,181,42,1,0,0,0,
        182,183,5,45,0,0,183,44,1,0,0,0,184,185,5,58,0,0,185,46,1,0,0,0,
        186,187,5,42,0,0,187,48,1,0,0,0,188,189,5,62,0,0,189,50,1,0,0,0,
        190,191,5,40,0,0,191,52,1,0,0,0,192,193,5,41,0,0,193,54,1,0,0,0,
        194,195,5,45,0,0,195,196,5,124,0,0,196,56,1,0,0,0,197,198,5,114,
        0,0,198,199,3,63,31,0,199,58,1,0,0,0,200,204,7,0,0,0,201,203,7,1,
        0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,
        0,0,205,60,1,0,0,0,206,204,1,0,0,0,207,211,7,0,0,0,208,210,7,1,0,
        0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,
        0,212,214,1,0,0,0,213,211,1,0,0,0,214,218,3,37,18,0,215,217,7,2,
        0,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,1,0,
        0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,7,1,0,0,222,62,1,0,0,
        0,223,225,7,3,0,0,224,223,1,0,0,0,225,226,1,0,0,0,226,224,1,0,0,
        0,226,227,1,0,0,0,227,64,1,0,0,0,228,229,5,48,0,0,229,230,5,98,0,
        0,230,232,1,0,0,0,231,233,7,4,0,0,232,231,1,0,0,0,233,234,1,0,0,
        0,234,232,1,0,0,0,234,235,1,0,0,0,235,66,1,0,0,0,236,237,5,48,0,
        0,237,238,5,120,0,0,238,240,1,0,0,0,239,241,7,5,0,0,240,239,1,0,
        0,0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,68,1,0,0,
        0,244,254,5,34,0,0,245,247,8,6,0,0,246,245,1,0,0,0,247,248,1,0,0,
        0,248,246,1,0,0,0,248,249,1,0,0,0,249,253,1,0,0,0,250,251,5,92,0,
        0,251,253,9,0,0,0,252,246,1,0,0,0,252,250,1,0,0,0,253,256,1,0,0,
        0,254,252,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,
        0,257,258,5,34,0,0,258,70,1,0,0,0,259,269,5,39,0,0,260,262,8,7,0,
        0,261,260,1,0,0,0,262,263,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,
        0,264,268,1,0,0,0,265,266,5,92,0,0,266,268,9,0,0,0,267,261,1,0,0,
        0,267,265,1,0,0,0,268,271,1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,
        0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,5,39,0,0,273,72,1,0,0,
        0,274,276,5,13,0,0,275,274,1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,
        0,277,278,5,10,0,0,278,74,1,0,0,0,279,283,5,35,0,0,280,282,8,8,0,
        0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,
        0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,6,37,0,0,287,76,1,0,0,
        0,288,289,7,9,0,0,289,290,1,0,0,0,290,291,6,38,0,0,291,78,1,0,0,
        0,292,293,5,102,0,0,293,294,5,112,0,0,294,295,5,45,0,0,295,297,1,
        0,0,0,296,298,7,10,0,0,297,296,1,0,0,0,298,299,1,0,0,0,299,297,1,
        0,0,0,299,300,1,0,0,0,300,80,1,0,0,0,301,302,7,11,0,0,302,82,1,0,
        0,0,16,0,204,211,218,226,234,242,248,252,254,263,267,269,275,283,
        299,1,6,0,0
    ]

class AsmLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Asect = 1
    Break = 2
    Continue = 3
    Do = 4
    Else = 5
    End = 6
    Ext = 7
    Fi = 8
    If = 9
    Is = 10
    Macro = 11
    Rsect = 12
    Stays = 13
    Then = 14
    Tplate = 15
    Until = 16
    Wend = 17
    While = 18
    DOT = 19
    COMMA = 20
    PLUS = 21
    MINUS = 22
    COLON = 23
    ASTERISK = 24
    ANGLE_BRACKET = 25
    OPEN_PAREN = 26
    CLOSE_PAREN = 27
    LINE_MARK_MARKER = 28
    REGISTER = 29
    WORD = 30
    WORD_WITH_DOTS = 31
    DECIMAL_NUMBER = 32
    BINARY_NUMBER = 33
    HEX_NUMBER = 34
    STRING = 35
    CHAR = 36
    NEWLINE = 37
    COMMENT = 38
    WS = 39
    BASE64 = 40
    UNEXPECTED_TOKEN = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'asect'", "'break'", "'continue'", "'do'", "'else'", "'end'", 
            "'ext'", "'fi'", "'if'", "'is'", "'macro'", "'rsect'", "'stays'", 
            "'then'", "'tplate'", "'until'", "'wend'", "'while'", "'.'", 
            "','", "'+'", "'-'", "':'", "'*'", "'>'", "'('", "')'", "'-|'" ]

    symbolicNames = [ "<INVALID>",
            "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", "Fi", 
            "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", "Until", 
            "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", "COLON", "ASTERISK", 
            "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "LINE_MARK_MARKER", 
            "REGISTER", "WORD", "WORD_WITH_DOTS", "DECIMAL_NUMBER", "BINARY_NUMBER", 
            "HEX_NUMBER", "STRING", "CHAR", "NEWLINE", "COMMENT", "WS", 
            "BASE64", "UNEXPECTED_TOKEN" ]

    ruleNames = [ "Asect", "Break", "Continue", "Do", "Else", "End", "Ext", 
                  "Fi", "If", "Is", "Macro", "Rsect", "Stays", "Then", "Tplate", 
                  "Until", "Wend", "While", "DOT", "COMMA", "PLUS", "MINUS", 
                  "COLON", "ASTERISK", "ANGLE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
                  "LINE_MARK_MARKER", "REGISTER", "WORD", "WORD_WITH_DOTS", 
                  "DECIMAL_NUMBER", "BINARY_NUMBER", "HEX_NUMBER", "STRING", 
                  "CHAR", "NEWLINE", "COMMENT", "WS", "BASE64", "UNEXPECTED_TOKEN" ]

    grammarFileName = "AsmLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


