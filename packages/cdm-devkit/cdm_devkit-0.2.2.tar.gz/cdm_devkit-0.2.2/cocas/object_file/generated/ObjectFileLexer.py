# Generated from object_file/grammar/ObjectFileLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,206,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,4,10,112,8,10,11,10,12,
        10,113,1,11,1,11,5,11,118,8,11,10,11,12,11,121,9,11,1,11,1,11,5,
        11,125,8,11,10,11,12,11,128,9,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,3,17,146,8,17,1,
        17,4,17,149,8,17,11,17,12,17,150,1,18,4,18,154,8,18,11,18,12,18,
        155,1,18,1,18,1,19,3,19,161,8,19,1,19,4,19,164,8,19,11,19,12,19,
        165,1,19,1,19,1,20,4,20,171,8,20,11,20,12,20,172,1,21,4,21,176,8,
        21,11,21,12,21,177,1,22,4,22,181,8,22,11,22,12,22,182,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,24,4,24,193,8,24,11,24,12,24,194,1,24,
        1,24,1,24,1,25,4,25,201,8,25,11,25,12,25,202,1,25,1,25,0,0,26,5,
        1,7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,
        31,14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,
        53,25,55,26,5,0,1,2,3,4,6,4,0,48,57,65,90,95,95,97,122,3,0,65,90,
        95,95,97,122,5,0,46,46,48,57,65,90,95,95,97,122,2,0,9,9,32,32,6,
        0,9,9,32,32,48,57,65,90,95,95,97,122,2,0,10,10,13,13,214,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,1,45,1,0,0,
        0,2,47,1,0,0,0,2,49,1,0,0,0,2,51,1,0,0,0,3,53,1,0,0,0,4,55,1,0,0,
        0,5,57,1,0,0,0,7,62,1,0,0,0,9,69,1,0,0,0,11,75,1,0,0,0,13,79,1,0,
        0,0,15,84,1,0,0,0,17,89,1,0,0,0,19,94,1,0,0,0,21,101,1,0,0,0,23,
        105,1,0,0,0,25,111,1,0,0,0,27,115,1,0,0,0,29,131,1,0,0,0,31,136,
        1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,1,0,0,0,39,148,1,0,
        0,0,41,153,1,0,0,0,43,163,1,0,0,0,45,170,1,0,0,0,47,175,1,0,0,0,
        49,180,1,0,0,0,51,186,1,0,0,0,53,192,1,0,0,0,55,200,1,0,0,0,57,58,
        5,84,0,0,58,59,5,65,0,0,59,60,5,82,0,0,60,61,5,71,0,0,61,6,1,0,0,
        0,62,63,5,70,0,0,63,64,5,73,0,0,64,65,5,76,0,0,65,66,5,69,0,0,66,
        67,1,0,0,0,67,68,6,1,0,0,68,8,1,0,0,0,69,70,5,65,0,0,70,71,5,66,
        0,0,71,72,5,83,0,0,72,73,1,0,0,0,73,74,6,2,1,0,74,10,1,0,0,0,75,
        76,5,76,0,0,76,77,5,79,0,0,77,78,5,67,0,0,78,12,1,0,0,0,79,80,5,
        78,0,0,80,81,5,84,0,0,81,82,5,82,0,0,82,83,5,89,0,0,83,14,1,0,0,
        0,84,85,5,78,0,0,85,86,5,65,0,0,86,87,5,77,0,0,87,88,5,69,0,0,88,
        16,1,0,0,0,89,90,5,65,0,0,90,91,5,76,0,0,91,92,5,73,0,0,92,93,5,
        71,0,0,93,18,1,0,0,0,94,95,5,68,0,0,95,96,5,65,0,0,96,97,5,84,0,
        0,97,98,5,65,0,0,98,99,1,0,0,0,99,100,6,7,2,0,100,20,1,0,0,0,101,
        102,5,82,0,0,102,103,5,69,0,0,103,104,5,76,0,0,104,22,1,0,0,0,105,
        106,5,88,0,0,106,107,5,84,0,0,107,108,5,82,0,0,108,109,5,78,0,0,
        109,24,1,0,0,0,110,112,7,0,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,
        111,1,0,0,0,113,114,1,0,0,0,114,26,1,0,0,0,115,119,7,1,0,0,116,118,
        7,0,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,
        1,0,0,0,120,122,1,0,0,0,121,119,1,0,0,0,122,126,3,37,16,0,123,125,
        7,2,0,0,124,123,1,0,0,0,125,128,1,0,0,0,126,124,1,0,0,0,126,127,
        1,0,0,0,127,129,1,0,0,0,128,126,1,0,0,0,129,130,7,0,0,0,130,28,1,
        0,0,0,131,132,5,36,0,0,132,133,5,97,0,0,133,134,5,98,0,0,134,135,
        5,115,0,0,135,30,1,0,0,0,136,137,5,58,0,0,137,32,1,0,0,0,138,139,
        5,45,0,0,139,34,1,0,0,0,140,141,5,43,0,0,141,36,1,0,0,0,142,143,
        5,46,0,0,143,38,1,0,0,0,144,146,5,13,0,0,145,144,1,0,0,0,145,146,
        1,0,0,0,146,147,1,0,0,0,147,149,5,10,0,0,148,145,1,0,0,0,149,150,
        1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,40,1,0,0,0,152,154,7,
        3,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,
        0,0,0,156,157,1,0,0,0,157,158,6,18,3,0,158,42,1,0,0,0,159,161,5,
        13,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,164,5,
        10,0,0,163,160,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,0,165,166,1,
        0,0,0,166,167,1,0,0,0,167,168,6,19,4,0,168,44,1,0,0,0,169,171,7,
        4,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,
        0,0,0,173,46,1,0,0,0,174,176,7,0,0,0,175,174,1,0,0,0,176,177,1,0,
        0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,48,1,0,0,0,179,181,7,3,0,
        0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,
        0,183,184,1,0,0,0,184,185,6,22,3,0,185,50,1,0,0,0,186,187,5,58,0,
        0,187,188,1,0,0,0,188,189,6,23,4,0,189,190,6,23,2,0,190,52,1,0,0,
        0,191,193,5,32,0,0,192,191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,
        0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,6,24,4,0,197,198,6,24,
        5,0,198,54,1,0,0,0,199,201,8,5,0,0,200,199,1,0,0,0,201,202,1,0,0,
        0,202,200,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,6,25,4,
        0,205,56,1,0,0,0,18,0,1,2,3,4,113,119,126,145,150,155,160,165,172,
        177,182,194,202,6,5,3,0,5,2,0,5,1,0,6,0,0,4,0,0,5,4,0
    ]

class ObjectFileLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IN_BYTES = 1
    IN_ABS = 2
    IN_FILE = 3
    IN_FILEPATH = 4

    TARG = 1
    FILE = 2
    ABS = 3
    LOC = 4
    NTRY = 5
    NAME = 6
    ALIG = 7
    DATA = 8
    REL = 9
    XTRN = 10
    WORD = 11
    WORD_WITH_DOTS = 12
    ABS_SECTION = 13
    COLON = 14
    MINUS = 15
    PLUS = 16
    DOT = 17
    NEWLINE = 18
    WS = 19
    NEWLINE_BYTES = 20
    BYTES = 21
    WORD_ABS = 22
    WS_ABS = 23
    COLON_ABS = 24
    SPACES_FILE = 25
    FILEPATH = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "IN_BYTES", "IN_ABS", "IN_FILE", "IN_FILEPATH" ]

    literalNames = [ "<INVALID>",
            "'TARG'", "'FILE'", "'ABS'", "'LOC'", "'NTRY'", "'NAME'", "'ALIG'", 
            "'DATA'", "'REL'", "'XTRN'", "'$abs'", "'-'", "'+'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", "DATA", 
            "REL", "XTRN", "WORD", "WORD_WITH_DOTS", "ABS_SECTION", "COLON", 
            "MINUS", "PLUS", "DOT", "NEWLINE", "WS", "NEWLINE_BYTES", "BYTES", 
            "WORD_ABS", "WS_ABS", "COLON_ABS", "SPACES_FILE", "FILEPATH" ]

    ruleNames = [ "TARG", "FILE", "ABS", "LOC", "NTRY", "NAME", "ALIG", 
                  "DATA", "REL", "XTRN", "WORD", "WORD_WITH_DOTS", "ABS_SECTION", 
                  "COLON", "MINUS", "PLUS", "DOT", "NEWLINE", "WS", "NEWLINE_BYTES", 
                  "BYTES", "WORD_ABS", "WS_ABS", "COLON_ABS", "SPACES_FILE", 
                  "FILEPATH" ]

    grammarFileName = "ObjectFileLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


