_B='Library'
_A='line'
import os,sys,re
from django.conf import settings
import project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_ceae02cc36.qube_72f063e814 as qube_72f063e814,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_ceae02cc36.qube_a06b8a9b46 as qube_a06b8a9b46,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_ceae02cc36.qube_275a9dd8de as qube_275a9dd8de,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_ceae02cc36.qube_ae06013779 as qube_ae06013779,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_38471ca5d2 as qube_38471ca5d2,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_0b0e558076 as qube_0b0e558076,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_59e682fcc4 as qube_59e682fcc4,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_8177faf6a3 as qube_8177faf6a3,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_a13d292700 as qube_a13d292700,project.sparta_ab7a1c0e2d.sparta_6016211a05.sparta_41e2797cfb.qube_3e00966671 as qube_3e00966671
def sparta_282fe25a50(b_return_type_id=False):
	E='typeId'
	def B(input_string,key=E):A=re.escape(key);B=f"'{A}':\\s*(true|false|\\d+|'.*?'|\\\".*?\\\")";C=re.findall(B,input_string,re.IGNORECASE);D=[A.strip('\'"')for A in C];return D
	def F(file_path):
		with open(file_path,'r')as L:D=L.read()
		D=D.split('// PARSED ENDLINE COMMENT (DO NOT REMOVE)')[0];M=D;F=re.search('return\\s*({[\\s\\S]*?});',M)
		if not F:raise ValueError('No return dictionary found in the file.')
		C=F.group(1);G=B(C,E);H=B(C,'slugApi');N=B(C,'display');O=B(C,'name');P=B(C,'libraryName');I=[];Q=0
		for(A,R)in enumerate(G):
			if N[A]=='true':
				J=H[A]
				if J!='-1'and len(J)>0:
					K={'ID':H[A],'Name':O[A],_B:P[A]}
					if b_return_type_id or True:K['type_plot']=G[A]
					I.append(K);Q+=1
		return I
	G=os.path.dirname(__file__);H=os.path.dirname(G);I=os.path.dirname(H);D=os.path.dirname(I)
	if settings.DEBUG:C=os.path.join(D,'static')
	else:C=os.path.join(D,'staticfiles')
	A=os.path.join(C,'js/vueComponent/plot-db/new-plot/plot-config/plotConfigMixin.js')
	if not os.path.exists(A):A=os.path.join(C,'js/util/plotConfigMixin.js')
	A=os.path.normpath(A);J=F(A);return J
def sparta_e49a25953c():
	Ad='gauge2';Ac='ts_area_bands';Ab='performance';Aa='ts_lollipop';AZ='ts_bar';AY='ts_baseline';AX='ts_area';AW='tickerWidget';AV='tickerTape';AU='symbolOverview';AT='topStories';AS='technicalAnalysis';AR='screener';AQ='stockMarket';AP='marketData';AO='cryptoHeatmap';AN='cryptoTable';AM='economicCalendar';AL='etfHeatmap';AK='stockHeatmap';AJ='histogram';AI='timescale';AH='matrix';AG='pd.Series';AF='boolean';AE='DataFrame Index';AD='singleTicker';AC='symbolInfo';AB='symbolMini';AA='companyProfile';A9='stockAnalysis';A8='forexHeatmap';A7='gauge4';A6='gauge3';A5='gauge1';A4='candlestick';A3='ts_shaded';A2='ts_line';A1='realTimeStock';A0='area';z='bar';y='bubble';x='scatter';w='dict';v='[pd.Series, pd.Series...]';u='gauge_zones_height';t='height';s='width';r='title_css';q='title';p='returns_bmk';o='returns';n='dates';m='gauge';l='border_style';k='tooltips_label';j='tooltips_title';i='background';h='border';g='datalabels';f='shaded_background';e='labels';d='stacked';a='str';Z='pd.DataFrame';Y='gauge_zones_labels';X='gauge_zones';W='dataframe';V='interactive';U='date_format';S='list[list]';R='legend';P='optional_args';O='mandatory_args';N='signature';M=None;J='list';I='y';H='x';F='type';E='description';D='examples';C='input';A='options';B={H:{F:[J,AE],E:'list or DataFrame index representing the x axis of your chart'},I:{F:[J,S,Z,v],E:'list, list of lists, DataFrame, or list of Series representing the lines to plot'},'r':{F:[J,S,Z,v],E:'list, list of lists, DataFrame, or list of Series representing the radius to plot'},d:{F:[AF],E:'If True and multiple series, all the series will be stacked together'},U:{F:[a],E:'For instance: yyyy-MM-dd, dd/MM/yyyy, yyyy-MM-dd HH:MM:SS etc... year: y, month: M, day: d, quarter: QQQ, week: w, hour: HH, minute: MM, seconds: SS, millisecond: ms'},R:{F:[J],E:"A list containing the names of each series in your chart. Each element in the list corresponds to the name of a series, which will be displayed in the chart's legend."},e:{F:[J,S],E:'A list or list of lists containing the labels for each point (scatter/bubble chart).'},'ohlcv':{F:['pd.DataFrame()','[open:list, high:list, low:list, close:list, volume:list]','[open:pd.Series, high:pd.Series, low:pd.Series, close:pd.Series, volume:pd.Series]'],E:'DataFrame with Open, High, Low, Close and optionally Volumes columns. Or a list containing eight list or pd.Series of Open, High, Low, Close and optionally volumes.'},f:{F:[J,S,Z,v],E:'The shaded_background input should be a list of numerical values representing the intensity levels of the shaded background, where each value corresponds to a specific color gradient'},g:{F:[J,S],E:'For charts containing a single series, provide a list of strings to represent the label of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the labels for the points on each corresponding series'},h:{F:[J,S],E:'For charts containing a single series, provide a list of color strings (in hex, rgb, or rgba format) to represent the border color of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the border colors for the points on each corresponding series'},i:{F:[J,S],E:'For charts containing a single series, provide a list of color strings (in hex, rgb, or rgba format) to represent the background color of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the background colors for the points on each corresponding series'},j:{F:[J,S],E:'For charts containing a single series, provide a list of strings to represent the tooltip title of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the tooltips for the points on each corresponding series'},k:{F:[J,S],E:'For charts containing a single series, provide a list of strings to represent the tooltip label of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the tooltips for the points on each corresponding series'},l:{F:[J,S],E:'For charts containing a single series, provide a list of strings to represent the border style of each point. If your chart includes multiple series, supply a list of lists, where each inner list specifies the border styles for the points on each corresponding series. Please make sure to only use border styles from the following list: <span style="font-weight:bold">"solid", "dotted", "dashed", "largeDashed", "sparseDotted"</span>.'},'chart_type':{F:[a],E:'This is the type of the chart. You can find the available ID by running the get_plot_types()'},m:{F:[w],E:"This dictionary must contains 3 keys: <span style='font-weight:bold'>'value'</span> that corresponds to the value of the gauge, <span style='font-weight:bold'>'min'</span> and <span style='font-weight:bold'>'max'</span> for the minimum and maximum value the gauge can take"},V:{F:[AF],E:'If set to false, only the final plot will be displayed, without the option for interactive editing. Default value is true.'},W:{F:[],E:''},n:{F:[J,AE],E:'list or DataFrame index representing the dates of your time series'},o:{F:[J,Z,AG],E:'list, DataFrame, or Series representing the (portfolio) returns of your time series'},p:{F:[J,Z,AG],E:'list, DataFrame, or Series representing the (benchmark) returns of your time series'},q:{F:[a],E:'Title of your plot'},r:{F:[w],E:'Apply css to your title. Put all your css attributes into a dictionary. For instance: {"text-align": "center", "color": "red"} etc...'},A:{F:[w],E:'You can override every attributes of the chart with the highest granularity in this options dictionary. Please refer to the option section below to find out more about all the attributes to override'},s:{F:['int',a],E:'This is the width of the widget. You can either specify an integer or a string with the percentage value (width="100%" for instance)'},t:{F:['int',a],E:'This is the height of the widget. You can either specify an integer or a string with the percentage value (height="100%" for instance)'},X:{F:[J],E:'Separate the background sectors or zones to have static colors'},Y:{F:[J],E:'Set labels for each zones'},u:{F:[J],E:'Height parameter may be passed in to increase the size for each zone'}};c={g:B[g],h:B[h],i:B[i],j:B[j],k:B[k],l:B[l]};K={s:B[s],t:B[t]};L={q:B[q],r:B[r]};Ae={N:"def plot(dataframe:list, chart_type='dataframe', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{W:B[W]},P:{**L,**{A:B[A]},**K}};Af={N:"def plot(dates:list, returns:list, chart_type='quantstats', returns_bmk:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{n:B[n],o:B[o]},P:{**{p:B[p],A:B[A]},**L,**K}};Ag={N:"def plot(chart_type='notebook', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{W:B[W]},P:{**L,**K}};Ah={N:"def plot(chart_type='dynamicRescale', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**K}};Ai={N:"def plot(chart_type='regression', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**K}};Aj={N:"def plot(chart_type='calendar', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**K}};Ak={N:"def plot(chart_type='wordcloud', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**K}}
	def Q(chart_type=_A):
		C=chart_type
		if C in[x,y]:D={N:f"def plot(x:list, y:list, legend:list=None, date_format:str=None, labels:list=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{C}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**{U:B[U],V:B[V],A:B[A],R:B[R],e:B[e]},**c,**K}}
		elif C in[z,A0]:D={N:f"def plot(x:list, y:list, stacked:bool=False, legend:list=None, date_format:str=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{C}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**{U:B[U],d:B[d],V:B[V],A:B[A],R:B[R]},**c,**K}}
		else:D={N:f"def plot(x:list, y:list, legend:list=None, date_format:str=None, datalabels:list=None, \n        border:list=None, background:list=None, tooltips_title:list=None, tooltips_label:list=None, \n        border_style:list=None, chart_type='{C}', interactive=True, title:str=None, title_css:dict=None,\n        options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**{U:B[U],V:B[V],A:B[A],R:B[R]},**c,**K}}
		return D
	def G(chart_type=A1):return{N:f"def plot(chart_type='{chart_type}', title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)",E:'',O:{},P:{**L,**{A:B[A],**K}}}
	def T(chart_type=A2):
		C=chart_type
		if C==A3:D={N:f"def plot(x:list, y:list, shaded_background:list, legend:list=None, chart_type='{C}', title:str=None, title_css:dict=None, \n    options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I],f:B[f]},P:{**{A:B[A],R:B[R]},**K}}
		elif C==A4:D={N:f"def plot(x:list, ohlcv:list, legend:list=None, chart_type='{C}', title:str=None, title_css:dict=None,\n    options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],'ohlcv':B[I]},P:{**L,**{A:B[A],R:B[R]},**K}}
		else:D={N:f"def plot(x:list, y:list, legend:list=None, chart_type='{C}', title:str=None, title_css:dict=None,\n    options:dict=None, width='60%', height=750)",E:'',O:{H:B[H],I:B[I]},P:{**L,**{A:B[A],R:B[R]},**K}}
		return D
	def b(chart_type=A5):
		G="def plot(chart_type='";C=chart_type;D=G+str(C)+"', gauge={'value':10, 'min':1, 'max':100}, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)";F={**{A:B[A],**K}}
		if C==A6:F={**{X:B[X],Y:B[Y]},**L,**{A:B[A]},**K};D=G+str(C)+"', gauge={'value':10, 'min':1, 'max':100}, gauge_zones:list=None, gauge_zones_labels:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)"
		elif C==A7:F={X:B[X],Y:B[Y],u:B[u],**L,**{A:B[A]},**K};D=G+str(C)+"', gauge={'value':10, 'min':1, 'max':100}, gauge_zones:list=None, gauge_zones_labels:list=None, gauge_zones_height:list=None, title:str=None, title_css:dict=None, options:dict=None, width='60%', height=750)"
		return{N:D,E:'',O:{m:B[m]},P:{**L,**F}}
	Al={_A:{C:Q(_A),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_70f9b4e978()},z:{C:Q(z),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_a41f7c60bf()},A0:{C:Q(A0),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_27b2d023d7()},x:{C:Q(x),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_64cc708a29()},'pie':{C:Q('pie'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_564fa121c9()},'donut':{C:Q('donut'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_dae69db085()},'radar':{C:Q('radar'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_8b0f39c795()},y:{C:Q(y),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_86cfd11033()},'barH':{C:Q('barH'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_d0b0fef84e()},'polar':{C:Q('polar'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_0ba851808e()},'mixed':{C:Q('mixed'),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_69b899d6b8()},AH:{C:Q(AH),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_b518eeca82()},AI:{C:Q(AI),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_a41f7c60bf()},AJ:{C:Q(AJ),A:qube_a06b8a9b46.sparta_d4b90a937d(),D:qube_38471ca5d2.sparta_a4ce88dfcd()},A1:{C:G(A1),A:qube_72f063e814.sparta_3f57404b13(),D:qube_8177faf6a3.sparta_79f0d7b3b4()},AK:{C:G(AK),A:qube_72f063e814.sparta_011582184f(),D:qube_8177faf6a3.sparta_1673f33194()},AL:{C:G(AL),A:qube_72f063e814.sparta_8a7ffee74b(),D:qube_8177faf6a3.sparta_56c69f5b86()},AM:{C:G(AM),A:qube_72f063e814.sparta_f831b8fdf2(),D:qube_8177faf6a3.sparta_ccac56f181()},AN:{C:G(AN),A:qube_72f063e814.sparta_7ced0e0b76(),D:qube_8177faf6a3.sparta_d90c5b2797()},AO:{C:G(AO),A:qube_72f063e814.sparta_d695a37b40(),D:qube_8177faf6a3.sparta_afcf3f4669()},'forex':{C:G('forex'),A:qube_72f063e814.sparta_91e7273c5a(),D:qube_8177faf6a3.sparta_2f58b2729d()},A8:{C:G(A8),A:qube_72f063e814.sparta_0acdc9fadf(),D:qube_8177faf6a3.sparta_2f58b2729d(A8)},AP:{C:G(AP),A:qube_72f063e814.sparta_30ad2afcb7(),D:qube_8177faf6a3.sparta_a284b28330()},AQ:{C:G(AQ),A:qube_72f063e814.sparta_ec0a6a5266(),D:qube_8177faf6a3.sparta_79f0d7b3b4()},AR:{C:G(AR),A:qube_72f063e814.sparta_30205e4777(),D:qube_8177faf6a3.sparta_0abab2d5bd()},A9:{C:G(A9),A:qube_72f063e814.sparta_af08554706(),D:qube_8177faf6a3.sparta_79f0d7b3b4(A9)},AS:{C:G(AS),A:qube_72f063e814.sparta_5b5f96de8c(),D:qube_8177faf6a3.sparta_24198db376()},AA:{C:G(AA),A:qube_72f063e814.sparta_430df918c1(),D:qube_8177faf6a3.sparta_79f0d7b3b4(AA)},AT:{C:G(AT),A:qube_72f063e814.sparta_a23b6e3faf(),D:qube_8177faf6a3.sparta_9fd36bfdc8()},AU:{C:G(AU),A:qube_72f063e814.sparta_8ac02418e7(),D:qube_8177faf6a3.sparta_1b150082c3()},AB:{C:G(AB),A:qube_72f063e814.sparta_5f0e87a66b(),D:qube_8177faf6a3.sparta_79f0d7b3b4(AB)},AC:{C:G(AC),A:qube_72f063e814.sparta_988d935fcd(),D:qube_8177faf6a3.sparta_79f0d7b3b4(AC)},AD:{C:G(AD),A:qube_72f063e814.sparta_2fc9a4aff7(),D:qube_8177faf6a3.sparta_79f0d7b3b4(AD)},AV:{C:G(AV),A:qube_72f063e814.sparta_6362546ef8(),D:qube_8177faf6a3.sparta_2788391bfa()},AW:{C:G(AW),A:qube_72f063e814.sparta_515fc48505(),D:qube_8177faf6a3.sparta_58fbd6aa50()},A4:{C:T(A4),A:M,D:qube_0b0e558076.sparta_e85094346e()},A2:{C:T(A2),A:M,D:qube_0b0e558076.sparta_ff6b898c6e()},AX:{C:T(AX),A:M,D:qube_0b0e558076.sparta_25f5ca70f3()},AY:{C:T(AY),A:M,D:qube_0b0e558076.sparta_d6fb614430()},AZ:{C:T(AZ),A:M,D:qube_0b0e558076.sparta_fc51447de4()},A3:{C:T(A3),A:M,D:qube_0b0e558076.sparta_bbd0c67b81()},Aa:{C:T(Aa),A:M,D:qube_0b0e558076.sparta_3e553803e8()},Ab:{C:T(Ab),A:M,D:qube_0b0e558076.sparta_91b9e4919e()},Ac:{C:T(Ac),A:M,D:qube_0b0e558076.sparta_9224150573()},A5:{C:b(A5),A:qube_275a9dd8de.sparta_c65c0fd101(),D:qube_59e682fcc4.sparta_c8265475f7()},Ad:{C:b(Ad),A:qube_275a9dd8de.sparta_f6839e6614(),D:qube_59e682fcc4.sparta_5110af8872()},A6:{C:b(A6),A:qube_275a9dd8de.sparta_6d01cca4ef(),D:qube_59e682fcc4.sparta_d573a66515()},A7:{C:b(A7),A:qube_275a9dd8de.sparta_1a86407836(),D:qube_59e682fcc4.sparta_6457791cbd()},W:{C:Ae,A:M,D:qube_a13d292700.sparta_870f7bcfeb()},'quantstats':{C:Af,A:M,D:qube_a13d292700.sparta_e1d385ebe1()},'dynamicRescale':{C:Ah,A:M,D:qube_3e00966671.sparta_e179132bd6()},'regression':{C:Ai,A:M,D:qube_3e00966671.sparta_d5012d50e8()},'calendar':{C:Aj,A:M,D:qube_3e00966671.sparta_fb99f04360()},'wordcloud':{C:Ak,A:M,D:qube_3e00966671.sparta_29c9c74d7e()},'notebook':{C:Ag,A:M,D:qube_a13d292700.sparta_903b05b425()}};return Al
def sparta_c38c8b1e68(plot_type=_A):
	A=plot_type;F=sparta_282fe25a50()
	try:C=[B for B in F if B['ID']==A][0];D=C[_B];E=C['Name']
	except:D='';E=A.capitalize()
	B=sparta_e49a25953c()[A];B['plot_name']=E;B['plot_library']=D;return B