
# Flinter configuation file.


# These are all the regexp rules

# Set active to false is you want to skip  rule
# All are regexp rules, meaning you can add new rules simply by editing this file
# test your rule on https://regex101.com/ if needed

extension: py

regexp-rules:
  excessive-use-of-space:
    message: Except for indentation, single spaces are sufficient
    regexp: '(?<=\S)  +(?=[^\s#])'
    replacement: ' '

  missing-space-around-operator:
    message: Missing space around operator
    regexp: ([^\s=])({operators})([^\s=])
    replacement: \1 \2 \3

  missing-space-before-operator:
    message: Missing space before operator
    regexp: ([^\s=])({operators})(?=\s)
    replacement: \1 \2

  missing-space-after-operator:
    message: Missing space after operator
    regexp: (?<=\s)({operators})([^\s=])
    replacement: \1 \2

  missing-space-after-punctuation:
    message: Missing space after punctuation
    regexp: ({punctuations})(\S)
    replacement: \1 \2

  tabulation-insteadof-fourspaces:
    message: Should use 4 spaces instead of tabulation
    regexp: \t
    replacement: '    '

  one-space-before-comment:
    message: At least one space before comment
    regexp: (\S)\#
    replacement: \1 \#

  one-space-after-comment:
    message: Exactly one space after comment
    regexp: \#(\S)
    replacement: '# \1'
    include-comments: true

  trailing-whitespaces:
    message: Trailing whitespaces
    regexp: ([ \t])+$
    replacement: ''
    include-comments: true


# These are rules that span over multiple lines, not accessible by regexp
# If you want to edit these rules or add your own, two options:
# - ask us.
# - fork the code.
structure-rules:
  max-statements-in-context: 50
  max-declared-locals: 12
  min-varlen: 3
  max-varlen: 20
  max-arguments: 5
  min-arglen: 3
  max-arglen: 20
  max-nesting-levels: 5
  var-declaration: ([A-Za-z_]\w*(?:\s*,\s*[A-Za-z_]\w*)*)\s*=\s*\S


# These are the fortran syntax we use to parse the source
# A priori there is no need to edit, but Fortran is so vast in time...
syntax:
  operators:
    - "<"
    - ">"
    - "<="
    - ">="
    - "=="
    - "!="

  punctuations:
    - ','
    - ':'

  namespace_blocks:
    - class

  context_blocks:
    - def