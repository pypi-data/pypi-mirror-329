# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApplicationSetArgs', 'ApplicationSet']

@pulumi.input_type
class ApplicationSetArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input['ApplicationSetMetadataArgs'],
                 spec: pulumi.Input['ApplicationSetSpecArgs']):
        """
        The set of arguments for constructing a ApplicationSet resource.
        :param pulumi.Input['ApplicationSetMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ApplicationSetSpecArgs'] spec: ArgoCD application set resource spec.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ApplicationSetMetadataArgs']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ApplicationSetMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ApplicationSetSpecArgs']:
        """
        ArgoCD application set resource spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ApplicationSetSpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _ApplicationSetState:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['ApplicationSetMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['ApplicationSetSpecArgs']] = None):
        """
        Input properties used for looking up and filtering ApplicationSet resources.
        :param pulumi.Input['ApplicationSetMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ApplicationSetSpecArgs'] spec: ArgoCD application set resource spec.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApplicationSetMetadataArgs']]:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApplicationSetMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ApplicationSetSpecArgs']]:
        """
        ArgoCD application set resource spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ApplicationSetSpecArgs']]):
        pulumi.set(self, "spec", value)


class ApplicationSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['ApplicationSetMetadataArgs', 'ApplicationSetMetadataArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['ApplicationSetSpecArgs', 'ApplicationSetSpecArgsDict']]] = None,
                 __props__=None):
        """
        Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        # Clusters Generator
        clusters_selector = argocd.ApplicationSet("clusters_selector",
            metadata={
                "name": "clusters-selector",
            },
            spec={
                "generators": [{
                    "clusters": [{
                        "selector": {
                            "match_labels": {
                                "argocd.argoproj.io/secret-type": "cluster",
                            },
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}-clusters-selector",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argocd-example-apps/",
                            "target_revision": "HEAD",
                            "path": "guestbook",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Cluster Decision Resource Generator
        cluster_decision_resource = argocd.ApplicationSet("cluster_decision_resource",
            metadata={
                "name": "cluster-decision-resource",
            },
            spec={
                "generators": [{
                    "cluster_decision_resources": [{
                        "config_map_ref": "my-configmap",
                        "name": "quak",
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}-guestbook",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argocd-example-apps/",
                            "target_revision": "HEAD",
                            "path": "guestbook",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Git Generator - Directories
        git_directories = argocd.ApplicationSet("git_directories",
            metadata={
                "name": "git-directories",
            },
            spec={
                "generators": [{
                    "gits": [{
                        "repo_url": "https://github.com/argoproj/argo-cd.git",
                        "revision": "HEAD",
                        "directories": [
                            {
                                "path": "applicationset/examples/git-generator-directory/cluster-addons/*",
                            },
                            {
                                "path": "applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook",
                                "exclude": True,
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{path.basename}}-git-directories",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "{{path}}",
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "{{path.basename}}",
                        },
                    },
                },
            })
        # Git Generator - Files
        git_files = argocd.ApplicationSet("git_files",
            metadata={
                "name": "git-files",
            },
            spec={
                "generators": [{
                    "gits": [{
                        "repo_url": "https://github.com/argoproj/argo-cd.git",
                        "revision": "HEAD",
                        "files": [{
                            "path": "applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json",
                        }],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{cluster.name}}-git-files",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "applicationset/examples/git-generator-files-discovery/apps/guestbook",
                        }],
                        "destination": {
                            "server": "{{cluster.address}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        # List Generator
        list = argocd.ApplicationSet("list",
            metadata={
                "name": "list",
            },
            spec={
                "generators": [{
                    "lists": [{
                        "elements": [
                            {
                                "cluster": "engineering-dev",
                                "url": "https://kubernetes.default.svc",
                            },
                            {
                                "cluster": "engineering-prod",
                                "url": "https://kubernetes.default.svc",
                                "foo": "bar",
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{cluster}}-guestbook",
                    },
                    "spec": {
                        "project": "my-project",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "applicationset/examples/list-generator/guestbook/{{cluster}}",
                        }],
                        "destination": {
                            "server": "{{url}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        # Matrix Generator
        matrix = argocd.ApplicationSet("matrix",
            metadata={
                "name": "matrix",
            },
            spec={
                "generators": [{
                    "matrices": [{
                        "generators": [
                            {
                                "gits": [{
                                    "repo_url": "https://github.com/argoproj/argo-cd.git",
                                    "revision": "HEAD",
                                    "directories": [{
                                        "path": "applicationset/examples/matrix/cluster-addons/*",
                                    }],
                                }],
                            },
                            {
                                "clusters": [{
                                    "selector": {
                                        "match_labels": {
                                            "argocd.argoproj.io/secret-type": "cluster",
                                        },
                                    },
                                }],
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{path.basename}}-{{name}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "{{path}}",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "{{path.basename}}",
                        },
                    },
                },
            })
        # Merge Generator
        merge = argocd.ApplicationSet("merge",
            metadata={
                "name": "merge",
            },
            spec={
                "generators": [{
                    "merges": [{
                        "merge_keys": ["server"],
                        "generators": [
                            {
                                "clusters": [{
                                    "values": {
                                        "kafka": "true",
                                        "redis": "false",
                                    },
                                }],
                            },
                            {
                                "clusters": [{
                                    "selector": {
                                        "match_labels": {
                                            "use-kafka": "false",
                                        },
                                    },
                                    "values": {
                                        "kafka": "false",
                                    },
                                }],
                            },
                            {
                                "lists": [{
                                    "elements": [{
                                        "server": "https://2.4.6.8",
                                        "values.redis": "true",
                                    }],
                                }],
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "path": "app",
                            "target_revision": "HEAD",
                            "helm": {
                                "parameters": [
                                    {
                                        "name": "kafka",
                                        "value": "{{values.kafka}}",
                                    },
                                    {
                                        "name": "redis",
                                        "value": "{{values.redis}}",
                                    },
                                ],
                            },
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Pull Request Generator - GitHub
        pr_github = argocd.ApplicationSet("pr_github",
            metadata={
                "name": "pr-github",
            },
            spec={
                "generators": [{
                    "pull_requests": [{
                        "github": {
                            "api": "https://git.example.com/",
                            "owner": "myorg",
                            "repo": "myrepository",
                            "app_secret_name": "github-app-repo-creds",
                            "token_ref": {
                                "secret_name": "github-token",
                                "key": "token",
                            },
                            "labels": ["preview"],
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "myapp-{{branch}}-{{number}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/myorg/myrepo.git",
                            "path": "kubernetes/",
                            "target_revision": "{{head_sha}}",
                            "helm": {
                                "parameters": [{
                                    "name": "image.tag",
                                    "value": "pull-{{head_sha}}",
                                }],
                            },
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "default",
                        },
                    },
                },
            })
        # SCM Provider Generator - GitHub
        scm_github = argocd.ApplicationSet("scm_github",
            metadata={
                "name": "scm-github",
            },
            spec={
                "generators": [{
                    "scm_providers": [{
                        "github": {
                            "app_secret_name": "gh-app-repo-creds",
                            "organization": "myorg",
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{repository}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "{{url}}",
                            "path": "kubernetes/",
                            "target_revision": "{{branch}}",
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Progressive Sync - Rolling Update
        progressive_sync = argocd.ApplicationSet("progressive_sync",
            metadata={
                "name": "progressive-sync",
            },
            spec={
                "generators": [{
                    "lists": [{
                        "elements": [
                            {
                                "cluster": "engineering-dev",
                                "url": "https://1.2.3.4",
                                "env": "env-dev",
                            },
                            {
                                "cluster": "engineering-qa",
                                "url": "https://2.4.6.8",
                                "env": "env-qa",
                            },
                            {
                                "cluster": "engineering-prod",
                                "url": "https://9.8.7.6/",
                                "env": "env-prod",
                            },
                        ],
                    }],
                }],
                "strategy": {
                    "type": "RollingSync",
                    "rolling_syncs": [{
                        "steps": [
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-dev"],
                                }],
                            },
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-qa"],
                                }],
                                "max_update": "0",
                            },
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-prod"],
                                }],
                                "max_update": "10%",
                            },
                        ],
                    }],
                },
                "go_template": True,
                "template": {
                    "metadata": {
                        "name": "{{.cluster}}-guestbook",
                        "labels": {
                            "envLabel": "{{.env}}",
                        },
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/infra-team/cluster-deployments.git",
                            "path": "guestbook/{{.cluster}}",
                            "target_revision": "HEAD",
                        }],
                        "destination": {
                            "server": "{{.url}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApplicationSetMetadataArgs', 'ApplicationSetMetadataArgsDict']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[Union['ApplicationSetSpecArgs', 'ApplicationSetSpecArgsDict']] spec: ArgoCD application set resource spec.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApplicationSetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        # Clusters Generator
        clusters_selector = argocd.ApplicationSet("clusters_selector",
            metadata={
                "name": "clusters-selector",
            },
            spec={
                "generators": [{
                    "clusters": [{
                        "selector": {
                            "match_labels": {
                                "argocd.argoproj.io/secret-type": "cluster",
                            },
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}-clusters-selector",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argocd-example-apps/",
                            "target_revision": "HEAD",
                            "path": "guestbook",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Cluster Decision Resource Generator
        cluster_decision_resource = argocd.ApplicationSet("cluster_decision_resource",
            metadata={
                "name": "cluster-decision-resource",
            },
            spec={
                "generators": [{
                    "cluster_decision_resources": [{
                        "config_map_ref": "my-configmap",
                        "name": "quak",
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}-guestbook",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argocd-example-apps/",
                            "target_revision": "HEAD",
                            "path": "guestbook",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Git Generator - Directories
        git_directories = argocd.ApplicationSet("git_directories",
            metadata={
                "name": "git-directories",
            },
            spec={
                "generators": [{
                    "gits": [{
                        "repo_url": "https://github.com/argoproj/argo-cd.git",
                        "revision": "HEAD",
                        "directories": [
                            {
                                "path": "applicationset/examples/git-generator-directory/cluster-addons/*",
                            },
                            {
                                "path": "applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook",
                                "exclude": True,
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{path.basename}}-git-directories",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "{{path}}",
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "{{path.basename}}",
                        },
                    },
                },
            })
        # Git Generator - Files
        git_files = argocd.ApplicationSet("git_files",
            metadata={
                "name": "git-files",
            },
            spec={
                "generators": [{
                    "gits": [{
                        "repo_url": "https://github.com/argoproj/argo-cd.git",
                        "revision": "HEAD",
                        "files": [{
                            "path": "applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json",
                        }],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{cluster.name}}-git-files",
                    },
                    "spec": {
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "applicationset/examples/git-generator-files-discovery/apps/guestbook",
                        }],
                        "destination": {
                            "server": "{{cluster.address}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        # List Generator
        list = argocd.ApplicationSet("list",
            metadata={
                "name": "list",
            },
            spec={
                "generators": [{
                    "lists": [{
                        "elements": [
                            {
                                "cluster": "engineering-dev",
                                "url": "https://kubernetes.default.svc",
                            },
                            {
                                "cluster": "engineering-prod",
                                "url": "https://kubernetes.default.svc",
                                "foo": "bar",
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{cluster}}-guestbook",
                    },
                    "spec": {
                        "project": "my-project",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "applicationset/examples/list-generator/guestbook/{{cluster}}",
                        }],
                        "destination": {
                            "server": "{{url}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        # Matrix Generator
        matrix = argocd.ApplicationSet("matrix",
            metadata={
                "name": "matrix",
            },
            spec={
                "generators": [{
                    "matrices": [{
                        "generators": [
                            {
                                "gits": [{
                                    "repo_url": "https://github.com/argoproj/argo-cd.git",
                                    "revision": "HEAD",
                                    "directories": [{
                                        "path": "applicationset/examples/matrix/cluster-addons/*",
                                    }],
                                }],
                            },
                            {
                                "clusters": [{
                                    "selector": {
                                        "match_labels": {
                                            "argocd.argoproj.io/secret-type": "cluster",
                                        },
                                    },
                                }],
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{path.basename}}-{{name}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "target_revision": "HEAD",
                            "path": "{{path}}",
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "{{path.basename}}",
                        },
                    },
                },
            })
        # Merge Generator
        merge = argocd.ApplicationSet("merge",
            metadata={
                "name": "merge",
            },
            spec={
                "generators": [{
                    "merges": [{
                        "merge_keys": ["server"],
                        "generators": [
                            {
                                "clusters": [{
                                    "values": {
                                        "kafka": "true",
                                        "redis": "false",
                                    },
                                }],
                            },
                            {
                                "clusters": [{
                                    "selector": {
                                        "match_labels": {
                                            "use-kafka": "false",
                                        },
                                    },
                                    "values": {
                                        "kafka": "false",
                                    },
                                }],
                            },
                            {
                                "lists": [{
                                    "elements": [{
                                        "server": "https://2.4.6.8",
                                        "values.redis": "true",
                                    }],
                                }],
                            },
                        ],
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{name}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/argoproj/argo-cd.git",
                            "path": "app",
                            "target_revision": "HEAD",
                            "helm": {
                                "parameters": [
                                    {
                                        "name": "kafka",
                                        "value": "{{values.kafka}}",
                                    },
                                    {
                                        "name": "redis",
                                        "value": "{{values.redis}}",
                                    },
                                ],
                            },
                        }],
                        "destination": {
                            "server": "{{server}}",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Pull Request Generator - GitHub
        pr_github = argocd.ApplicationSet("pr_github",
            metadata={
                "name": "pr-github",
            },
            spec={
                "generators": [{
                    "pull_requests": [{
                        "github": {
                            "api": "https://git.example.com/",
                            "owner": "myorg",
                            "repo": "myrepository",
                            "app_secret_name": "github-app-repo-creds",
                            "token_ref": {
                                "secret_name": "github-token",
                                "key": "token",
                            },
                            "labels": ["preview"],
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "myapp-{{branch}}-{{number}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/myorg/myrepo.git",
                            "path": "kubernetes/",
                            "target_revision": "{{head_sha}}",
                            "helm": {
                                "parameters": [{
                                    "name": "image.tag",
                                    "value": "pull-{{head_sha}}",
                                }],
                            },
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "default",
                        },
                    },
                },
            })
        # SCM Provider Generator - GitHub
        scm_github = argocd.ApplicationSet("scm_github",
            metadata={
                "name": "scm-github",
            },
            spec={
                "generators": [{
                    "scm_providers": [{
                        "github": {
                            "app_secret_name": "gh-app-repo-creds",
                            "organization": "myorg",
                        },
                    }],
                }],
                "template": {
                    "metadata": {
                        "name": "{{repository}}",
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "{{url}}",
                            "path": "kubernetes/",
                            "target_revision": "{{branch}}",
                        }],
                        "destination": {
                            "server": "https://kubernetes.default.svc",
                            "namespace": "default",
                        },
                    },
                },
            })
        # Progressive Sync - Rolling Update
        progressive_sync = argocd.ApplicationSet("progressive_sync",
            metadata={
                "name": "progressive-sync",
            },
            spec={
                "generators": [{
                    "lists": [{
                        "elements": [
                            {
                                "cluster": "engineering-dev",
                                "url": "https://1.2.3.4",
                                "env": "env-dev",
                            },
                            {
                                "cluster": "engineering-qa",
                                "url": "https://2.4.6.8",
                                "env": "env-qa",
                            },
                            {
                                "cluster": "engineering-prod",
                                "url": "https://9.8.7.6/",
                                "env": "env-prod",
                            },
                        ],
                    }],
                }],
                "strategy": {
                    "type": "RollingSync",
                    "rolling_syncs": [{
                        "steps": [
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-dev"],
                                }],
                            },
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-qa"],
                                }],
                                "max_update": "0",
                            },
                            {
                                "match_expressions": [{
                                    "key": "envLabel",
                                    "operator": "In",
                                    "values": ["env-prod"],
                                }],
                                "max_update": "10%",
                            },
                        ],
                    }],
                },
                "go_template": True,
                "template": {
                    "metadata": {
                        "name": "{{.cluster}}-guestbook",
                        "labels": {
                            "envLabel": "{{.env}}",
                        },
                    },
                    "spec": {
                        "project": "default",
                        "sources": [{
                            "repo_url": "https://github.com/infra-team/cluster-deployments.git",
                            "path": "guestbook/{{.cluster}}",
                            "target_revision": "HEAD",
                        }],
                        "destination": {
                            "server": "{{.url}}",
                            "namespace": "guestbook",
                        },
                    },
                },
            })
        ```

        :param str resource_name: The name of the resource.
        :param ApplicationSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApplicationSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['ApplicationSetMetadataArgs', 'ApplicationSetMetadataArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['ApplicationSetSpecArgs', 'ApplicationSetSpecArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApplicationSetArgs.__new__(ApplicationSetArgs)

            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
        super(ApplicationSet, __self__).__init__(
            'argocd:index/applicationSet:ApplicationSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metadata: Optional[pulumi.Input[Union['ApplicationSetMetadataArgs', 'ApplicationSetMetadataArgsDict']]] = None,
            spec: Optional[pulumi.Input[Union['ApplicationSetSpecArgs', 'ApplicationSetSpecArgsDict']]] = None) -> 'ApplicationSet':
        """
        Get an existing ApplicationSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ApplicationSetMetadataArgs', 'ApplicationSetMetadataArgsDict']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[Union['ApplicationSetSpecArgs', 'ApplicationSetSpecArgsDict']] spec: ArgoCD application set resource spec.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApplicationSetState.__new__(_ApplicationSetState)

        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["spec"] = spec
        return ApplicationSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ApplicationSetMetadata']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ApplicationSetSpec']:
        """
        ArgoCD application set resource spec.
        """
        return pulumi.get(self, "spec")

