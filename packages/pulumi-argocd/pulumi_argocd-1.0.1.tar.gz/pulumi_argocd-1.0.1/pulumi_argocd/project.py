# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input['ProjectMetadataArgs'],
                 spec: pulumi.Input['ProjectSpecArgs']):
        """
        The set of arguments for constructing a Project resource.
        :param pulumi.Input['ProjectMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ProjectSpecArgs'] spec: ArgoCD AppProject spec.
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['ProjectMetadataArgs']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['ProjectMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['ProjectSpecArgs']:
        """
        ArgoCD AppProject spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['ProjectSpecArgs']):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['ProjectMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['ProjectSpecArgs']] = None):
        """
        Input properties used for looking up and filtering Project resources.
        :param pulumi.Input['ProjectMetadataArgs'] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input['ProjectSpecArgs'] spec: ArgoCD AppProject spec.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ProjectMetadataArgs']]:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ProjectMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ProjectSpecArgs']]:
        """
        ArgoCD AppProject spec.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ProjectSpecArgs']]):
        pulumi.set(self, "spec", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['ProjectMetadataArgs', 'ProjectMetadataArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['ProjectSpecArgs', 'ProjectSpecArgsDict']]] = None,
                 __props__=None):
        """
        Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        myproject = argocd.Project("myproject",
            metadata={
                "name": "myproject",
                "namespace": "argocd",
                "labels": {
                    "acceptance": "true",
                },
                "annotations": {
                    "this.is.a.really.long.nested.key": "yes, really!",
                },
            },
            spec={
                "description": "simple project",
                "source_namespaces": ["argocd"],
                "source_repos": ["*"],
                "destinations": [
                    {
                        "server": "https://kubernetes.default.svc",
                        "namespace": "default",
                    },
                    {
                        "server": "https://kubernetes.default.svc",
                        "namespace": "foo",
                    },
                    {
                        "name": "anothercluster",
                        "namespace": "bar",
                    },
                ],
                "cluster_resource_blacklists": [{
                    "group": "*",
                    "kind": "*",
                }],
                "cluster_resource_whitelists": [
                    {
                        "group": "rbac.authorization.k8s.io",
                        "kind": "ClusterRoleBinding",
                    },
                    {
                        "group": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                    },
                ],
                "namespace_resource_blacklists": [{
                    "group": "networking.k8s.io",
                    "kind": "Ingress",
                }],
                "namespace_resource_whitelists": [{
                    "group": "*",
                    "kind": "*",
                }],
                "orphaned_resources": {
                    "warn": True,
                    "ignores": [
                        {
                            "group": "apps/v1",
                            "kind": "Deployment",
                            "name": "ignored1",
                        },
                        {
                            "group": "apps/v1",
                            "kind": "Deployment",
                            "name": "ignored2",
                        },
                    ],
                },
                "roles": [
                    {
                        "name": "testrole",
                        "policies": [
                            "p, proj:myproject:testrole, applications, override, myproject/*, allow",
                            "p, proj:myproject:testrole, applications, sync, myproject/*, allow",
                            "p, proj:myproject:testrole, clusters, get, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, create, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, delete, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, update, myproject/*, allow",
                            "p, proj:myproject:testrole, logs, get, myproject/*, allow",
                            "p, proj:myproject:testrole, exec, create, myproject/*, allow",
                        ],
                    },
                    {
                        "name": "anotherrole",
                        "policies": [
                            "p, proj:myproject:testrole, applications, get, myproject/*, allow",
                            "p, proj:myproject:testrole, applications, sync, myproject/*, deny",
                        ],
                    },
                ],
                "sync_windows": [
                    {
                        "kind": "allow",
                        "applications": ["api-*"],
                        "clusters": ["*"],
                        "namespaces": ["*"],
                        "duration": "3600s",
                        "schedule": "10 1 * * *",
                        "manual_sync": True,
                    },
                    {
                        "kind": "deny",
                        "applications": ["foo"],
                        "clusters": ["in-cluster"],
                        "namespaces": ["default"],
                        "duration": "12h",
                        "schedule": "22 1 5 * *",
                        "manual_sync": False,
                        "timezone": "Europe/London",
                    },
                ],
                "signature_keys": [
                    "4AEE18F83AFDEB23",
                    "07E34825A909B250",
                ],
            })
        ```

        ## Import

        Projects can be imported using the project name.

        Example:

        ```sh
        $ pulumi import argocd:index/project:Project myproject myproject
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProjectMetadataArgs', 'ProjectMetadataArgsDict']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[Union['ProjectSpecArgs', 'ProjectSpecArgsDict']] spec: ArgoCD AppProject spec.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_argocd as argocd

        myproject = argocd.Project("myproject",
            metadata={
                "name": "myproject",
                "namespace": "argocd",
                "labels": {
                    "acceptance": "true",
                },
                "annotations": {
                    "this.is.a.really.long.nested.key": "yes, really!",
                },
            },
            spec={
                "description": "simple project",
                "source_namespaces": ["argocd"],
                "source_repos": ["*"],
                "destinations": [
                    {
                        "server": "https://kubernetes.default.svc",
                        "namespace": "default",
                    },
                    {
                        "server": "https://kubernetes.default.svc",
                        "namespace": "foo",
                    },
                    {
                        "name": "anothercluster",
                        "namespace": "bar",
                    },
                ],
                "cluster_resource_blacklists": [{
                    "group": "*",
                    "kind": "*",
                }],
                "cluster_resource_whitelists": [
                    {
                        "group": "rbac.authorization.k8s.io",
                        "kind": "ClusterRoleBinding",
                    },
                    {
                        "group": "rbac.authorization.k8s.io",
                        "kind": "ClusterRole",
                    },
                ],
                "namespace_resource_blacklists": [{
                    "group": "networking.k8s.io",
                    "kind": "Ingress",
                }],
                "namespace_resource_whitelists": [{
                    "group": "*",
                    "kind": "*",
                }],
                "orphaned_resources": {
                    "warn": True,
                    "ignores": [
                        {
                            "group": "apps/v1",
                            "kind": "Deployment",
                            "name": "ignored1",
                        },
                        {
                            "group": "apps/v1",
                            "kind": "Deployment",
                            "name": "ignored2",
                        },
                    ],
                },
                "roles": [
                    {
                        "name": "testrole",
                        "policies": [
                            "p, proj:myproject:testrole, applications, override, myproject/*, allow",
                            "p, proj:myproject:testrole, applications, sync, myproject/*, allow",
                            "p, proj:myproject:testrole, clusters, get, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, create, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, delete, myproject/*, allow",
                            "p, proj:myproject:testrole, repositories, update, myproject/*, allow",
                            "p, proj:myproject:testrole, logs, get, myproject/*, allow",
                            "p, proj:myproject:testrole, exec, create, myproject/*, allow",
                        ],
                    },
                    {
                        "name": "anotherrole",
                        "policies": [
                            "p, proj:myproject:testrole, applications, get, myproject/*, allow",
                            "p, proj:myproject:testrole, applications, sync, myproject/*, deny",
                        ],
                    },
                ],
                "sync_windows": [
                    {
                        "kind": "allow",
                        "applications": ["api-*"],
                        "clusters": ["*"],
                        "namespaces": ["*"],
                        "duration": "3600s",
                        "schedule": "10 1 * * *",
                        "manual_sync": True,
                    },
                    {
                        "kind": "deny",
                        "applications": ["foo"],
                        "clusters": ["in-cluster"],
                        "namespaces": ["default"],
                        "duration": "12h",
                        "schedule": "22 1 5 * *",
                        "manual_sync": False,
                        "timezone": "Europe/London",
                    },
                ],
                "signature_keys": [
                    "4AEE18F83AFDEB23",
                    "07E34825A909B250",
                ],
            })
        ```

        ## Import

        Projects can be imported using the project name.

        Example:

        ```sh
        $ pulumi import argocd:index/project:Project myproject myproject
        ```

        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['ProjectMetadataArgs', 'ProjectMetadataArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['ProjectSpecArgs', 'ProjectSpecArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            if metadata is None and not opts.urn:
                raise TypeError("Missing required property 'metadata'")
            __props__.__dict__["metadata"] = metadata
            if spec is None and not opts.urn:
                raise TypeError("Missing required property 'spec'")
            __props__.__dict__["spec"] = spec
        super(Project, __self__).__init__(
            'argocd:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metadata: Optional[pulumi.Input[Union['ProjectMetadataArgs', 'ProjectMetadataArgsDict']]] = None,
            spec: Optional[pulumi.Input[Union['ProjectSpecArgs', 'ProjectSpecArgsDict']]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['ProjectMetadataArgs', 'ProjectMetadataArgsDict']] metadata: Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        :param pulumi.Input[Union['ProjectSpecArgs', 'ProjectSpecArgsDict']] spec: ArgoCD AppProject spec.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["spec"] = spec
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ProjectMetadata']:
        """
        Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output['outputs.ProjectSpec']:
        """
        ArgoCD AppProject spec.
        """
        return pulumi.get(self, "spec")

