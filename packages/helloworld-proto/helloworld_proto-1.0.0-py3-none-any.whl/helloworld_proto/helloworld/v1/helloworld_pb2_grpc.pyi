"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import helloworld_proto.helloworld.v1.helloworld_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class GreeterServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    SayHello: grpc.UnaryUnaryMultiCallable[
        helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloRequest,
        helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloResponse,
    ]

class GreeterServiceAsyncStub:
    SayHello: grpc.aio.UnaryUnaryMultiCallable[
        helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloRequest,
        helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloResponse,
    ]

class GreeterServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def SayHello(
        self,
        request: helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloRequest,
        context: _ServicerContext,
    ) -> typing.Union[helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloResponse, collections.abc.Awaitable[helloworld_proto.helloworld.v1.helloworld_pb2.SayHelloResponse]]: ...

def add_GreeterServiceServicer_to_server(servicer: GreeterServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
