# Generated by generate_sdk_wrappers.py. DO NOT EDIT

from abc import ABCMeta
from dataclasses import dataclass, field
from typing import Any, Optional
from uuid import uuid4

from luminarycloud.tables import RectilinearTable, _param_name_to_table_type
from google.protobuf.message import Message as _Message

from luminarycloud.tables import RectilinearTable
from luminarycloud.types import Vector3
from luminarycloud.types.adfloat import _to_ad_proto, _from_ad_proto
from luminarycloud._proto.client import simulation_pb2 as clientpb
from luminarycloud._proto.client.entity_pb2 import EntityIdentifier
import luminarycloud.params.enum._enum_wrappers as enum

from luminarycloud.params.param_wrappers._lib import ParamGroupWrapper, create_unique_id


@dataclass(kw_only=True)
class ReferenceValues(ParamGroupWrapper[clientpb.ReferenceValues]):
    """Define reference values needed for computing forces and moments."""

    area: float = 1.0
    "Reference area for computing force and moment coefficients."
    length: float = 1.0
    "Generic reference length for computing moment coefficients."
    use_aero_moment_ref_lengths: bool = False
    "Separate reference lengths for pitching, rolling and yawing moments."
    pitch_length: float = 1.0
    "Reference length for computing pitching moment coefficients."
    roll_length: float = 1.0
    "Reference length for computing rolling moment coefficients."
    yaw_length: float = 1.0
    "Reference length for computing yawing moment coefficients."
    pressure: float = 101325.0
    "Absolute static reference pressure, exclusively for computing force and moment coefficients. This value is independent of the material reference pressure and it does not interact with physics inputs such as boundary conditions."
    temperature: float = 288.15
    "Reference temperature for computing force and moment coefficients."
    velocity: float = 1.0
    "Reference velocity magnitude for computing force and moment coefficients."

    def _to_proto(self) -> clientpb.ReferenceValues:
        _proto = clientpb.ReferenceValues()
        _proto.area_ref.CopyFrom(_to_ad_proto(self.area))
        _proto.length_ref.CopyFrom(_to_ad_proto(self.length))
        if self.use_aero_moment_ref_lengths is not None:
            _proto.use_aero_moment_ref_lengths = self.use_aero_moment_ref_lengths
        _proto.length_ref_pitch.CopyFrom(_to_ad_proto(self.pitch_length))
        _proto.length_ref_roll.CopyFrom(_to_ad_proto(self.roll_length))
        _proto.length_ref_yaw.CopyFrom(_to_ad_proto(self.yaw_length))
        _proto.p_ref.CopyFrom(_to_ad_proto(self.pressure))
        _proto.t_ref.CopyFrom(_to_ad_proto(self.temperature))
        _proto.v_ref.CopyFrom(_to_ad_proto(self.velocity))
        return _proto

    def _from_proto(self, proto: clientpb.ReferenceValues) -> None:
        self.area = _from_ad_proto(proto.area_ref)
        self.length = _from_ad_proto(proto.length_ref)
        self.use_aero_moment_ref_lengths = proto.use_aero_moment_ref_lengths
        self.pitch_length = _from_ad_proto(proto.length_ref_pitch)
        self.roll_length = _from_ad_proto(proto.length_ref_roll)
        self.yaw_length = _from_ad_proto(proto.length_ref_yaw)
        self.pressure = _from_ad_proto(proto.p_ref)
        self.temperature = _from_ad_proto(proto.t_ref)
        self.velocity = _from_ad_proto(proto.v_ref)
        return None
