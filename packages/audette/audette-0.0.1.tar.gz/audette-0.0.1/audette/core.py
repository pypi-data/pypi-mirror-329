"""The core package contains the `Chat` class central to this package."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['show', 'Chat']

# %% ../nbs/00_core.ipynb 3
import os
import requests
import json
from datetime import datetime
from IPython.display import Markdown
from fastcore.basics import patch

# %% ../nbs/00_core.ipynb 5
def show(string): return Markdown(string)

# %% ../nbs/00_core.ipynb 6
class Chat():
    def __init__(self, model):
        self.model = model
        self.usage = []
        self.context = []
        self.date = None
        self.history = []
        self.chatsdir = ''
        self.title = f'conversation-with-{self.model.split("/")[1].replace(":", "-")}'
        
    def __call__(self, prompt):
        self.context.append({"role": "user", "content": prompt})
        resp = requests.post(url="https://openrouter.ai/api/v1/chat/completions", 
                             headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"},
                             json={"model": self.model,
                                   "messages": self.context})
        ans = resp.json()['choices'][0]['message']
        self.context.append(ans)
        self.usage.append(resp.json()['usage'])
        self.date = resp.json()['created']
        self.history.append(resp.json())
        self.chatsdir = f"chats/{self.history[-1]['model']}/"
        return self._show(ans['content'])
        
    def _show(self, string): return Markdown(string)
        
    def usage_summary(self):
        intok = [u['prompt_tokens'] for u in self.usage]
        outok = [u['completion_tokens'] for u in self.usage]
        totok = [u['total_tokens'] for u in self.usage]
        print(f"Input tokens: {sum(intok)}\nOutput tokens: {sum(outok)}\nTotal tokens: {sum(totok)}")
        
    def forget_last(self):
        self.context = self.context[:-1]
        return self.context

# %% ../nbs/00_core.ipynb 7
@patch
def save_conversation(self:Chat, generate_title=True):
    conv = json.dumps(self.context, ensure_ascii=False, indent=2)
    time = datetime.fromtimestamp(self.date).strftime('%Y%m%d-%H%M%S')
    os.makedirs(self.chatsdir, exist_ok=True)
    if generate_title:
        self.context.append({"role": "user", "content": "Generate an all lower case title for our conversation connecting the words with hyphens (-) instead of spaces. Output nothing but the title."})
        resp = requests.post(url="https://openrouter.ai/api/v1/chat/completions", 
                             headers={"Authorization": f"Bearer {os.getenv('OPENROUTER_API_KEY')}"},
                             json={"model": self.model,
                                   "messages": self.context})
        self.usage.append(resp.json()['usage'])
        self.title = resp.json()['choices'][0]['message']['content']
    
    file_path = self.chatsdir + time + "-" + self.title + ".txt"
    with open(file_path, 'w') as f:
        f.write(conv)
    return "Saving complete!"
