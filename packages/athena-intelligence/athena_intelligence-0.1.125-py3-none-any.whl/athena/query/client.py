# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..errors.internal_server_error import InternalServerError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.data_frame_request_out import DataFrameRequestOut
from .types.query_execute_request_database_asset_ids import QueryExecuteRequestDatabaseAssetIds


class QueryClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def execute(
        self,
        *,
        sql_command: str,
        database_asset_ids: QueryExecuteRequestDatabaseAssetIds,
        request_options: typing.Optional[RequestOptions] = None
    ) -> DataFrameRequestOut:
        """
        Get the result of an SQL query over given assets.

        Parameters
        ----------
        sql_command : str
            SQL query string

        database_asset_ids : QueryExecuteRequestDatabaseAssetIds
            Single ID or list of asset IDs

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataFrameRequestOut
            Successful Response

        Examples
        --------
        from athena.client import Athena

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.query.execute(
            sql_command="sql_command",
            database_asset_ids="database_asset_ids",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/query/sql/code/execute",
            method="GET",
            params={"sql_command": sql_command, "database_asset_ids": jsonable_encoder(database_asset_ids)},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DataFrameRequestOut, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def execute_snippet(
        self, *, snippet_asset_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DataFrameRequestOut:
        """
        Get the result of an SQL query over given assets.

        Parameters
        ----------
        snippet_asset_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataFrameRequestOut
            Successful Response

        Examples
        --------
        from athena.client import Athena

        client = Athena(
            api_key="YOUR_API_KEY",
        )
        client.query.execute_snippet(
            snippet_asset_id="snippet_asset_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/v0/query/sql/snippet/execute",
            method="GET",
            params={"snippet_asset_id": snippet_asset_id},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DataFrameRequestOut, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncQueryClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def execute(
        self,
        *,
        sql_command: str,
        database_asset_ids: QueryExecuteRequestDatabaseAssetIds,
        request_options: typing.Optional[RequestOptions] = None
    ) -> DataFrameRequestOut:
        """
        Get the result of an SQL query over given assets.

        Parameters
        ----------
        sql_command : str
            SQL query string

        database_asset_ids : QueryExecuteRequestDatabaseAssetIds
            Single ID or list of asset IDs

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataFrameRequestOut
            Successful Response

        Examples
        --------
        from athena.client import AsyncAthena

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )
        await client.query.execute(
            sql_command="sql_command",
            database_asset_ids="database_asset_ids",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/query/sql/code/execute",
            method="GET",
            params={"sql_command": sql_command, "database_asset_ids": jsonable_encoder(database_asset_ids)},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DataFrameRequestOut, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def execute_snippet(
        self, *, snippet_asset_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DataFrameRequestOut:
        """
        Get the result of an SQL query over given assets.

        Parameters
        ----------
        snippet_asset_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DataFrameRequestOut
            Successful Response

        Examples
        --------
        from athena.client import AsyncAthena

        client = AsyncAthena(
            api_key="YOUR_API_KEY",
        )
        await client.query.execute_snippet(
            snippet_asset_id="snippet_asset_id",
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/v0/query/sql/snippet/execute",
            method="GET",
            params={"snippet_asset_id": snippet_asset_id},
            request_options=request_options,
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(DataFrameRequestOut, _response.json())  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 500:
            raise InternalServerError(pydantic_v1.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
