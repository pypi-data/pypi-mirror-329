[project]
name = "pydantic-djmodel"
version = "0.1.0"  # semantic-release
description = "pydantic-djmodel is a Python library that converts Pydantic BaseModels into Django ORM models."
readme = "README.md"
authors = [
  {name = "Ivan Ogasawara", email = "ivan.ogasawara@gmail.com"}
]
license = "MIT"
requires-python = ">=3.10,<4"
dependencies = [
  "typeguard (>=4.0)",
  "eval-type-backport (>=0.2.2)",
  "pydantic (>=2.10.6)",
  "django (>=5)",
]

[build-system]
requires = ["poetry-core>=2", "poetry>=2"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [
  {include = "pydantic_djmodel", from="src"},
]
include = ["src/pydantic_djmodel/py.typed"]

exclude = [
  ".git/*",
  ".env*",
]

[tool.poetry.group.dev.dependencies]
pytest = ">=7.3.2"
pytest-django = ">=4.10.0,<5.0.0"
pytest-cov = ">=4.1.0"
hypothesis = ">=6.0"
coverage = ">=7.2.7"
isort = ">=5.12.0"
pre-commit = ">=3.3.2"
flake8 = ">=4.0.1, <7"
ruff = ">=0.2.0"
mypy = ">=1.5.0"
bandit = ">=1.7.5"
pydocstyle = ">=6.3.0"
vulture = ">=2.7"
mccabe = ">=0.6.1"
ipython = "<8"
ipykernel = ">=6.0.0"
Jinja2 = ">=3.1.2"
mkdocs = ">=1.4.3"
mkdocs-exclude = ">=1.0.2"
mkdocs-jupyter = ">=0.24.1"
mkdocs-literate-nav = ">=0.6.0"
mkdocs-macros-plugin = ">=0.7.0,<1"
mkdocstrings = ">=0.21.2"
mkdocstrings-python = ">= 1.1.2"
mkdocs-gen-files = ">=0.5.0"
makim = "1.20.0"
# 'PosixPath' object has no attribute 'endswith'
virtualenv = "<=20.25.1"
fhir-resources = ">=8"


[tool.bandit]
exclude_dirs = ["tests"]
targets = "./"

[tool.isort]
ensure_newline_before_comments = true
line_length = 79
multi_line_output = 3
include_trailing_comma = true
skip_glob = ["docs/*", "*.egg-info"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
strict = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
exclude = ["scripts/"]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
DJANGO_SETTINGS_MODULE = "pydantic_djmodel._settings"

[tool.ruff]
line-length = 79
force-exclude = true
src = ["./"]
exclude = [
  'docs',
]
fix = true

[tool.ruff.lint]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "D",   # pydocstyle
  "YTT", # flake8-2020
  "RUF", # Ruff-specific rules
  "I001",  # isort
  "I", # Enables import sorting checks
]
fixable = ["I001"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
lines-between-types = 1

[tool.ruff.format]
quote-style = "single"

[tool.vulture]
min_confidence = 80
paths = ["./"]
sort_by_size = true
verbose = false
