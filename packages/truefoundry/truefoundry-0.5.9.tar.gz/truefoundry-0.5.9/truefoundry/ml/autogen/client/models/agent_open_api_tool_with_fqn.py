# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from truefoundry.ml.autogen.client.models.method import Method
from truefoundry.ml.autogen.client.models.openapi_spec import OpenapiSpec
from truefoundry.pydantic_v1 import BaseModel, Field, StrictStr, constr, validator


class AgentOpenAPIToolWithFQN(BaseModel):
    """
    AgentOpenAPIToolWithFQN
    """

    description: Optional[constr(strict=True, max_length=512)] = Field(
        default=None, description="+sort=2 +label=Description"
    )
    metadata: Dict[str, Any] = Field(
        default=...,
        description="+label=Metadata +docs=Key value pairs to store additional metadata +usage=Key value pairs to store additional metadata +uiType=JsonInput",
    )
    version_alias: Optional[constr(strict=True, max_length=128)] = Field(
        default=None,
        description="+label=Version Alias +usage=The version alias should start with 'v' followed by alphanumeric and it can include '.' and '-' in between (e.g. v1.0.0, v1-prod, v3-dev, etc) +docs=The version alias should start with 'v' followed by alphanumeric and it can include '.' and '-' in between (e.g. v1.0.0, v1-prod, v3-dev, etc) +message=The version alias should start with 'v' followed by alphanumeric and it can include '.' and '-' in between (e.g. v1.0.0, v1-prod, v3-dev, etc)",
    )
    name: Optional[constr(strict=True, max_length=256)] = Field(
        default=None,
        description="+sort=1 +label=Name +message=The name should start with lowercase alphabets  and can contain alphanumeric and can include '-' in between",
    )
    ml_repo: Optional[constr(strict=True)] = Field(
        default=None,
        description="+label=ML Repo +usage=name of the ML Repo +docs=name of the ML Repo +uiType=Hidden",
    )
    type: StrictStr = Field(default=..., description="+value=openapi-tool")
    openapi_spec: OpenapiSpec = Field(...)
    base_url: constr(strict=True) = Field(default=..., description="+sort=30")
    path: constr(strict=True, min_length=1) = Field(
        default=...,
        description="+sort=40 +uiType=MethodPathSelector +label=Method + Path +usage=Select one Method and Path for this tool",
    )
    method: Method = Field(default=..., description="+sort=50 +uiType=Hidden")
    headers: Optional[Dict[str, StrictStr]] = Field(
        default=None,
        description='+sort=60 +uiType=KV +uiProps={"allowSecrets":true,"secretConfig":{"enableNew":true,"hideOptions":true}}',
    )
    id: StrictStr = Field(...)
    fqn: StrictStr = Field(...)
    __properties = [
        "description",
        "metadata",
        "version_alias",
        "name",
        "ml_repo",
        "type",
        "openapi_spec",
        "base_url",
        "path",
        "method",
        "headers",
        "id",
        "fqn",
    ]

    @validator("version_alias")
    def version_alias_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^v[a-zA-Z0-9.-]*([a-zA-Z0-9]+)$", value):
            raise ValueError(
                r"must validate the regular expression /^v[a-zA-Z0-9.-]*([a-zA-Z0-9]+)$/"
            )
        return value

    @validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z0-9_\-]+$", value):
            raise ValueError(
                r"must validate the regular expression /^[A-Za-z0-9_\-]+$/"
            )
        return value

    @validator("ml_repo")
    def ml_repo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z][a-zA-Z0-9\-]{1,98}[a-zA-Z0-9]$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z][a-zA-Z0-9\-]{1,98}[a-zA-Z0-9]$/"
            )
        return value

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("openapi-tool",):
            raise ValueError("must be one of enum values ('openapi-tool')")
        return value

    @validator("base_url")
    def base_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(
            r"^(https?:\/\/)?(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(https?:\/\/)?(?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}(?:[-a-zA-Z0-9()@:%_\+.~#?&\/=]*)$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AgentOpenAPIToolWithFQN:
        """Create an instance of AgentOpenAPIToolWithFQN from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of openapi_spec
        if self.openapi_spec:
            _dict["openapi_spec"] = self.openapi_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AgentOpenAPIToolWithFQN:
        """Create an instance of AgentOpenAPIToolWithFQN from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AgentOpenAPIToolWithFQN.parse_obj(obj)

        _obj = AgentOpenAPIToolWithFQN.parse_obj(
            {
                "description": obj.get("description"),
                "metadata": obj.get("metadata"),
                "version_alias": obj.get("version_alias"),
                "name": obj.get("name"),
                "ml_repo": obj.get("ml_repo"),
                "type": obj.get("type"),
                "openapi_spec": OpenapiSpec.from_dict(obj.get("openapi_spec"))
                if obj.get("openapi_spec") is not None
                else None,
                "base_url": obj.get("base_url"),
                "path": obj.get("path"),
                "method": obj.get("method"),
                "headers": obj.get("headers"),
                "id": obj.get("id"),
                "fqn": obj.get("fqn"),
            }
        )
        return _obj
