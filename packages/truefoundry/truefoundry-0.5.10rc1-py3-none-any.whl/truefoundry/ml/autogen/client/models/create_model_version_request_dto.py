# coding: utf-8

"""
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, Dict, Optional

from truefoundry.ml.autogen.client.models.internal_metadata import InternalMetadata
from truefoundry.pydantic_v1 import BaseModel, Field, StrictInt, StrictStr


class CreateModelVersionRequestDto(BaseModel):
    """
    CreateModelVersionRequestDto
    """

    artifact_version_id: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    artifact_metadata: Optional[Dict[str, Any]] = None
    data_path: Optional[StrictStr] = None
    step: Optional[StrictInt] = None
    internal_metadata: Optional[InternalMetadata] = None
    __properties = [
        "artifact_version_id",
        "description",
        "artifact_metadata",
        "data_path",
        "step",
        "internal_metadata",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateModelVersionRequestDto:
        """Create an instance of CreateModelVersionRequestDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from truefoundry.pydantic_v1 by calling `to_dict()` of internal_metadata
        if self.internal_metadata:
            _dict["internal_metadata"] = self.internal_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateModelVersionRequestDto:
        """Create an instance of CreateModelVersionRequestDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateModelVersionRequestDto.parse_obj(obj)

        _obj = CreateModelVersionRequestDto.parse_obj(
            {
                "artifact_version_id": obj.get("artifact_version_id"),
                "description": obj.get("description"),
                "artifact_metadata": obj.get("artifact_metadata"),
                "data_path": obj.get("data_path"),
                "step": obj.get("step"),
                "internal_metadata": InternalMetadata.from_dict(
                    obj.get("internal_metadata")
                )
                if obj.get("internal_metadata") is not None
                else None,
            }
        )
        return _obj
