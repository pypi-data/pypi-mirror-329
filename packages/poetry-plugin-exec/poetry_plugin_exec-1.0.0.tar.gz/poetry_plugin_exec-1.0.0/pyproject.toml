[project]
name = "poetry-plugin-exec"
version = "1.0.0"
description = "Poetry plugin to configure and execute commands like npm run."
authors = [
    {name = "Marcos Alonso",email = "contact@marcosalonso.dev"}
]
readme = "README.md"
requires-python = ">=3.9,<4.0"
dependencies = [
    "poetry (>=2.1.0,<3.0.0)",
    "poetry-core (>=2.1.0,<3.0.0)",
]

[project.entry-points."poetry.application.plugin"]
exec = "poetry_plugin_exec.plugins:ExecApplicationPlugin"

[tool.poetry]
packages = [{include = "poetry_plugin_exec", from = "src"}]

[tool.poetry.group.dev.dependencies]
ruff = "^0.9.7"
mypy = "^1.15.0"

[tool.ruff]
fix = true
target-version = "1.0.0"
line-length = 88

[tool.ruff.lint]
unfixable = [
    "ERA", # do not autoremove commented out code
]
extend-select = [
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ERA", # flake8-eradicate/eradicate
    "I",   # isort
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PGH", # pygrep
    "RUF", # ruff checks
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "UP",  # pyupgrade
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
known-first-party = ["poetry_plugin_exec"]
required-imports = ["from __future__ import annotations"]

[tool.mypy]
namespace_packages = true
show_error_codes = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
]
strict = true
files = ["src", "tests"]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
