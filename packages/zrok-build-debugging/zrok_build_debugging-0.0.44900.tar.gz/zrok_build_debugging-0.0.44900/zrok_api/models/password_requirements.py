# coding: utf-8

"""
    zrok

    zrok client access  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PasswordRequirements(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'length': 'int',
        'require_capital': 'bool',
        'require_numeric': 'bool',
        'require_special': 'bool',
        'valid_special_characters': 'str'
    }

    attribute_map = {
        'length': 'length',
        'require_capital': 'requireCapital',
        'require_numeric': 'requireNumeric',
        'require_special': 'requireSpecial',
        'valid_special_characters': 'validSpecialCharacters'
    }

    def __init__(self, length=None, require_capital=None, require_numeric=None, require_special=None, valid_special_characters=None):  # noqa: E501
        """PasswordRequirements - a model defined in Swagger"""  # noqa: E501
        self._length = None
        self._require_capital = None
        self._require_numeric = None
        self._require_special = None
        self._valid_special_characters = None
        self.discriminator = None
        if length is not None:
            self.length = length
        if require_capital is not None:
            self.require_capital = require_capital
        if require_numeric is not None:
            self.require_numeric = require_numeric
        if require_special is not None:
            self.require_special = require_special
        if valid_special_characters is not None:
            self.valid_special_characters = valid_special_characters

    @property
    def length(self):
        """Gets the length of this PasswordRequirements.  # noqa: E501


        :return: The length of this PasswordRequirements.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PasswordRequirements.


        :param length: The length of this PasswordRequirements.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def require_capital(self):
        """Gets the require_capital of this PasswordRequirements.  # noqa: E501


        :return: The require_capital of this PasswordRequirements.  # noqa: E501
        :rtype: bool
        """
        return self._require_capital

    @require_capital.setter
    def require_capital(self, require_capital):
        """Sets the require_capital of this PasswordRequirements.


        :param require_capital: The require_capital of this PasswordRequirements.  # noqa: E501
        :type: bool
        """

        self._require_capital = require_capital

    @property
    def require_numeric(self):
        """Gets the require_numeric of this PasswordRequirements.  # noqa: E501


        :return: The require_numeric of this PasswordRequirements.  # noqa: E501
        :rtype: bool
        """
        return self._require_numeric

    @require_numeric.setter
    def require_numeric(self, require_numeric):
        """Sets the require_numeric of this PasswordRequirements.


        :param require_numeric: The require_numeric of this PasswordRequirements.  # noqa: E501
        :type: bool
        """

        self._require_numeric = require_numeric

    @property
    def require_special(self):
        """Gets the require_special of this PasswordRequirements.  # noqa: E501


        :return: The require_special of this PasswordRequirements.  # noqa: E501
        :rtype: bool
        """
        return self._require_special

    @require_special.setter
    def require_special(self, require_special):
        """Sets the require_special of this PasswordRequirements.


        :param require_special: The require_special of this PasswordRequirements.  # noqa: E501
        :type: bool
        """

        self._require_special = require_special

    @property
    def valid_special_characters(self):
        """Gets the valid_special_characters of this PasswordRequirements.  # noqa: E501


        :return: The valid_special_characters of this PasswordRequirements.  # noqa: E501
        :rtype: str
        """
        return self._valid_special_characters

    @valid_special_characters.setter
    def valid_special_characters(self, valid_special_characters):
        """Sets the valid_special_characters of this PasswordRequirements.


        :param valid_special_characters: The valid_special_characters of this PasswordRequirements.  # noqa: E501
        :type: str
        """

        self._valid_special_characters = valid_special_characters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PasswordRequirements, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordRequirements):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
