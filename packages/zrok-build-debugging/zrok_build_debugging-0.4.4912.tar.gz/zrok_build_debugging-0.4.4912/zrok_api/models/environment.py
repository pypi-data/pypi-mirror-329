# coding: utf-8

"""
    zrok

    zrok client access  # noqa: E501

    OpenAPI spec version: 0.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Environment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'host': 'str',
        'address': 'str',
        'z_id': 'str',
        'activity': 'SparkData',
        'limited': 'bool',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'description': 'description',
        'host': 'host',
        'address': 'address',
        'z_id': 'zId',
        'activity': 'activity',
        'limited': 'limited',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, description=None, host=None, address=None, z_id=None, activity=None, limited=None, created_at=None, updated_at=None):  # noqa: E501
        """Environment - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._host = None
        self._address = None
        self._z_id = None
        self._activity = None
        self._limited = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if host is not None:
            self.host = host
        if address is not None:
            self.address = address
        if z_id is not None:
            self.z_id = z_id
        if activity is not None:
            self.activity = activity
        if limited is not None:
            self.limited = limited
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def description(self):
        """Gets the description of this Environment.  # noqa: E501


        :return: The description of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Environment.


        :param description: The description of this Environment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def host(self):
        """Gets the host of this Environment.  # noqa: E501


        :return: The host of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Environment.


        :param host: The host of this Environment.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def address(self):
        """Gets the address of this Environment.  # noqa: E501


        :return: The address of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Environment.


        :param address: The address of this Environment.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def z_id(self):
        """Gets the z_id of this Environment.  # noqa: E501


        :return: The z_id of this Environment.  # noqa: E501
        :rtype: str
        """
        return self._z_id

    @z_id.setter
    def z_id(self, z_id):
        """Sets the z_id of this Environment.


        :param z_id: The z_id of this Environment.  # noqa: E501
        :type: str
        """

        self._z_id = z_id

    @property
    def activity(self):
        """Gets the activity of this Environment.  # noqa: E501


        :return: The activity of this Environment.  # noqa: E501
        :rtype: SparkData
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this Environment.


        :param activity: The activity of this Environment.  # noqa: E501
        :type: SparkData
        """

        self._activity = activity

    @property
    def limited(self):
        """Gets the limited of this Environment.  # noqa: E501


        :return: The limited of this Environment.  # noqa: E501
        :rtype: bool
        """
        return self._limited

    @limited.setter
    def limited(self, limited):
        """Sets the limited of this Environment.


        :param limited: The limited of this Environment.  # noqa: E501
        :type: bool
        """

        self._limited = limited

    @property
    def created_at(self):
        """Gets the created_at of this Environment.  # noqa: E501


        :return: The created_at of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Environment.


        :param created_at: The created_at of this Environment.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Environment.  # noqa: E501


        :return: The updated_at of this Environment.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Environment.


        :param updated_at: The updated_at of this Environment.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Environment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
