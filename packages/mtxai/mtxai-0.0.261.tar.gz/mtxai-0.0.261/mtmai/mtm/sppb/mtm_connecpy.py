# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtm/sppb/mtm.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtm.sppb.mtm_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class MtmService(Protocol):
    async def Oauth2LoginHook(self, req: _pb2.Oauth2LoginHookRequest, ctx: ServiceContext) -> _pb2.AuthToken: ...
    async def Login(self, req: _pb2.LoginReq, ctx: ServiceContext) -> _pb2.LoginReply: ...
    async def Register(self, req: _pb2.RegisterReq, ctx: ServiceContext) -> _pb2.RegisterReply: ...
    async def GetMeta(self, req: _pb2.GetMetaReq, ctx: ServiceContext) -> _pb2.GetMetaRes: ...
    async def PullLogs(self, req: _pb2.PullLogReq, ctx: ServiceContext) -> _pb2.PullLogRes: ...
    async def MtmServerList(self, req: _pb2.MtmServerListReq, ctx: ServiceContext) -> _pb2.MtmServerListRes: ...
    async def ServiceMeta(self, req: _pb2.ServiceMetaReq, ctx: ServiceContext) -> _pb2.ServiceMetaRes: ...
    async def Search(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    async def SlugPage(self, req: _pb2.SlugReq, ctx: ServiceContext) -> _pb2.SlugRes: ...
    async def Userinfo(self, req: _pb2.Empty, ctx: ServiceContext) -> _pb2.UserinfoRes: ...
    async def BlogPostList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    async def BlogPostGet(self, req: _pb2.BlogPostGetReq, ctx: ServiceContext) -> _pb2.BlogPost: ...
    async def BlogPostCreate(self, req: _pb2.BlogPostCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def BlogPostUpdate(self, req: _pb2.BlogPostUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def BlogPostDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def BlogPostImport(self, req: _pb2.BlogPostImportReq, ctx: ServiceContext) -> _pb2.BlogPost: ...
    async def BlogCategorieList(self, req: _pb2.BlogCategorieListReq, ctx: ServiceContext) -> _pb2.BlogCategorieListReply: ...
    async def BlogCategorieGet(self, req: _pb2.BlogCategorieGetReq, ctx: ServiceContext) -> _pb2.BlogCategorie: ...
    async def BlogCategorieCreate(self, req: _pb2.BlogCategorieCreateReq, ctx: ServiceContext) -> _pb2.BlogCategorieCreateReply: ...
    async def BlogCategorieUpdate(self, req: _pb2.BlogCategorieUpdateReq, ctx: ServiceContext) -> _pb2.BlogCategorieUpdateReqply: ...
    async def BlogCategorieDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def BlogClean(self, req: _pb2.BlogCleanReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    async def SiteGet(self, req: _pb2.SiteGetReq, ctx: ServiceContext) -> _pb2.Site: ...
    async def SiteCreate(self, req: _pb2.SiteCreateReq, ctx: ServiceContext) -> _pb2.SiteCreateRes: ...
    async def SiteUpdate(self, req: _pb2.SiteUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteImport(self, req: _pb2.SiteImportReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteSetupCftunnel(self, req: _pb2.SiteSetupCftunnelReq, ctx: ServiceContext) -> _pb2.SiteSetupCftunnelReply: ...
    async def SiteHostList(self, req: _pb2.SiteHostListReq, ctx: ServiceContext) -> _pb2.SiteHostListReply: ...
    async def SiteHostGet(self, req: _pb2.SiteHostGetReq, ctx: ServiceContext) -> _pb2.SiteHost: ...
    async def SiteHostCreate(self, req: _pb2.SiteHostCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteHostUpdate(self, req: _pb2.SiteHostUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def SiteHostDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def FormList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    async def FormGet(self, req: _pb2.FormGetReq, ctx: ServiceContext) -> _pb2.FormSchema: ...
    async def FormCreate(self, req: _pb2.FormCreateReq, ctx: ServiceContext) -> _pb2.FormSchema: ...
    async def ArtContentClassify(self, req: _pb2.ArtContentClassifyReq, ctx: ServiceContext) -> _pb2.ArtContentClassifyReply: ...
    async def ArtRewrite(self, req: _pb2.ArtRewriteReq, ctx: ServiceContext) -> _pb2.ArtRewriteReply: ...


class MtmServiceServer(ConnecpyServer):
    def __init__(self, *, service: MtmService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.MtmService"
        self._endpoints = {
            "Oauth2LoginHook": Endpoint[_pb2.Oauth2LoginHookRequest, _pb2.AuthToken](
                service_name="MtmService",
                name="Oauth2LoginHook",
                function=getattr(service, "Oauth2LoginHook"),
                input=_pb2.Oauth2LoginHookRequest,
                output=_pb2.AuthToken,
            ),
            "Login": Endpoint[_pb2.LoginReq, _pb2.LoginReply](
                service_name="MtmService",
                name="Login",
                function=getattr(service, "Login"),
                input=_pb2.LoginReq,
                output=_pb2.LoginReply,
            ),
            "Register": Endpoint[_pb2.RegisterReq, _pb2.RegisterReply](
                service_name="MtmService",
                name="Register",
                function=getattr(service, "Register"),
                input=_pb2.RegisterReq,
                output=_pb2.RegisterReply,
            ),
            "GetMeta": Endpoint[_pb2.GetMetaReq, _pb2.GetMetaRes](
                service_name="MtmService",
                name="GetMeta",
                function=getattr(service, "GetMeta"),
                input=_pb2.GetMetaReq,
                output=_pb2.GetMetaRes,
            ),
            "PullLogs": Endpoint[_pb2.PullLogReq, _pb2.PullLogRes](
                service_name="MtmService",
                name="PullLogs",
                function=getattr(service, "PullLogs"),
                input=_pb2.PullLogReq,
                output=_pb2.PullLogRes,
            ),
            "MtmServerList": Endpoint[_pb2.MtmServerListReq, _pb2.MtmServerListRes](
                service_name="MtmService",
                name="MtmServerList",
                function=getattr(service, "MtmServerList"),
                input=_pb2.MtmServerListReq,
                output=_pb2.MtmServerListRes,
            ),
            "ServiceMeta": Endpoint[_pb2.ServiceMetaReq, _pb2.ServiceMetaRes](
                service_name="MtmService",
                name="ServiceMeta",
                function=getattr(service, "ServiceMeta"),
                input=_pb2.ServiceMetaReq,
                output=_pb2.ServiceMetaRes,
            ),
            "Search": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="Search",
                function=getattr(service, "Search"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "SlugPage": Endpoint[_pb2.SlugReq, _pb2.SlugRes](
                service_name="MtmService",
                name="SlugPage",
                function=getattr(service, "SlugPage"),
                input=_pb2.SlugReq,
                output=_pb2.SlugRes,
            ),
            "Userinfo": Endpoint[_pb2.Empty, _pb2.UserinfoRes](
                service_name="MtmService",
                name="Userinfo",
                function=getattr(service, "Userinfo"),
                input=_pb2.Empty,
                output=_pb2.UserinfoRes,
            ),
            "BlogPostList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="BlogPostList",
                function=getattr(service, "BlogPostList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "BlogPostGet": Endpoint[_pb2.BlogPostGetReq, _pb2.BlogPost](
                service_name="MtmService",
                name="BlogPostGet",
                function=getattr(service, "BlogPostGet"),
                input=_pb2.BlogPostGetReq,
                output=_pb2.BlogPost,
            ),
            "BlogPostCreate": Endpoint[_pb2.BlogPostCreateReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostCreate",
                function=getattr(service, "BlogPostCreate"),
                input=_pb2.BlogPostCreateReq,
                output=_pb2.Result,
            ),
            "BlogPostUpdate": Endpoint[_pb2.BlogPostUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostUpdate",
                function=getattr(service, "BlogPostUpdate"),
                input=_pb2.BlogPostUpdateReq,
                output=_pb2.Result,
            ),
            "BlogPostDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostDelete",
                function=getattr(service, "BlogPostDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "BlogPostImport": Endpoint[_pb2.BlogPostImportReq, _pb2.BlogPost](
                service_name="MtmService",
                name="BlogPostImport",
                function=getattr(service, "BlogPostImport"),
                input=_pb2.BlogPostImportReq,
                output=_pb2.BlogPost,
            ),
            "BlogCategorieList": Endpoint[_pb2.BlogCategorieListReq, _pb2.BlogCategorieListReply](
                service_name="MtmService",
                name="BlogCategorieList",
                function=getattr(service, "BlogCategorieList"),
                input=_pb2.BlogCategorieListReq,
                output=_pb2.BlogCategorieListReply,
            ),
            "BlogCategorieGet": Endpoint[_pb2.BlogCategorieGetReq, _pb2.BlogCategorie](
                service_name="MtmService",
                name="BlogCategorieGet",
                function=getattr(service, "BlogCategorieGet"),
                input=_pb2.BlogCategorieGetReq,
                output=_pb2.BlogCategorie,
            ),
            "BlogCategorieCreate": Endpoint[_pb2.BlogCategorieCreateReq, _pb2.BlogCategorieCreateReply](
                service_name="MtmService",
                name="BlogCategorieCreate",
                function=getattr(service, "BlogCategorieCreate"),
                input=_pb2.BlogCategorieCreateReq,
                output=_pb2.BlogCategorieCreateReply,
            ),
            "BlogCategorieUpdate": Endpoint[_pb2.BlogCategorieUpdateReq, _pb2.BlogCategorieUpdateReqply](
                service_name="MtmService",
                name="BlogCategorieUpdate",
                function=getattr(service, "BlogCategorieUpdate"),
                input=_pb2.BlogCategorieUpdateReq,
                output=_pb2.BlogCategorieUpdateReqply,
            ),
            "BlogCategorieDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="BlogCategorieDelete",
                function=getattr(service, "BlogCategorieDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "BlogClean": Endpoint[_pb2.BlogCleanReq, _pb2.Result](
                service_name="MtmService",
                name="BlogClean",
                function=getattr(service, "BlogClean"),
                input=_pb2.BlogCleanReq,
                output=_pb2.Result,
            ),
            "SiteList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="SiteList",
                function=getattr(service, "SiteList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "SiteGet": Endpoint[_pb2.SiteGetReq, _pb2.Site](
                service_name="MtmService",
                name="SiteGet",
                function=getattr(service, "SiteGet"),
                input=_pb2.SiteGetReq,
                output=_pb2.Site,
            ),
            "SiteCreate": Endpoint[_pb2.SiteCreateReq, _pb2.SiteCreateRes](
                service_name="MtmService",
                name="SiteCreate",
                function=getattr(service, "SiteCreate"),
                input=_pb2.SiteCreateReq,
                output=_pb2.SiteCreateRes,
            ),
            "SiteUpdate": Endpoint[_pb2.SiteUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteUpdate",
                function=getattr(service, "SiteUpdate"),
                input=_pb2.SiteUpdateReq,
                output=_pb2.Result,
            ),
            "SiteDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="SiteDelete",
                function=getattr(service, "SiteDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "SiteImport": Endpoint[_pb2.SiteImportReq, _pb2.Result](
                service_name="MtmService",
                name="SiteImport",
                function=getattr(service, "SiteImport"),
                input=_pb2.SiteImportReq,
                output=_pb2.Result,
            ),
            "SiteSetupCftunnel": Endpoint[_pb2.SiteSetupCftunnelReq, _pb2.SiteSetupCftunnelReply](
                service_name="MtmService",
                name="SiteSetupCftunnel",
                function=getattr(service, "SiteSetupCftunnel"),
                input=_pb2.SiteSetupCftunnelReq,
                output=_pb2.SiteSetupCftunnelReply,
            ),
            "SiteHostList": Endpoint[_pb2.SiteHostListReq, _pb2.SiteHostListReply](
                service_name="MtmService",
                name="SiteHostList",
                function=getattr(service, "SiteHostList"),
                input=_pb2.SiteHostListReq,
                output=_pb2.SiteHostListReply,
            ),
            "SiteHostGet": Endpoint[_pb2.SiteHostGetReq, _pb2.SiteHost](
                service_name="MtmService",
                name="SiteHostGet",
                function=getattr(service, "SiteHostGet"),
                input=_pb2.SiteHostGetReq,
                output=_pb2.SiteHost,
            ),
            "SiteHostCreate": Endpoint[_pb2.SiteHostCreateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostCreate",
                function=getattr(service, "SiteHostCreate"),
                input=_pb2.SiteHostCreateReq,
                output=_pb2.Result,
            ),
            "SiteHostUpdate": Endpoint[_pb2.SiteHostUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostUpdate",
                function=getattr(service, "SiteHostUpdate"),
                input=_pb2.SiteHostUpdateReq,
                output=_pb2.Result,
            ),
            "SiteHostDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostDelete",
                function=getattr(service, "SiteHostDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "FormList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="FormList",
                function=getattr(service, "FormList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "FormGet": Endpoint[_pb2.FormGetReq, _pb2.FormSchema](
                service_name="MtmService",
                name="FormGet",
                function=getattr(service, "FormGet"),
                input=_pb2.FormGetReq,
                output=_pb2.FormSchema,
            ),
            "FormCreate": Endpoint[_pb2.FormCreateReq, _pb2.FormSchema](
                service_name="MtmService",
                name="FormCreate",
                function=getattr(service, "FormCreate"),
                input=_pb2.FormCreateReq,
                output=_pb2.FormSchema,
            ),
            "ArtContentClassify": Endpoint[_pb2.ArtContentClassifyReq, _pb2.ArtContentClassifyReply](
                service_name="MtmService",
                name="ArtContentClassify",
                function=getattr(service, "ArtContentClassify"),
                input=_pb2.ArtContentClassifyReq,
                output=_pb2.ArtContentClassifyReply,
            ),
            "ArtRewrite": Endpoint[_pb2.ArtRewriteReq, _pb2.ArtRewriteReply](
                service_name="MtmService",
                name="ArtRewrite",
                function=getattr(service, "ArtRewrite"),
                input=_pb2.ArtRewriteReq,
                output=_pb2.ArtRewriteReply,
            ),
        }

    def serviceName(self):
        return "sppb.MtmService"


class MtmServiceSync(Protocol):
    def Oauth2LoginHook(self, req: _pb2.Oauth2LoginHookRequest, ctx: ServiceContext) -> _pb2.AuthToken: ...
    def Login(self, req: _pb2.LoginReq, ctx: ServiceContext) -> _pb2.LoginReply: ...
    def Register(self, req: _pb2.RegisterReq, ctx: ServiceContext) -> _pb2.RegisterReply: ...
    def GetMeta(self, req: _pb2.GetMetaReq, ctx: ServiceContext) -> _pb2.GetMetaRes: ...
    def PullLogs(self, req: _pb2.PullLogReq, ctx: ServiceContext) -> _pb2.PullLogRes: ...
    def MtmServerList(self, req: _pb2.MtmServerListReq, ctx: ServiceContext) -> _pb2.MtmServerListRes: ...
    def ServiceMeta(self, req: _pb2.ServiceMetaReq, ctx: ServiceContext) -> _pb2.ServiceMetaRes: ...
    def Search(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    def SlugPage(self, req: _pb2.SlugReq, ctx: ServiceContext) -> _pb2.SlugRes: ...
    def Userinfo(self, req: _pb2.Empty, ctx: ServiceContext) -> _pb2.UserinfoRes: ...
    def BlogPostList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    def BlogPostGet(self, req: _pb2.BlogPostGetReq, ctx: ServiceContext) -> _pb2.BlogPost: ...
    def BlogPostCreate(self, req: _pb2.BlogPostCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def BlogPostUpdate(self, req: _pb2.BlogPostUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def BlogPostDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def BlogPostImport(self, req: _pb2.BlogPostImportReq, ctx: ServiceContext) -> _pb2.BlogPost: ...
    def BlogCategorieList(self, req: _pb2.BlogCategorieListReq, ctx: ServiceContext) -> _pb2.BlogCategorieListReply: ...
    def BlogCategorieGet(self, req: _pb2.BlogCategorieGetReq, ctx: ServiceContext) -> _pb2.BlogCategorie: ...
    def BlogCategorieCreate(self, req: _pb2.BlogCategorieCreateReq, ctx: ServiceContext) -> _pb2.BlogCategorieCreateReply: ...
    def BlogCategorieUpdate(self, req: _pb2.BlogCategorieUpdateReq, ctx: ServiceContext) -> _pb2.BlogCategorieUpdateReqply: ...
    def BlogCategorieDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def BlogClean(self, req: _pb2.BlogCleanReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    def SiteGet(self, req: _pb2.SiteGetReq, ctx: ServiceContext) -> _pb2.Site: ...
    def SiteCreate(self, req: _pb2.SiteCreateReq, ctx: ServiceContext) -> _pb2.SiteCreateRes: ...
    def SiteUpdate(self, req: _pb2.SiteUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteImport(self, req: _pb2.SiteImportReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteSetupCftunnel(self, req: _pb2.SiteSetupCftunnelReq, ctx: ServiceContext) -> _pb2.SiteSetupCftunnelReply: ...
    def SiteHostList(self, req: _pb2.SiteHostListReq, ctx: ServiceContext) -> _pb2.SiteHostListReply: ...
    def SiteHostGet(self, req: _pb2.SiteHostGetReq, ctx: ServiceContext) -> _pb2.SiteHost: ...
    def SiteHostCreate(self, req: _pb2.SiteHostCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteHostUpdate(self, req: _pb2.SiteHostUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def SiteHostDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...
    def FormList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    def FormGet(self, req: _pb2.FormGetReq, ctx: ServiceContext) -> _pb2.FormSchema: ...
    def FormCreate(self, req: _pb2.FormCreateReq, ctx: ServiceContext) -> _pb2.FormSchema: ...
    def ArtContentClassify(self, req: _pb2.ArtContentClassifyReq, ctx: ServiceContext) -> _pb2.ArtContentClassifyReply: ...
    def ArtRewrite(self, req: _pb2.ArtRewriteReq, ctx: ServiceContext) -> _pb2.ArtRewriteReply: ...


class MtmServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: MtmServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.MtmService"
        self._endpoints = {
            "Oauth2LoginHook": Endpoint[_pb2.Oauth2LoginHookRequest, _pb2.AuthToken](
                service_name="MtmService",
                name="Oauth2LoginHook",
                function=getattr(service, "Oauth2LoginHook"),
                input=_pb2.Oauth2LoginHookRequest,
                output=_pb2.AuthToken,
            ),
            "Login": Endpoint[_pb2.LoginReq, _pb2.LoginReply](
                service_name="MtmService",
                name="Login",
                function=getattr(service, "Login"),
                input=_pb2.LoginReq,
                output=_pb2.LoginReply,
            ),
            "Register": Endpoint[_pb2.RegisterReq, _pb2.RegisterReply](
                service_name="MtmService",
                name="Register",
                function=getattr(service, "Register"),
                input=_pb2.RegisterReq,
                output=_pb2.RegisterReply,
            ),
            "GetMeta": Endpoint[_pb2.GetMetaReq, _pb2.GetMetaRes](
                service_name="MtmService",
                name="GetMeta",
                function=getattr(service, "GetMeta"),
                input=_pb2.GetMetaReq,
                output=_pb2.GetMetaRes,
            ),
            "PullLogs": Endpoint[_pb2.PullLogReq, _pb2.PullLogRes](
                service_name="MtmService",
                name="PullLogs",
                function=getattr(service, "PullLogs"),
                input=_pb2.PullLogReq,
                output=_pb2.PullLogRes,
            ),
            "MtmServerList": Endpoint[_pb2.MtmServerListReq, _pb2.MtmServerListRes](
                service_name="MtmService",
                name="MtmServerList",
                function=getattr(service, "MtmServerList"),
                input=_pb2.MtmServerListReq,
                output=_pb2.MtmServerListRes,
            ),
            "ServiceMeta": Endpoint[_pb2.ServiceMetaReq, _pb2.ServiceMetaRes](
                service_name="MtmService",
                name="ServiceMeta",
                function=getattr(service, "ServiceMeta"),
                input=_pb2.ServiceMetaReq,
                output=_pb2.ServiceMetaRes,
            ),
            "Search": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="Search",
                function=getattr(service, "Search"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "SlugPage": Endpoint[_pb2.SlugReq, _pb2.SlugRes](
                service_name="MtmService",
                name="SlugPage",
                function=getattr(service, "SlugPage"),
                input=_pb2.SlugReq,
                output=_pb2.SlugRes,
            ),
            "Userinfo": Endpoint[_pb2.Empty, _pb2.UserinfoRes](
                service_name="MtmService",
                name="Userinfo",
                function=getattr(service, "Userinfo"),
                input=_pb2.Empty,
                output=_pb2.UserinfoRes,
            ),
            "BlogPostList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="BlogPostList",
                function=getattr(service, "BlogPostList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "BlogPostGet": Endpoint[_pb2.BlogPostGetReq, _pb2.BlogPost](
                service_name="MtmService",
                name="BlogPostGet",
                function=getattr(service, "BlogPostGet"),
                input=_pb2.BlogPostGetReq,
                output=_pb2.BlogPost,
            ),
            "BlogPostCreate": Endpoint[_pb2.BlogPostCreateReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostCreate",
                function=getattr(service, "BlogPostCreate"),
                input=_pb2.BlogPostCreateReq,
                output=_pb2.Result,
            ),
            "BlogPostUpdate": Endpoint[_pb2.BlogPostUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostUpdate",
                function=getattr(service, "BlogPostUpdate"),
                input=_pb2.BlogPostUpdateReq,
                output=_pb2.Result,
            ),
            "BlogPostDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="BlogPostDelete",
                function=getattr(service, "BlogPostDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "BlogPostImport": Endpoint[_pb2.BlogPostImportReq, _pb2.BlogPost](
                service_name="MtmService",
                name="BlogPostImport",
                function=getattr(service, "BlogPostImport"),
                input=_pb2.BlogPostImportReq,
                output=_pb2.BlogPost,
            ),
            "BlogCategorieList": Endpoint[_pb2.BlogCategorieListReq, _pb2.BlogCategorieListReply](
                service_name="MtmService",
                name="BlogCategorieList",
                function=getattr(service, "BlogCategorieList"),
                input=_pb2.BlogCategorieListReq,
                output=_pb2.BlogCategorieListReply,
            ),
            "BlogCategorieGet": Endpoint[_pb2.BlogCategorieGetReq, _pb2.BlogCategorie](
                service_name="MtmService",
                name="BlogCategorieGet",
                function=getattr(service, "BlogCategorieGet"),
                input=_pb2.BlogCategorieGetReq,
                output=_pb2.BlogCategorie,
            ),
            "BlogCategorieCreate": Endpoint[_pb2.BlogCategorieCreateReq, _pb2.BlogCategorieCreateReply](
                service_name="MtmService",
                name="BlogCategorieCreate",
                function=getattr(service, "BlogCategorieCreate"),
                input=_pb2.BlogCategorieCreateReq,
                output=_pb2.BlogCategorieCreateReply,
            ),
            "BlogCategorieUpdate": Endpoint[_pb2.BlogCategorieUpdateReq, _pb2.BlogCategorieUpdateReqply](
                service_name="MtmService",
                name="BlogCategorieUpdate",
                function=getattr(service, "BlogCategorieUpdate"),
                input=_pb2.BlogCategorieUpdateReq,
                output=_pb2.BlogCategorieUpdateReqply,
            ),
            "BlogCategorieDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="BlogCategorieDelete",
                function=getattr(service, "BlogCategorieDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "BlogClean": Endpoint[_pb2.BlogCleanReq, _pb2.Result](
                service_name="MtmService",
                name="BlogClean",
                function=getattr(service, "BlogClean"),
                input=_pb2.BlogCleanReq,
                output=_pb2.Result,
            ),
            "SiteList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="SiteList",
                function=getattr(service, "SiteList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "SiteGet": Endpoint[_pb2.SiteGetReq, _pb2.Site](
                service_name="MtmService",
                name="SiteGet",
                function=getattr(service, "SiteGet"),
                input=_pb2.SiteGetReq,
                output=_pb2.Site,
            ),
            "SiteCreate": Endpoint[_pb2.SiteCreateReq, _pb2.SiteCreateRes](
                service_name="MtmService",
                name="SiteCreate",
                function=getattr(service, "SiteCreate"),
                input=_pb2.SiteCreateReq,
                output=_pb2.SiteCreateRes,
            ),
            "SiteUpdate": Endpoint[_pb2.SiteUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteUpdate",
                function=getattr(service, "SiteUpdate"),
                input=_pb2.SiteUpdateReq,
                output=_pb2.Result,
            ),
            "SiteDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="SiteDelete",
                function=getattr(service, "SiteDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "SiteImport": Endpoint[_pb2.SiteImportReq, _pb2.Result](
                service_name="MtmService",
                name="SiteImport",
                function=getattr(service, "SiteImport"),
                input=_pb2.SiteImportReq,
                output=_pb2.Result,
            ),
            "SiteSetupCftunnel": Endpoint[_pb2.SiteSetupCftunnelReq, _pb2.SiteSetupCftunnelReply](
                service_name="MtmService",
                name="SiteSetupCftunnel",
                function=getattr(service, "SiteSetupCftunnel"),
                input=_pb2.SiteSetupCftunnelReq,
                output=_pb2.SiteSetupCftunnelReply,
            ),
            "SiteHostList": Endpoint[_pb2.SiteHostListReq, _pb2.SiteHostListReply](
                service_name="MtmService",
                name="SiteHostList",
                function=getattr(service, "SiteHostList"),
                input=_pb2.SiteHostListReq,
                output=_pb2.SiteHostListReply,
            ),
            "SiteHostGet": Endpoint[_pb2.SiteHostGetReq, _pb2.SiteHost](
                service_name="MtmService",
                name="SiteHostGet",
                function=getattr(service, "SiteHostGet"),
                input=_pb2.SiteHostGetReq,
                output=_pb2.SiteHost,
            ),
            "SiteHostCreate": Endpoint[_pb2.SiteHostCreateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostCreate",
                function=getattr(service, "SiteHostCreate"),
                input=_pb2.SiteHostCreateReq,
                output=_pb2.Result,
            ),
            "SiteHostUpdate": Endpoint[_pb2.SiteHostUpdateReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostUpdate",
                function=getattr(service, "SiteHostUpdate"),
                input=_pb2.SiteHostUpdateReq,
                output=_pb2.Result,
            ),
            "SiteHostDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="MtmService",
                name="SiteHostDelete",
                function=getattr(service, "SiteHostDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
            "FormList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="MtmService",
                name="FormList",
                function=getattr(service, "FormList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "FormGet": Endpoint[_pb2.FormGetReq, _pb2.FormSchema](
                service_name="MtmService",
                name="FormGet",
                function=getattr(service, "FormGet"),
                input=_pb2.FormGetReq,
                output=_pb2.FormSchema,
            ),
            "FormCreate": Endpoint[_pb2.FormCreateReq, _pb2.FormSchema](
                service_name="MtmService",
                name="FormCreate",
                function=getattr(service, "FormCreate"),
                input=_pb2.FormCreateReq,
                output=_pb2.FormSchema,
            ),
            "ArtContentClassify": Endpoint[_pb2.ArtContentClassifyReq, _pb2.ArtContentClassifyReply](
                service_name="MtmService",
                name="ArtContentClassify",
                function=getattr(service, "ArtContentClassify"),
                input=_pb2.ArtContentClassifyReq,
                output=_pb2.ArtContentClassifyReply,
            ),
            "ArtRewrite": Endpoint[_pb2.ArtRewriteReq, _pb2.ArtRewriteReply](
                service_name="MtmService",
                name="ArtRewrite",
                function=getattr(service, "ArtRewrite"),
                input=_pb2.ArtRewriteReq,
                output=_pb2.ArtRewriteReply,
            ),
        }

    def serviceName(self):
        return "sppb.MtmService"


class MtmServiceClient(ConnecpyClient):
    def Oauth2LoginHook(
        self,
        *,
        request: _pb2.Oauth2LoginHookRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.AuthToken:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Oauth2LoginHook",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AuthToken,
            **kwargs,
        )

    def Login(
        self,
        *,
        request: _pb2.LoginReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.LoginReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Login",
            ctx=ctx,
            request=request,
            response_obj=_pb2.LoginReply,
            **kwargs,
        )

    def Register(
        self,
        *,
        request: _pb2.RegisterReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.RegisterReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Register",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RegisterReply,
            **kwargs,
        )

    def GetMeta(
        self,
        *,
        request: _pb2.GetMetaReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GetMetaRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/GetMeta",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GetMetaRes,
            **kwargs,
        )

    def PullLogs(
        self,
        *,
        request: _pb2.PullLogReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.PullLogRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/PullLogs",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PullLogRes,
            **kwargs,
        )

    def MtmServerList(
        self,
        *,
        request: _pb2.MtmServerListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.MtmServerListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/MtmServerList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.MtmServerListRes,
            **kwargs,
        )

    def ServiceMeta(
        self,
        *,
        request: _pb2.ServiceMetaReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ServiceMetaRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ServiceMeta",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ServiceMetaRes,
            **kwargs,
        )

    def Search(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.CommontListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Search",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            **kwargs,
        )

    def SlugPage(
        self,
        *,
        request: _pb2.SlugReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SlugRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SlugPage",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SlugRes,
            **kwargs,
        )

    def Userinfo(
        self,
        *,
        request: _pb2.Empty,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.UserinfoRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Userinfo",
            ctx=ctx,
            request=request,
            response_obj=_pb2.UserinfoRes,
            **kwargs,
        )

    def BlogPostList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.CommontListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            **kwargs,
        )

    def BlogPostGet(
        self,
        *,
        request: _pb2.BlogPostGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogPost:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogPost,
            **kwargs,
        )

    def BlogPostCreate(
        self,
        *,
        request: _pb2.BlogPostCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def BlogPostUpdate(
        self,
        *,
        request: _pb2.BlogPostUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def BlogPostDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def BlogPostImport(
        self,
        *,
        request: _pb2.BlogPostImportReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogPost:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostImport",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogPost,
            **kwargs,
        )

    def BlogCategorieList(
        self,
        *,
        request: _pb2.BlogCategorieListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogCategorieListReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieListReply,
            **kwargs,
        )

    def BlogCategorieGet(
        self,
        *,
        request: _pb2.BlogCategorieGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogCategorie:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorie,
            **kwargs,
        )

    def BlogCategorieCreate(
        self,
        *,
        request: _pb2.BlogCategorieCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogCategorieCreateReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieCreateReply,
            **kwargs,
        )

    def BlogCategorieUpdate(
        self,
        *,
        request: _pb2.BlogCategorieUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.BlogCategorieUpdateReqply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieUpdateReqply,
            **kwargs,
        )

    def BlogCategorieDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def BlogClean(
        self,
        *,
        request: _pb2.BlogCleanReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogClean",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.CommontListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            **kwargs,
        )

    def SiteGet(
        self,
        *,
        request: _pb2.SiteGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Site:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Site,
            **kwargs,
        )

    def SiteCreate(
        self,
        *,
        request: _pb2.SiteCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SiteCreateRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteCreateRes,
            **kwargs,
        )

    def SiteUpdate(
        self,
        *,
        request: _pb2.SiteUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteImport(
        self,
        *,
        request: _pb2.SiteImportReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteImport",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteSetupCftunnel(
        self,
        *,
        request: _pb2.SiteSetupCftunnelReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SiteSetupCftunnelReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteSetupCftunnel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteSetupCftunnelReply,
            **kwargs,
        )

    def SiteHostList(
        self,
        *,
        request: _pb2.SiteHostListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SiteHostListReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteHostListReply,
            **kwargs,
        )

    def SiteHostGet(
        self,
        *,
        request: _pb2.SiteHostGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.SiteHost:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteHost,
            **kwargs,
        )

    def SiteHostCreate(
        self,
        *,
        request: _pb2.SiteHostCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteHostUpdate(
        self,
        *,
        request: _pb2.SiteHostUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def SiteHostDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def FormList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.CommontListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            **kwargs,
        )

    def FormGet(
        self,
        *,
        request: _pb2.FormGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FormSchema:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.FormSchema,
            **kwargs,
        )

    def FormCreate(
        self,
        *,
        request: _pb2.FormCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.FormSchema:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.FormSchema,
            **kwargs,
        )

    def ArtContentClassify(
        self,
        *,
        request: _pb2.ArtContentClassifyReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ArtContentClassifyReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ArtContentClassify",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ArtContentClassifyReply,
            **kwargs,
        )

    def ArtRewrite(
        self,
        *,
        request: _pb2.ArtRewriteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ArtRewriteReply:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ArtRewrite",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ArtRewriteReply,
            **kwargs,
        )


class AsyncMtmServiceClient(AsyncConnecpyClient):
    async def Oauth2LoginHook(
        self,
        *,
        request: _pb2.Oauth2LoginHookRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.AuthToken:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Oauth2LoginHook",
            ctx=ctx,
            request=request,
            response_obj=_pb2.AuthToken,
            session=session,
            **kwargs,
        )

    async def Login(
        self,
        *,
        request: _pb2.LoginReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.LoginReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Login",
            ctx=ctx,
            request=request,
            response_obj=_pb2.LoginReply,
            session=session,
            **kwargs,
        )

    async def Register(
        self,
        *,
        request: _pb2.RegisterReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.RegisterReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Register",
            ctx=ctx,
            request=request,
            response_obj=_pb2.RegisterReply,
            session=session,
            **kwargs,
        )

    async def GetMeta(
        self,
        *,
        request: _pb2.GetMetaReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GetMetaRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/GetMeta",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GetMetaRes,
            session=session,
            **kwargs,
        )

    async def PullLogs(
        self,
        *,
        request: _pb2.PullLogReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.PullLogRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/PullLogs",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PullLogRes,
            session=session,
            **kwargs,
        )

    async def MtmServerList(
        self,
        *,
        request: _pb2.MtmServerListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.MtmServerListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/MtmServerList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.MtmServerListRes,
            session=session,
            **kwargs,
        )

    async def ServiceMeta(
        self,
        *,
        request: _pb2.ServiceMetaReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ServiceMetaRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ServiceMeta",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ServiceMetaRes,
            session=session,
            **kwargs,
        )

    async def Search(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.CommontListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Search",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            session=session,
            **kwargs,
        )

    async def SlugPage(
        self,
        *,
        request: _pb2.SlugReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SlugRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SlugPage",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SlugRes,
            session=session,
            **kwargs,
        )

    async def Userinfo(
        self,
        *,
        request: _pb2.Empty,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.UserinfoRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/Userinfo",
            ctx=ctx,
            request=request,
            response_obj=_pb2.UserinfoRes,
            session=session,
            **kwargs,
        )

    async def BlogPostList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.CommontListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            session=session,
            **kwargs,
        )

    async def BlogPostGet(
        self,
        *,
        request: _pb2.BlogPostGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogPost:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogPost,
            session=session,
            **kwargs,
        )

    async def BlogPostCreate(
        self,
        *,
        request: _pb2.BlogPostCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def BlogPostUpdate(
        self,
        *,
        request: _pb2.BlogPostUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def BlogPostDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def BlogPostImport(
        self,
        *,
        request: _pb2.BlogPostImportReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogPost:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogPostImport",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogPost,
            session=session,
            **kwargs,
        )

    async def BlogCategorieList(
        self,
        *,
        request: _pb2.BlogCategorieListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogCategorieListReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieListReply,
            session=session,
            **kwargs,
        )

    async def BlogCategorieGet(
        self,
        *,
        request: _pb2.BlogCategorieGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogCategorie:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorie,
            session=session,
            **kwargs,
        )

    async def BlogCategorieCreate(
        self,
        *,
        request: _pb2.BlogCategorieCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogCategorieCreateReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieCreateReply,
            session=session,
            **kwargs,
        )

    async def BlogCategorieUpdate(
        self,
        *,
        request: _pb2.BlogCategorieUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.BlogCategorieUpdateReqply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.BlogCategorieUpdateReqply,
            session=session,
            **kwargs,
        )

    async def BlogCategorieDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogCategorieDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def BlogClean(
        self,
        *,
        request: _pb2.BlogCleanReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/BlogClean",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.CommontListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            session=session,
            **kwargs,
        )

    async def SiteGet(
        self,
        *,
        request: _pb2.SiteGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Site:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Site,
            session=session,
            **kwargs,
        )

    async def SiteCreate(
        self,
        *,
        request: _pb2.SiteCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SiteCreateRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteCreateRes,
            session=session,
            **kwargs,
        )

    async def SiteUpdate(
        self,
        *,
        request: _pb2.SiteUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteImport(
        self,
        *,
        request: _pb2.SiteImportReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteImport",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteSetupCftunnel(
        self,
        *,
        request: _pb2.SiteSetupCftunnelReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SiteSetupCftunnelReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteSetupCftunnel",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteSetupCftunnelReply,
            session=session,
            **kwargs,
        )

    async def SiteHostList(
        self,
        *,
        request: _pb2.SiteHostListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SiteHostListReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteHostListReply,
            session=session,
            **kwargs,
        )

    async def SiteHostGet(
        self,
        *,
        request: _pb2.SiteHostGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.SiteHost:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.SiteHost,
            session=session,
            **kwargs,
        )

    async def SiteHostCreate(
        self,
        *,
        request: _pb2.SiteHostCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteHostUpdate(
        self,
        *,
        request: _pb2.SiteHostUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def SiteHostDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/SiteHostDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def FormList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.CommontListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            session=session,
            **kwargs,
        )

    async def FormGet(
        self,
        *,
        request: _pb2.FormGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FormSchema:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.FormSchema,
            session=session,
            **kwargs,
        )

    async def FormCreate(
        self,
        *,
        request: _pb2.FormCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.FormSchema:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/FormCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.FormSchema,
            session=session,
            **kwargs,
        )

    async def ArtContentClassify(
        self,
        *,
        request: _pb2.ArtContentClassifyReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ArtContentClassifyReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ArtContentClassify",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ArtContentClassifyReply,
            session=session,
            **kwargs,
        )

    async def ArtRewrite(
        self,
        *,
        request: _pb2.ArtRewriteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ArtRewriteReply:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.MtmService/ArtRewrite",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ArtRewriteReply,
            session=session,
            **kwargs,
        )
