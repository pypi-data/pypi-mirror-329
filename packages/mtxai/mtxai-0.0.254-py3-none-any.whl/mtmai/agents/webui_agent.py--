from pathlib import Path
from typing import Any, Callable, Mapping, Optional, Union

from autogen_agentchat.base import Team
from autogen_core import Component, ComponentModel, RoutedAgent, default_subscription
from loguru import logger

from mtmai.agents.model_client import MtmOpenAIChatCompletionClient
from mtmai.agents.team_builder import assisant_team_builder
from mtmai.clients.rest.models.ag_state_upsert import AgStateUpsert
from mtmai.clients.rest.models.mt_component import MtComponent
from mtmai.hatchet import Hatchet
from mtmai.mtlibs.id import generate_uuid


@default_subscription
class UIAgent(RoutedAgent):
    """
    UI Agent 是 UI 和 Worker 之间的桥梁, 负责处理 UI 发送的消息,
        1: 将状态通过SSE 推送到web 前端,
        2: 将消息和状态持久化到数据库
    """

    def __init__(self, description: str, wfapp: Hatchet = None) -> None:
        super().__init__(description)
        if wfapp is not None:
            self.wfapp = wfapp
            self.gomtmapi = self.wfapp.rest.aio

    async def load_state(self, state: Mapping[str, Any]) -> None:
        """Load the state of the group chat team."""
        self.last_message = state["last_message"]

    # @message_handler
    # async def handle_message_create(
    #     self, message: ChatMessageUpsert, ctx: MessageContext
    # ) -> None:
    #     await self.gomtmapi.chat_api.chat_message_upsert(
    #         tenant=message.tenant_id,
    #         chat_message_upsert=message.model_dump(),
    #         # chat_message_upsert=ChatMessageUpsert(
    #         #     tenantId=message.tenant_id,
    #         #     componentId=message.component_id,
    #         #     content=message.content,
    #         #     role=message.role,
    #         #     threadId=message.thread_id,
    #         # ).model_dump(),
    #     )

    # @message_handler
    # async def on_new_message(self, message: AgentRunInput, ctx: MessageContext) -> None:
    #     start_time = time.time()
    #     tenant_id: str | None = message.tenant_id
    #     if not tenant_id:
    #         tenant_id = get_tenant_id()
    #     if not tenant_id:
    #         raise ValueError("tenant_id is required")
    #     set_tenant_id(tenant_id)
    #     run_id = message.run_id
    #     if not run_id:
    #         raise ValueError("run_id is required")

    #     user_input = message.content
    #     if user_input.startswith("/tenant/seed"):
    #         logger.info(f"通知 TanantAgent 初始化(或重置)租户信息: {message}")
    #         return

    #     team_comp_data: MtComponent = None
    #     if not message.team_id:
    #         assistant_team_builder = assisant_team_builder.AssistantTeamBuilder()
    #         team_comp_data = await self.get_or_create_default_team(
    #             tenant_id=message.tenant_id,
    #             label=assistant_team_builder.name,
    #         )
    #         message.team_id = team_comp_data.metadata.id

    #     thread_id = message.session_id
    #     if not thread_id:
    #         thread_id = generate_uuid()
    #     self.team = Team.load_component(team_comp_data.component)
    #     team_id = message.team_id
    #     if not team_id:
    #         team_id = generate_uuid()
    #     try:
    #         async for event in self.team.run_stream(
    #             task=message.content,
    #             cancellation_token=ctx.cancellation_token,
    #         ):
    #             if ctx.cancellation_token and ctx.cancellation_token.is_cancelled():
    #                 break

    #             if isinstance(event, TaskResult):
    #                 # await self.handle_api_save_team_task_result(
    #                 #     ApiSaveTeamTaskResult(
    #                 #         tenant_id=tenant_id,
    #                 #         component_id=team_id,
    #                 #         task_result=event,
    #                 #     ),
    #                 #     ctx,
    #                 # )
    #                 logger.info(f"UI Agent 收到任务结果(TODO): {event}")
    #             elif isinstance(event, TextMessage):
    #                 await self.handle_message_create(
    #                     ChatMessageUpsert(
    #                         content=event.content,
    #                         tenant_id=message.tenant_id,
    #                         component_id=message.team_id,
    #                         threadId=thread_id,
    #                         runId=run_id,
    #                     ),
    #                     ctx,
    #                 )
    #                 self.wfapp.event.stream(
    #                     "hello1await111111111111", step_run_id=message.step_run_id
    #                 )
    #             elif isinstance(event, BaseModel):
    #                 await self.handle_message_create(
    #                     ChatMessageUpsert(
    #                         content=event.model_dump_json(),
    #                         tenant_id=message.tenant_id,
    #                         component_id=message.team_id,
    #                     ),
    #                     ctx,
    #                 )
    #             else:
    #                 logger.info(f"UI Agent 收到(未知类型)消息: {event}")
    #     finally:
    #         await self.save_team_state(
    #             team=self.team,
    #             team_id=team_id,
    #             tenant_id=tenant_id,
    #             run_id=run_id,
    # )

    async def save_team_state(
        self, team: Team, team_id: str, tenant_id: str, run_id: str
    ) -> None:
        """保存团队状态"""
        logger.info("保存团队状态")
        # 确保停止团队的内部 agents
        if team and hasattr(team, "_participants"):
            for agent in team._participants:
                if hasattr(agent, "close"):
                    await agent.close()
        state = await team.save_state()
        await self.gomtmapi.ag_state_api.ag_state_upsert(
            tenant=tenant_id,
            ag_state_upsert=AgStateUpsert(
                componentId=team_id,
                runId=run_id,
                state=state,
            ).model_dump(),
        )

    async def _create_team_component(
        self,
        team_config: Union[str, Path, dict, ComponentModel],
        input_func: Optional[Callable] = None,
    ) -> Component:
        """Create team instance from config"""
        if isinstance(team_config, (str, Path)):
            config = await self.load_from_file(team_config)
        elif isinstance(team_config, dict):
            config = team_config
        else:
            config = team_config.model_dump()

        team = Team.load_component(config)

        for agent in team._participants:
            if hasattr(agent, "input_func"):
                agent.input_func = input_func

        return team

    async def get_or_create_default_team(self, tenant_id: str, label: str):
        teams_list = await self.gomtmapi.coms_api.coms_list(
            tenant=tenant_id, label=label
        )
        if teams_list.rows and len(teams_list.rows) > 0:
            logger.info(f"获取到默认聊天团队 {teams_list.rows[0].metadata.id}")
            return teams_list.rows[0]
        else:
            logger.info(f"create default team for tenant {tenant_id}")
            defaultModel = await self.gomtmapi.model_api.model_get(
                tenant=tenant_id, model="default"
            )
            model_dict = defaultModel.config.model_dump()
            model_dict.pop("n", None)
            model_client = MtmOpenAIChatCompletionClient(
                **model_dict,
            )

            default_team_builder = assisant_team_builder.AssistantTeamBuilder()
            team_comp = await default_team_builder.create_team(model_client)
            component_model = team_comp.dump_component()
            new_team = await self.gomtmapi.coms_api.coms_upsert(
                tenant=tenant_id,
                com=generate_uuid(),
                mt_component=MtComponent(
                    label=component_model.label,
                    description=component_model.description or "",
                    componentType="team",
                    component=component_model.model_dump(),
                ).model_dump(),
            )
            return new_team
