# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtm/sppb/git.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtm.sppb.git_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class GitService(Protocol):
    async def GitList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    async def GitGet(self, req: _pb2.GitGetReq, ctx: ServiceContext) -> _pb2.GitInfo: ...
    async def GitPull(self, req: _pb2.GitPullReq, ctx: ServiceContext) -> _pb2.GitPullRes: ...
    async def GitSetup(self, req: _pb2.GitSetupReq, ctx: ServiceContext) -> _pb2.GitSetupRes: ...
    async def GitStart(self, req: _pb2.GitStartReq, ctx: ServiceContext) -> _pb2.GitStartRes: ...
    async def GitStop(self, req: _pb2.GitStopReq, ctx: ServiceContext) -> _pb2.GitStopRes: ...


class GitServiceServer(ConnecpyServer):
    def __init__(self, *, service: GitService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.GitService"
        self._endpoints = {
            "GitList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="GitService",
                name="GitList",
                function=getattr(service, "GitList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "GitGet": Endpoint[_pb2.GitGetReq, _pb2.GitInfo](
                service_name="GitService",
                name="GitGet",
                function=getattr(service, "GitGet"),
                input=_pb2.GitGetReq,
                output=_pb2.GitInfo,
            ),
            "GitPull": Endpoint[_pb2.GitPullReq, _pb2.GitPullRes](
                service_name="GitService",
                name="GitPull",
                function=getattr(service, "GitPull"),
                input=_pb2.GitPullReq,
                output=_pb2.GitPullRes,
            ),
            "GitSetup": Endpoint[_pb2.GitSetupReq, _pb2.GitSetupRes](
                service_name="GitService",
                name="GitSetup",
                function=getattr(service, "GitSetup"),
                input=_pb2.GitSetupReq,
                output=_pb2.GitSetupRes,
            ),
            "GitStart": Endpoint[_pb2.GitStartReq, _pb2.GitStartRes](
                service_name="GitService",
                name="GitStart",
                function=getattr(service, "GitStart"),
                input=_pb2.GitStartReq,
                output=_pb2.GitStartRes,
            ),
            "GitStop": Endpoint[_pb2.GitStopReq, _pb2.GitStopRes](
                service_name="GitService",
                name="GitStop",
                function=getattr(service, "GitStop"),
                input=_pb2.GitStopReq,
                output=_pb2.GitStopRes,
            ),
        }

    def serviceName(self):
        return "sppb.GitService"


class GitServiceSync(Protocol):
    def GitList(self, req: _pb2.CommontListReq, ctx: ServiceContext) -> _pb2.CommontListRes: ...
    def GitGet(self, req: _pb2.GitGetReq, ctx: ServiceContext) -> _pb2.GitInfo: ...
    def GitPull(self, req: _pb2.GitPullReq, ctx: ServiceContext) -> _pb2.GitPullRes: ...
    def GitSetup(self, req: _pb2.GitSetupReq, ctx: ServiceContext) -> _pb2.GitSetupRes: ...
    def GitStart(self, req: _pb2.GitStartReq, ctx: ServiceContext) -> _pb2.GitStartRes: ...
    def GitStop(self, req: _pb2.GitStopReq, ctx: ServiceContext) -> _pb2.GitStopRes: ...


class GitServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: GitServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.GitService"
        self._endpoints = {
            "GitList": Endpoint[_pb2.CommontListReq, _pb2.CommontListRes](
                service_name="GitService",
                name="GitList",
                function=getattr(service, "GitList"),
                input=_pb2.CommontListReq,
                output=_pb2.CommontListRes,
            ),
            "GitGet": Endpoint[_pb2.GitGetReq, _pb2.GitInfo](
                service_name="GitService",
                name="GitGet",
                function=getattr(service, "GitGet"),
                input=_pb2.GitGetReq,
                output=_pb2.GitInfo,
            ),
            "GitPull": Endpoint[_pb2.GitPullReq, _pb2.GitPullRes](
                service_name="GitService",
                name="GitPull",
                function=getattr(service, "GitPull"),
                input=_pb2.GitPullReq,
                output=_pb2.GitPullRes,
            ),
            "GitSetup": Endpoint[_pb2.GitSetupReq, _pb2.GitSetupRes](
                service_name="GitService",
                name="GitSetup",
                function=getattr(service, "GitSetup"),
                input=_pb2.GitSetupReq,
                output=_pb2.GitSetupRes,
            ),
            "GitStart": Endpoint[_pb2.GitStartReq, _pb2.GitStartRes](
                service_name="GitService",
                name="GitStart",
                function=getattr(service, "GitStart"),
                input=_pb2.GitStartReq,
                output=_pb2.GitStartRes,
            ),
            "GitStop": Endpoint[_pb2.GitStopReq, _pb2.GitStopRes](
                service_name="GitService",
                name="GitStop",
                function=getattr(service, "GitStop"),
                input=_pb2.GitStopReq,
                output=_pb2.GitStopRes,
            ),
        }

    def serviceName(self):
        return "sppb.GitService"


class GitServiceClient(ConnecpyClient):
    def GitList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.CommontListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            **kwargs,
        )

    def GitGet(
        self,
        *,
        request: _pb2.GitGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GitInfo:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitInfo,
            **kwargs,
        )

    def GitPull(
        self,
        *,
        request: _pb2.GitPullReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GitPullRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitPull",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitPullRes,
            **kwargs,
        )

    def GitSetup(
        self,
        *,
        request: _pb2.GitSetupReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GitSetupRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitSetup",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitSetupRes,
            **kwargs,
        )

    def GitStart(
        self,
        *,
        request: _pb2.GitStartReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GitStartRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitStart",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitStartRes,
            **kwargs,
        )

    def GitStop(
        self,
        *,
        request: _pb2.GitStopReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.GitStopRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitStop",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitStopRes,
            **kwargs,
        )


class AsyncGitServiceClient(AsyncConnecpyClient):
    async def GitList(
        self,
        *,
        request: _pb2.CommontListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.CommontListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.CommontListRes,
            session=session,
            **kwargs,
        )

    async def GitGet(
        self,
        *,
        request: _pb2.GitGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GitInfo:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitInfo,
            session=session,
            **kwargs,
        )

    async def GitPull(
        self,
        *,
        request: _pb2.GitPullReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GitPullRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitPull",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitPullRes,
            session=session,
            **kwargs,
        )

    async def GitSetup(
        self,
        *,
        request: _pb2.GitSetupReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GitSetupRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitSetup",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitSetupRes,
            session=session,
            **kwargs,
        )

    async def GitStart(
        self,
        *,
        request: _pb2.GitStartReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GitStartRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitStart",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitStartRes,
            session=session,
            **kwargs,
        )

    async def GitStop(
        self,
        *,
        request: _pb2.GitStopReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.GitStopRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.GitService/GitStop",
            ctx=ctx,
            request=request,
            response_obj=_pb2.GitStopRes,
            session=session,
            **kwargs,
        )
