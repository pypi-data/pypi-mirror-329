# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtm/sppb/conf.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtm.sppb.conf_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class ConfService(Protocol):
    async def ConfList(self, req: _pb2.ConfListReq, ctx: ServiceContext) -> _pb2.ConfListRes: ...
    async def ConfGet(self, req: _pb2.ConfGetReq, ctx: ServiceContext) -> _pb2.ConfGetRes: ...
    async def ConfCreate(self, req: _pb2.ConfCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def ConfUpdate(self, req: _pb2.ConfUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    async def ConfDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...


class ConfServiceServer(ConnecpyServer):
    def __init__(self, *, service: ConfService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.ConfService"
        self._endpoints = {
            "ConfList": Endpoint[_pb2.ConfListReq, _pb2.ConfListRes](
                service_name="ConfService",
                name="ConfList",
                function=getattr(service, "ConfList"),
                input=_pb2.ConfListReq,
                output=_pb2.ConfListRes,
            ),
            "ConfGet": Endpoint[_pb2.ConfGetReq, _pb2.ConfGetRes](
                service_name="ConfService",
                name="ConfGet",
                function=getattr(service, "ConfGet"),
                input=_pb2.ConfGetReq,
                output=_pb2.ConfGetRes,
            ),
            "ConfCreate": Endpoint[_pb2.ConfCreateReq, _pb2.Result](
                service_name="ConfService",
                name="ConfCreate",
                function=getattr(service, "ConfCreate"),
                input=_pb2.ConfCreateReq,
                output=_pb2.Result,
            ),
            "ConfUpdate": Endpoint[_pb2.ConfUpdateReq, _pb2.Result](
                service_name="ConfService",
                name="ConfUpdate",
                function=getattr(service, "ConfUpdate"),
                input=_pb2.ConfUpdateReq,
                output=_pb2.Result,
            ),
            "ConfDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="ConfService",
                name="ConfDelete",
                function=getattr(service, "ConfDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
        }

    def serviceName(self):
        return "sppb.ConfService"


class ConfServiceSync(Protocol):
    def ConfList(self, req: _pb2.ConfListReq, ctx: ServiceContext) -> _pb2.ConfListRes: ...
    def ConfGet(self, req: _pb2.ConfGetReq, ctx: ServiceContext) -> _pb2.ConfGetRes: ...
    def ConfCreate(self, req: _pb2.ConfCreateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def ConfUpdate(self, req: _pb2.ConfUpdateReq, ctx: ServiceContext) -> _pb2.Result: ...
    def ConfDelete(self, req: _pb2.ResDeleteReq, ctx: ServiceContext) -> _pb2.Result: ...


class ConfServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: ConfServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/sppb.ConfService"
        self._endpoints = {
            "ConfList": Endpoint[_pb2.ConfListReq, _pb2.ConfListRes](
                service_name="ConfService",
                name="ConfList",
                function=getattr(service, "ConfList"),
                input=_pb2.ConfListReq,
                output=_pb2.ConfListRes,
            ),
            "ConfGet": Endpoint[_pb2.ConfGetReq, _pb2.ConfGetRes](
                service_name="ConfService",
                name="ConfGet",
                function=getattr(service, "ConfGet"),
                input=_pb2.ConfGetReq,
                output=_pb2.ConfGetRes,
            ),
            "ConfCreate": Endpoint[_pb2.ConfCreateReq, _pb2.Result](
                service_name="ConfService",
                name="ConfCreate",
                function=getattr(service, "ConfCreate"),
                input=_pb2.ConfCreateReq,
                output=_pb2.Result,
            ),
            "ConfUpdate": Endpoint[_pb2.ConfUpdateReq, _pb2.Result](
                service_name="ConfService",
                name="ConfUpdate",
                function=getattr(service, "ConfUpdate"),
                input=_pb2.ConfUpdateReq,
                output=_pb2.Result,
            ),
            "ConfDelete": Endpoint[_pb2.ResDeleteReq, _pb2.Result](
                service_name="ConfService",
                name="ConfDelete",
                function=getattr(service, "ConfDelete"),
                input=_pb2.ResDeleteReq,
                output=_pb2.Result,
            ),
        }

    def serviceName(self):
        return "sppb.ConfService"


class ConfServiceClient(ConnecpyClient):
    def ConfList(
        self,
        *,
        request: _pb2.ConfListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ConfListRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ConfListRes,
            **kwargs,
        )

    def ConfGet(
        self,
        *,
        request: _pb2.ConfGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.ConfGetRes:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ConfGetRes,
            **kwargs,
        )

    def ConfCreate(
        self,
        *,
        request: _pb2.ConfCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def ConfUpdate(
        self,
        *,
        request: _pb2.ConfUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )

    def ConfDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Result:
        return self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            **kwargs,
        )


class AsyncConfServiceClient(AsyncConnecpyClient):
    async def ConfList(
        self,
        *,
        request: _pb2.ConfListReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ConfListRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfList",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ConfListRes,
            session=session,
            **kwargs,
        )

    async def ConfGet(
        self,
        *,
        request: _pb2.ConfGetReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.ConfGetRes:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.ConfGetRes,
            session=session,
            **kwargs,
        )

    async def ConfCreate(
        self,
        *,
        request: _pb2.ConfCreateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfCreate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def ConfUpdate(
        self,
        *,
        request: _pb2.ConfUpdateReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfUpdate",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )

    async def ConfDelete(
        self,
        *,
        request: _pb2.ResDeleteReq,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Result:
        return await self._make_request(
            url=f"{server_path_prefix}/sppb.ConfService/ConfDelete",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Result,
            session=session,
            **kwargs,
        )
