# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: mtm/sppb/ag.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import mtm.sppb.ag_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class AgService(Protocol):
    async def TeamGet(self, req: _pb2.TeamGetRequest, ctx: ServiceContext) -> _pb2.TeamGetReply: ...


class AgServiceServer(ConnecpyServer):
    def __init__(self, *, service: AgService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.pb.AgService"
        self._endpoints = {
            "TeamGet": Endpoint[_pb2.TeamGetRequest, _pb2.TeamGetReply](
                service_name="AgService",
                name="TeamGet",
                function=getattr(service, "TeamGet"),
                input=_pb2.TeamGetRequest,
                output=_pb2.TeamGetReply,
            ),
        }

    def serviceName(self):
        return "mtmai.pb.AgService"


class AgServiceSync(Protocol):
    def TeamGet(self, req: _pb2.TeamGetRequest, ctx: ServiceContext) -> _pb2.TeamGetReply: ...


class AgServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: AgServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/mtmai.pb.AgService"
        self._endpoints = {
            "TeamGet": Endpoint[_pb2.TeamGetRequest, _pb2.TeamGetReply](
                service_name="AgService",
                name="TeamGet",
                function=getattr(service, "TeamGet"),
                input=_pb2.TeamGetRequest,
                output=_pb2.TeamGetReply,
            ),
        }

    def serviceName(self):
        return "mtmai.pb.AgService"


class AgServiceClient(ConnecpyClient):
    def TeamGet(
        self,
        *,
        request: _pb2.TeamGetRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.TeamGetReply:
        return self._make_request(
            url=f"{server_path_prefix}/mtmai.pb.AgService/TeamGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.TeamGetReply,
            **kwargs,
        )


class AsyncAgServiceClient(AsyncConnecpyClient):
    async def TeamGet(
        self,
        *,
        request: _pb2.TeamGetRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.TeamGetReply:
        return await self._make_request(
            url=f"{server_path_prefix}/mtmai.pb.AgService/TeamGet",
            ctx=ctx,
            request=request,
            response_obj=_pb2.TeamGetReply,
            session=session,
            **kwargs,
        )
