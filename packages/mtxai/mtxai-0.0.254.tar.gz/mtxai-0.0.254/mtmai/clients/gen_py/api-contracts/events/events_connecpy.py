# -*- coding: utf-8 -*-
# Generated by https://github.com/i2y/connecpy/protoc-gen-connecpy.  DO NOT EDIT!
# source: api-contracts/events/events.proto

from typing import Any, Protocol, Union

import httpx

from connecpy.async_client import AsyncConnecpyClient
from connecpy.base import Endpoint
from connecpy.server import ConnecpyServer
from connecpy.client import ConnecpyClient
from connecpy.context import ClientContext, ServiceContext

import api-contracts.events.events_pb2 as _pb2

from google.protobuf import symbol_database

_sym_db = symbol_database.Default()


class EventsService(Protocol):
    async def Push(self, req: _pb2.PushEventRequest, ctx: ServiceContext) -> _pb2.Event: ...
    async def BulkPush(self, req: _pb2.BulkPushEventRequest, ctx: ServiceContext) -> _pb2.Events: ...
    async def ReplaySingleEvent(self, req: _pb2.ReplayEventRequest, ctx: ServiceContext) -> _pb2.Event: ...
    async def PutLog(self, req: _pb2.PutLogRequest, ctx: ServiceContext) -> _pb2.PutLogResponse: ...
    async def PutStreamEvent(self, req: _pb2.PutStreamEventRequest, ctx: ServiceContext) -> _pb2.PutStreamEventResponse: ...


class EventsServiceServer(ConnecpyServer):
    def __init__(self, *, service: EventsService, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/.EventsService"
        self._endpoints = {
            "Push": Endpoint[_pb2.PushEventRequest, _pb2.Event](
                service_name="EventsService",
                name="Push",
                function=getattr(service, "Push"),
                input=_pb2.PushEventRequest,
                output=_pb2.Event,
            ),
            "BulkPush": Endpoint[_pb2.BulkPushEventRequest, _pb2.Events](
                service_name="EventsService",
                name="BulkPush",
                function=getattr(service, "BulkPush"),
                input=_pb2.BulkPushEventRequest,
                output=_pb2.Events,
            ),
            "ReplaySingleEvent": Endpoint[_pb2.ReplayEventRequest, _pb2.Event](
                service_name="EventsService",
                name="ReplaySingleEvent",
                function=getattr(service, "ReplaySingleEvent"),
                input=_pb2.ReplayEventRequest,
                output=_pb2.Event,
            ),
            "PutLog": Endpoint[_pb2.PutLogRequest, _pb2.PutLogResponse](
                service_name="EventsService",
                name="PutLog",
                function=getattr(service, "PutLog"),
                input=_pb2.PutLogRequest,
                output=_pb2.PutLogResponse,
            ),
            "PutStreamEvent": Endpoint[_pb2.PutStreamEventRequest, _pb2.PutStreamEventResponse](
                service_name="EventsService",
                name="PutStreamEvent",
                function=getattr(service, "PutStreamEvent"),
                input=_pb2.PutStreamEventRequest,
                output=_pb2.PutStreamEventResponse,
            ),
        }

    def serviceName(self):
        return ".EventsService"


class EventsServiceSync(Protocol):
    def Push(self, req: _pb2.PushEventRequest, ctx: ServiceContext) -> _pb2.Event: ...
    def BulkPush(self, req: _pb2.BulkPushEventRequest, ctx: ServiceContext) -> _pb2.Events: ...
    def ReplaySingleEvent(self, req: _pb2.ReplayEventRequest, ctx: ServiceContext) -> _pb2.Event: ...
    def PutLog(self, req: _pb2.PutLogRequest, ctx: ServiceContext) -> _pb2.PutLogResponse: ...
    def PutStreamEvent(self, req: _pb2.PutStreamEventRequest, ctx: ServiceContext) -> _pb2.PutStreamEventResponse: ...


class EventsServiceServerSync(ConnecpyServer):
    def __init__(self, *, service: EventsServiceSync, server_path_prefix=""):
        super().__init__()
        self._prefix = f"{server_path_prefix}/.EventsService"
        self._endpoints = {
            "Push": Endpoint[_pb2.PushEventRequest, _pb2.Event](
                service_name="EventsService",
                name="Push",
                function=getattr(service, "Push"),
                input=_pb2.PushEventRequest,
                output=_pb2.Event,
            ),
            "BulkPush": Endpoint[_pb2.BulkPushEventRequest, _pb2.Events](
                service_name="EventsService",
                name="BulkPush",
                function=getattr(service, "BulkPush"),
                input=_pb2.BulkPushEventRequest,
                output=_pb2.Events,
            ),
            "ReplaySingleEvent": Endpoint[_pb2.ReplayEventRequest, _pb2.Event](
                service_name="EventsService",
                name="ReplaySingleEvent",
                function=getattr(service, "ReplaySingleEvent"),
                input=_pb2.ReplayEventRequest,
                output=_pb2.Event,
            ),
            "PutLog": Endpoint[_pb2.PutLogRequest, _pb2.PutLogResponse](
                service_name="EventsService",
                name="PutLog",
                function=getattr(service, "PutLog"),
                input=_pb2.PutLogRequest,
                output=_pb2.PutLogResponse,
            ),
            "PutStreamEvent": Endpoint[_pb2.PutStreamEventRequest, _pb2.PutStreamEventResponse](
                service_name="EventsService",
                name="PutStreamEvent",
                function=getattr(service, "PutStreamEvent"),
                input=_pb2.PutStreamEventRequest,
                output=_pb2.PutStreamEventResponse,
            ),
        }

    def serviceName(self):
        return ".EventsService"


class EventsServiceClient(ConnecpyClient):
    def Push(
        self,
        *,
        request: _pb2.PushEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Event:
        return self._make_request(
            url=f"{server_path_prefix}/.EventsService/Push",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Event,
            **kwargs,
        )

    def BulkPush(
        self,
        *,
        request: _pb2.BulkPushEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Events:
        return self._make_request(
            url=f"{server_path_prefix}/.EventsService/BulkPush",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Events,
            **kwargs,
        )

    def ReplaySingleEvent(
        self,
        *,
        request: _pb2.ReplayEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.Event:
        return self._make_request(
            url=f"{server_path_prefix}/.EventsService/ReplaySingleEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Event,
            **kwargs,
        )

    def PutLog(
        self,
        *,
        request: _pb2.PutLogRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.PutLogResponse:
        return self._make_request(
            url=f"{server_path_prefix}/.EventsService/PutLog",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutLogResponse,
            **kwargs,
        )

    def PutStreamEvent(
        self,
        *,
        request: _pb2.PutStreamEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        **kwargs,
    ) -> _pb2.PutStreamEventResponse:
        return self._make_request(
            url=f"{server_path_prefix}/.EventsService/PutStreamEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutStreamEventResponse,
            **kwargs,
        )


class AsyncEventsServiceClient(AsyncConnecpyClient):
    async def Push(
        self,
        *,
        request: _pb2.PushEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Event:
        return await self._make_request(
            url=f"{server_path_prefix}/.EventsService/Push",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Event,
            session=session,
            **kwargs,
        )

    async def BulkPush(
        self,
        *,
        request: _pb2.BulkPushEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Events:
        return await self._make_request(
            url=f"{server_path_prefix}/.EventsService/BulkPush",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Events,
            session=session,
            **kwargs,
        )

    async def ReplaySingleEvent(
        self,
        *,
        request: _pb2.ReplayEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.Event:
        return await self._make_request(
            url=f"{server_path_prefix}/.EventsService/ReplaySingleEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.Event,
            session=session,
            **kwargs,
        )

    async def PutLog(
        self,
        *,
        request: _pb2.PutLogRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.PutLogResponse:
        return await self._make_request(
            url=f"{server_path_prefix}/.EventsService/PutLog",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutLogResponse,
            session=session,
            **kwargs,
        )

    async def PutStreamEvent(
        self,
        *,
        request: _pb2.PutStreamEventRequest,
        ctx: ClientContext,
        server_path_prefix: str = "",
        session: Union[httpx.AsyncClient, None] = None,
        **kwargs,
    ) -> _pb2.PutStreamEventResponse:
        return await self._make_request(
            url=f"{server_path_prefix}/.EventsService/PutStreamEvent",
            ctx=ctx,
            request=request,
            response_obj=_pb2.PutStreamEventResponse,
            session=session,
            **kwargs,
        )
