//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "game_configurations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub game_id: i32,
    pub pod_address: String,
    pub vpn_address: String,
    pub ws_public_address: String,
    pub rest_public_address: String,
    pub stream_public_address: String,
    pub public_rest_port: i32,
    pub public_stream_port: i32,
    pub public_ws_port: i32,
    pub rest_port: i32,
    pub stream_port: i32,
    pub ws_port: i32,
    pub gdb_port: i32,
    pub orchestrator_id: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::games::Entity",
        from = "Column::GameId",
        to = "super::games::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Games,
    #[sea_orm(
        belongs_to = "super::orchestrators::Entity",
        from = "Column::OrchestratorId",
        to = "super::orchestrators::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Orchestrators,
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::orchestrators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orchestrators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
