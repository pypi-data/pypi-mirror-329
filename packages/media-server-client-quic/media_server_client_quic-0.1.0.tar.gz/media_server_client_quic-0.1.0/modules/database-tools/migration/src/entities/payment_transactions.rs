//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "payment_transactions")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub game_id: i32,
    pub payment_method_id: i32,
    pub external_id: String,
    #[sea_orm(column_type = "Decimal(Some((10, 0)))")]
    pub amount: Decimal,
    pub currency: String,
    pub status: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::games::Entity",
        from = "Column::GameId",
        to = "super::games::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Games,
    #[sea_orm(has_one = "super::payment_details::Entity")]
    PaymentDetails,
    #[sea_orm(
        belongs_to = "super::payment_methods::Entity",
        from = "Column::PaymentMethodId",
        to = "super::payment_methods::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    PaymentMethods,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::payment_details::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentDetails.def()
    }
}

impl Related<super::payment_methods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentMethods.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
