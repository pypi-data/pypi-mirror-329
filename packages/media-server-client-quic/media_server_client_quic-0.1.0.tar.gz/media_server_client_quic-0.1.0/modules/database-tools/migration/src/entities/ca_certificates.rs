//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ca_certificates")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub serial_number: String,
    pub subject: String,
    pub issuer: String,
    pub public_key: String,
    pub valid_from: DateTime,
    pub valid_to: DateTime,
    pub certificate_data: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::ca_audit_logs::Entity")]
    CaAuditLogs,
    #[sea_orm(has_many = "super::ca_revocations::Entity")]
    CaRevocations,
}

impl Related<super::ca_audit_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CaAuditLogs.def()
    }
}

impl Related<super::ca_revocations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CaRevocations.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
