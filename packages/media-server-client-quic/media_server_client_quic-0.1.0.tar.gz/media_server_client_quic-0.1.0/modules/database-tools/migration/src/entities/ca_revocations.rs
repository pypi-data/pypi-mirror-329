//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "ca_revocations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub certificate_id: Option<i32>,
    pub revocation_pem: String,
    pub revocation_date: Option<DateTime>,
    pub reason: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ca_certificates::Entity",
        from = "Column::CertificateId",
        to = "super::ca_certificates::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    CaCertificates,
}

impl Related<super::ca_certificates::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CaCertificates.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
