//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "game_participants_history")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub unit_id: i32,
    pub game_id: String,
    pub health: i32,
    pub ammo: i32,
    #[sea_orm(column_type = "Float")]
    pub position_x: f32,
    #[sea_orm(column_type = "Float")]
    pub position_y: f32,
    #[sea_orm(column_type = "Float")]
    pub position_z: f32,
    #[sea_orm(column_type = "Float")]
    pub orientation_x: f32,
    #[sea_orm(column_type = "Float")]
    pub orientation_y: f32,
    #[sea_orm(column_type = "Float")]
    pub orientation_z: f32,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::games_history::Entity",
        from = "Column::GameId",
        to = "super::games_history::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    GamesHistory,
}

impl Related<super::games_history::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GamesHistory.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
