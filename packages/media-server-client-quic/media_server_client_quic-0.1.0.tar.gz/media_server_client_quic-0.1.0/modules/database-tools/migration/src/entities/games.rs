//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "games")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uid: String,
    pub max_players: i32,
    pub duration: i32,
    #[sea_orm(column_type = "Float")]
    pub latitude: f32,
    #[sea_orm(column_type = "Float")]
    pub longitude: f32,
    pub min_radius: i32,
    pub start_radius: i32,
    pub persist_reboot: i8,
    pub status: String,
    pub owner_id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_one = "super::game_configurations::Entity")]
    GameConfigurations,
    #[sea_orm(has_many = "super::game_events::Entity")]
    GameEvents,
    #[sea_orm(has_many = "super::game_participants::Entity")]
    GameParticipants,
    #[sea_orm(has_many = "super::payment_transactions::Entity")]
    PaymentTransactions,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::game_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameConfigurations.def()
    }
}

impl Related<super::game_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameEvents.def()
    }
}

impl Related<super::game_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameParticipants.def()
    }
}

impl Related<super::payment_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentTransactions.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
