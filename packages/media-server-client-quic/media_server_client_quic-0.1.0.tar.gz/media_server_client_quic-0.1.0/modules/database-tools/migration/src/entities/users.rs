//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub auth0_id: String,
    pub name: String,
    pub avatar: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::game_participants::Entity")]
    GameParticipants,
    #[sea_orm(has_many = "super::games::Entity")]
    Games,
    #[sea_orm(has_many = "super::payment_transactions::Entity")]
    PaymentTransactions,
    #[sea_orm(has_many = "super::unit_owners::Entity")]
    UnitOwners,
    #[sea_orm(has_many = "super::user_components::Entity")]
    UserComponents,
    #[sea_orm(has_one = "super::user_configurations::Entity")]
    UserConfigurations,
}

impl Related<super::game_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GameParticipants.def()
    }
}

impl Related<super::games::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Games.def()
    }
}

impl Related<super::payment_transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PaymentTransactions.def()
    }
}

impl Related<super::unit_owners::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UnitOwners.def()
    }
}

impl Related<super::user_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserComponents.def()
    }
}

impl Related<super::user_configurations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserConfigurations.def()
    }
}

impl Related<super::units::Entity> for Entity {
    fn to() -> RelationDef {
        super::unit_owners::Relation::Units.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::unit_owners::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
