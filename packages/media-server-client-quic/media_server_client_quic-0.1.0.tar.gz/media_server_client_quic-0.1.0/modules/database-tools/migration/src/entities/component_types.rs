//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "component_types")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub description: String,
    pub battery: i32,
    pub scope: i32,
    pub recoil: i32,
    pub rate_of_fire: i32,
    pub model_url: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::component_type_capabilities::Entity")]
    ComponentTypeCapabilities,
    #[sea_orm(has_many = "super::components::Entity")]
    Components,
}

impl Related<super::component_type_capabilities::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ComponentTypeCapabilities.def()
    }
}

impl Related<super::components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Components.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
