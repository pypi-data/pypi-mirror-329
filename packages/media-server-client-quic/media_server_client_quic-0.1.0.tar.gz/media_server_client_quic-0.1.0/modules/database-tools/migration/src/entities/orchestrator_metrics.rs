//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "orchestrator_metrics")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub orchestrator_id: String,
    #[sea_orm(column_type = "Float")]
    pub cpu_usage: f32,
    #[sea_orm(column_type = "Double")]
    pub memory_usage: f64,
    pub total_games: i32,
    pub active_games: i32,
    pub pending_games: i32,
    pub failed_games: i32,
    pub games_last_hour: i32,
    #[sea_orm(column_type = "Double")]
    pub avg_game_duration: f64,
    pub cluster_used_cpu_cores: i32,
    #[sea_orm(column_type = "Double")]
    pub cluster_used_memory_gb: f64,
    pub cluster_used_gpus: i32,
    pub cluster_available_cpu_cores: i32,
    #[sea_orm(column_type = "Double")]
    pub cluster_available_memory_gb: f64,
    pub cluster_available_gpus: i32,
    pub is_healthy: i8,
    pub recorded_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::orchestrators::Entity",
        from = "Column::OrchestratorId",
        to = "super::orchestrators::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Orchestrators,
}

impl Related<super::orchestrators::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orchestrators.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
