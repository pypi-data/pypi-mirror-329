//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "components")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub serial_number: String,
    pub component_type_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::component_types::Entity",
        from = "Column::ComponentTypeId",
        to = "super::component_types::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    ComponentTypes,
    #[sea_orm(has_many = "super::user_components::Entity")]
    UserComponents,
}

impl Related<super::component_types::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ComponentTypes.def()
    }
}

impl Related<super::user_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserComponents.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
