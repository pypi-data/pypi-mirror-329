//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user_components")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub user_id: i32,
    pub component_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::components::Entity",
        from = "Column::ComponentId",
        to = "super::components::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Components,
    #[sea_orm(has_many = "super::unit_components::Entity")]
    UnitComponents,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Users,
}

impl Related<super::components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Components.def()
    }
}

impl Related<super::unit_components::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UnitComponents.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
