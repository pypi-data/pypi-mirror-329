module test_alg_mod
  implicit none
  public

  contains
  subroutine test_alg(mesh, chi, panel_id)
    use constants_mod, only : i_def, r_def
    use field_mod, only : field_type
    use finite_element_config_mod, only : element_order_h, element_order_v
    use fs_continuity_mod, only : w1, w2, w3
    use function_space_collection_mod, only : function_space_collection
    use function_space_mod, only : function_space_type
    use mesh_mod, only : mesh_type
    use testkern_mod, only : testkern_type
    type(mesh_type), pointer, intent(in) :: mesh
    type(field_type), dimension(3), intent(in), optional :: chi
    type(field_type), intent(in), optional :: panel_id
    TYPE(function_space_type), POINTER :: vector_space_w1_ptr
    TYPE(function_space_type), POINTER :: vector_space_w2_ptr
    TYPE(function_space_type), POINTER :: vector_space_w3_ptr
    real(kind=r_def) :: rscalar_1
    type(field_type) :: field_2
    type(field_type) :: field_3
    type(field_type) :: field_4
    type(field_type) :: field_5

    vector_space_w1_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,w1)
    vector_space_w2_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,w2)
    vector_space_w3_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,w3)
    call field_2%initialise(vector_space=vector_space_w1_ptr, name='field_2')
    call field_3%initialise(vector_space=vector_space_w2_ptr, name='field_3')
    call field_4%initialise(vector_space=vector_space_w2_ptr, name='field_4')
    call field_5%initialise(vector_space=vector_space_w3_ptr, name='field_5')
    rscalar_1 = 1_i_def
    call invoke(setval_c(field_2, 1.0_r_def), setval_c(field_3, 1.0_r_def), setval_c(field_4, 1.0_r_def), setval_c(field_5, 1.0_r_def), testkern_type(rscalar_1, field_2, field_3, field_4, field_5))

  end subroutine test_alg

end module test_alg_mod
