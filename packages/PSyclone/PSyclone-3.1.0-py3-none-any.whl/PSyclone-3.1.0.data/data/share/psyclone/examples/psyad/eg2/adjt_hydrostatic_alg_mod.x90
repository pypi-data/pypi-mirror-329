module adjt_hydrostatic_alg_mod
  implicit none
  public

  contains
  subroutine adjt_hydrostatic_alg(mesh, chi, panel_id)
    use adj_hydrostatic_kernel_mod, only : adj_hydrostatic_kernel_type
    use constants_mod, only : i_def, r_def
    use field_mod, only : field_type
    use finite_element_config_mod, only : element_order_h, element_order_v
    use fs_continuity_mod, only : w2, w3, wtheta
    use function_space_collection_mod, only : function_space_collection
    use function_space_mod, only : function_space_type
    use log_mod, only : log_event, log_level_error, log_level_info, log_scratch_space
    use mesh_mod, only : mesh_type
    use quadrature_rule_gaussian_mod, only : quadrature_rule_gaussian_type
    use quadrature_xyoz_mod, only : quadrature_xyoz_type
    use setop_random_kernel_mod, only : setop_random_kernel_type
    use tl_hydrostatic_kernel_mod, only : tl_hydrostatic_kernel_type
    real(kind=r_def), parameter :: overall_tolerance = 1500.0_r_def
    type(mesh_type), pointer, intent(in) :: mesh
    type(field_type), dimension(3), intent(in), optional :: chi
    type(field_type), intent(in), optional :: panel_id
    TYPE(function_space_type), POINTER :: vector_space_w2_ptr
    TYPE(function_space_type), POINTER :: vector_space_w3_ptr
    TYPE(function_space_type), POINTER :: vector_space_wtheta_ptr
    type(field_type) :: r_u
    type(field_type) :: exner
    type(field_type) :: theta
    type(field_type), dimension(3) :: moist_dyn_fac
    type(field_type) :: ls_exner
    type(field_type) :: ls_theta
    type(field_type), dimension(3) :: ls_moist_dyn_fac
    real(kind=r_def) :: cp
    type(quadrature_xyoz_type) :: qr_xyoz
    type(quadrature_rule_gaussian_type) :: quadrature_rule
    real(kind=r_def) :: cp_input
    type(field_type) :: r_u_input
    type(field_type) :: exner_input
    type(field_type) :: theta_input
    type(field_type), dimension(3) :: moist_dyn_fac_input
    type(field_type) :: ls_exner_input
    type(field_type) :: ls_theta_input
    type(field_type), dimension(3) :: ls_moist_dyn_fac_input
    real(kind=r_def) :: r_u_inner_prod
    real(kind=r_def) :: exner_inner_prod
    real(kind=r_def) :: theta_inner_prod
    real(kind=r_def), dimension(3) :: moist_dyn_fac_inner_prod
    real(kind=r_def) :: ls_exner_inner_prod
    real(kind=r_def) :: ls_theta_inner_prod
    real(kind=r_def), dimension(3) :: ls_moist_dyn_fac_inner_prod
    real(kind=r_def) :: inner1
    real(kind=r_def) :: r_u_r_u_input_inner_prod
    real(kind=r_def) :: exner_exner_input_inner_prod
    real(kind=r_def) :: theta_theta_input_inner_prod
    real(kind=r_def), dimension(3) :: moist_dyn_fac_moist_dyn_fac_input_inner_prod
    real(kind=r_def) :: ls_exner_ls_exner_input_inner_prod
    real(kind=r_def) :: ls_theta_ls_theta_input_inner_prod
    real(kind=r_def), dimension(3) :: ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod
    real(kind=r_def) :: inner2
    real(kind=r_def) :: MachineTol
    real(kind=r_def) :: relative_diff

    vector_space_w2_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,w2)
    vector_space_w3_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,w3)
    vector_space_wtheta_ptr => function_space_collection%get_fs(mesh,element_order_h,element_order_v,wtheta)
    call r_u%initialise(vector_space=vector_space_w2_ptr, name='r_u')
    call exner%initialise(vector_space=vector_space_w3_ptr, name='exner')
    call theta%initialise(vector_space=vector_space_wtheta_ptr, name='theta')
    call moist_dyn_fac(1_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac')
    call moist_dyn_fac(2_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac')
    call moist_dyn_fac(3_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac')
    call ls_exner%initialise(vector_space=vector_space_w3_ptr, name='ls_exner')
    call ls_theta%initialise(vector_space=vector_space_wtheta_ptr, name='ls_theta')
    call ls_moist_dyn_fac(1_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac')
    call ls_moist_dyn_fac(2_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac')
    call ls_moist_dyn_fac(3_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac')
    qr_xyoz = quadrature_xyoz_type(element_order_h + 3,element_order_h + 3,element_order_v + 3,quadrature_rule)
    call r_u_input%initialise(vector_space=vector_space_w2_ptr, name='r_u_input')
    call exner_input%initialise(vector_space=vector_space_w3_ptr, name='exner_input')
    call theta_input%initialise(vector_space=vector_space_wtheta_ptr, name='theta_input')
    call moist_dyn_fac_input(1_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac_input')
    call moist_dyn_fac_input(2_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac_input')
    call moist_dyn_fac_input(3_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='moist_dyn_fac_input')
    call ls_exner_input%initialise(vector_space=vector_space_w3_ptr, name='ls_exner_input')
    call ls_theta_input%initialise(vector_space=vector_space_wtheta_ptr, name='ls_theta_input')
    call ls_moist_dyn_fac_input(1_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac_input')
    call ls_moist_dyn_fac_input(2_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac_input')
    call ls_moist_dyn_fac_input(3_i_def)%initialise(vector_space=vector_space_wtheta_ptr, name='ls_moist_dyn_fac_input')
    call RANDOM_NUMBER(cp)
    cp_input = cp
    r_u_inner_prod = 0.0_r_def
    exner_inner_prod = 0.0_r_def
    theta_inner_prod = 0.0_r_def
    moist_dyn_fac_inner_prod(1_i_def) = 0.0_r_def
    moist_dyn_fac_inner_prod(2_i_def) = 0.0_r_def
    moist_dyn_fac_inner_prod(3_i_def) = 0.0_r_def
    ls_exner_inner_prod = 0.0_r_def
    ls_theta_inner_prod = 0.0_r_def
    ls_moist_dyn_fac_inner_prod(1_i_def) = 0.0_r_def
    ls_moist_dyn_fac_inner_prod(2_i_def) = 0.0_r_def
    ls_moist_dyn_fac_inner_prod(3_i_def) = 0.0_r_def
    ! Initialise arguments and call the tangent-linear kernel.
    call invoke(setval_random(r_u), setval_x(r_u_input, r_u), setval_random(exner), setval_x(exner_input, exner), &
&setval_random(theta), setval_x(theta_input, theta), setval_random(moist_dyn_fac(1_i_def)), setval_x(moist_dyn_fac_input(1_i_def), &
&moist_dyn_fac(1_i_def)), setval_random(moist_dyn_fac(2_i_def)), setval_x(moist_dyn_fac_input(2_i_def), moist_dyn_fac(2_i_def)), &
&setval_random(moist_dyn_fac(3_i_def)), setval_x(moist_dyn_fac_input(3_i_def), moist_dyn_fac(3_i_def)), setval_random(ls_exner), &
&setval_x(ls_exner_input, ls_exner), setval_random(ls_theta), setval_x(ls_theta_input, ls_theta), &
&setval_random(ls_moist_dyn_fac(1_i_def)), setval_x(ls_moist_dyn_fac_input(1_i_def), ls_moist_dyn_fac(1_i_def)), &
&setval_random(ls_moist_dyn_fac(2_i_def)), setval_x(ls_moist_dyn_fac_input(2_i_def), ls_moist_dyn_fac(2_i_def)), &
&setval_random(ls_moist_dyn_fac(3_i_def)), setval_x(ls_moist_dyn_fac_input(3_i_def), ls_moist_dyn_fac(3_i_def)), &
&tl_hydrostatic_kernel_type(r_u, exner, theta, moist_dyn_fac, ls_exner, ls_theta, ls_moist_dyn_fac, cp, qr_xyoz), &
&x_innerproduct_x(r_u_inner_prod, r_u), x_innerproduct_x(exner_inner_prod, exner), x_innerproduct_x(theta_inner_prod, theta), &
&x_innerproduct_x(moist_dyn_fac_inner_prod(1_i_def), moist_dyn_fac(1_i_def)), x_innerproduct_x(moist_dyn_fac_inner_prod(2_i_def), &
&moist_dyn_fac(2_i_def)), x_innerproduct_x(moist_dyn_fac_inner_prod(3_i_def), moist_dyn_fac(3_i_def)), &
&x_innerproduct_x(ls_exner_inner_prod, ls_exner), x_innerproduct_x(ls_theta_inner_prod, ls_theta), &
&x_innerproduct_x(ls_moist_dyn_fac_inner_prod(1_i_def), ls_moist_dyn_fac(1_i_def)), &
&x_innerproduct_x(ls_moist_dyn_fac_inner_prod(2_i_def), ls_moist_dyn_fac(2_i_def)), &
&x_innerproduct_x(ls_moist_dyn_fac_inner_prod(3_i_def), ls_moist_dyn_fac(3_i_def)))
    inner1 = 0.0_r_def
    inner1 = inner1 + cp * cp
    inner1 = inner1 + r_u_inner_prod
    inner1 = inner1 + exner_inner_prod
    inner1 = inner1 + theta_inner_prod
    inner1 = inner1 + moist_dyn_fac_inner_prod(1_i_def)
    inner1 = inner1 + moist_dyn_fac_inner_prod(2_i_def)
    inner1 = inner1 + moist_dyn_fac_inner_prod(3_i_def)
    inner1 = inner1 + ls_exner_inner_prod
    inner1 = inner1 + ls_theta_inner_prod
    inner1 = inner1 + ls_moist_dyn_fac_inner_prod(1_i_def)
    inner1 = inner1 + ls_moist_dyn_fac_inner_prod(2_i_def)
    inner1 = inner1 + ls_moist_dyn_fac_inner_prod(3_i_def)
    r_u_r_u_input_inner_prod = 0.0_r_def
    exner_exner_input_inner_prod = 0.0_r_def
    theta_theta_input_inner_prod = 0.0_r_def
    moist_dyn_fac_moist_dyn_fac_input_inner_prod(1_i_def) = 0.0_r_def
    moist_dyn_fac_moist_dyn_fac_input_inner_prod(2_i_def) = 0.0_r_def
    moist_dyn_fac_moist_dyn_fac_input_inner_prod(3_i_def) = 0.0_r_def
    ls_exner_ls_exner_input_inner_prod = 0.0_r_def
    ls_theta_ls_theta_input_inner_prod = 0.0_r_def
    ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(1_i_def) = 0.0_r_def
    ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(2_i_def) = 0.0_r_def
    ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(3_i_def) = 0.0_r_def
    call invoke(adj_hydrostatic_kernel_type(r_u, exner, theta, moist_dyn_fac, ls_exner, ls_theta, ls_moist_dyn_fac, cp, qr_xyoz), &
&x_innerproduct_y(r_u_r_u_input_inner_prod, r_u, r_u_input), x_innerproduct_y(exner_exner_input_inner_prod, exner, exner_input), &
&x_innerproduct_y(theta_theta_input_inner_prod, theta, theta_input), &
&x_innerproduct_y(moist_dyn_fac_moist_dyn_fac_input_inner_prod(1_i_def), moist_dyn_fac(1_i_def), moist_dyn_fac_input(1_i_def)), &
&x_innerproduct_y(moist_dyn_fac_moist_dyn_fac_input_inner_prod(2_i_def), moist_dyn_fac(2_i_def), moist_dyn_fac_input(2_i_def)), &
&x_innerproduct_y(moist_dyn_fac_moist_dyn_fac_input_inner_prod(3_i_def), moist_dyn_fac(3_i_def), moist_dyn_fac_input(3_i_def)), &
&x_innerproduct_y(ls_exner_ls_exner_input_inner_prod, ls_exner, ls_exner_input), &
&x_innerproduct_y(ls_theta_ls_theta_input_inner_prod, ls_theta, ls_theta_input), &
&x_innerproduct_y(ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(1_i_def), ls_moist_dyn_fac(1_i_def), &
&ls_moist_dyn_fac_input(1_i_def)), x_innerproduct_y(ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(2_i_def), &
&ls_moist_dyn_fac(2_i_def), ls_moist_dyn_fac_input(2_i_def)), &
&x_innerproduct_y(ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(3_i_def), ls_moist_dyn_fac(3_i_def), &
&ls_moist_dyn_fac_input(3_i_def)))
    inner2 = 0.0_r_def
    inner2 = inner2 + cp * cp_input
    inner2 = inner2 + r_u_r_u_input_inner_prod
    inner2 = inner2 + exner_exner_input_inner_prod
    inner2 = inner2 + theta_theta_input_inner_prod
    inner2 = inner2 + moist_dyn_fac_moist_dyn_fac_input_inner_prod(1_i_def)
    inner2 = inner2 + moist_dyn_fac_moist_dyn_fac_input_inner_prod(2_i_def)
    inner2 = inner2 + moist_dyn_fac_moist_dyn_fac_input_inner_prod(3_i_def)
    inner2 = inner2 + ls_exner_ls_exner_input_inner_prod
    inner2 = inner2 + ls_theta_ls_theta_input_inner_prod
    inner2 = inner2 + ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(1_i_def)
    inner2 = inner2 + ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(2_i_def)
    inner2 = inner2 + ls_moist_dyn_fac_ls_moist_dyn_fac_input_inner_prod(3_i_def)
    ! Test the inner-product values for equality, allowing for the precision of the active variables
    MachineTol = SPACING(MAX(ABS(inner1), ABS(inner2)))
    relative_diff = ABS(inner1 - inner2) / MachineTol
    if (relative_diff < overall_tolerance) then
      ! PSyclone CodeBlock (unsupported code) reason:
      !  - Unsupported statement: Write_Stmt
      WRITE(log_scratch_space, *) "PASSED tl_hydrostatic_kernel_type:", inner1, inner2, relative_diff
      call log_event(log_scratch_space, log_level_info)
    else
      ! PSyclone CodeBlock (unsupported code) reason:
      !  - Unsupported statement: Write_Stmt
      WRITE(log_scratch_space, *) "FAILED tl_hydrostatic_kernel_type:", inner1, inner2, relative_diff
      call log_event(log_scratch_space, log_level_error)
    end if

  end subroutine adjt_hydrostatic_alg

end module adjt_hydrostatic_alg_mod
