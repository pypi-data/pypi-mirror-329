Metadata-Version: 2.2
Name: dragonhpc
Version: 0.11rc4
Summary: Dragon is a composable distributed run-time for managing dynamic processes, memory, and data at scale through high-performance communication objects.
Author-email: Dragon Team <dragonhpc@hpe.com>
License: Dragon License:
        ---------------
        
        Copyright 2023-2025 Hewlett Packard Enterprise Development LP
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        
        
Project-URL: Homepage, http://dragonhpc.org/portal/index.html
Project-URL: Documentation, https://dragonhpc.github.io/dragon/doc/_build/html/index.html
Project-URL: Repository, https://github.com/DragonHPC/dragon
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: cloudpickle>=3.0.0
Requires-Dist: numpy>=2.0.2
Requires-Dist: gunicorn>=23.0.0
Requires-Dist: flask>=3.0.3
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: requests>=2.32.2
Requires-Dist: psutil>=6.0.0
Requires-Dist: pycapnp>=2.0.0
Dynamic: requires-dist
Dynamic: requires-python

Dragon
======

Dragon is a distributed environment for developing high-performance tools,
libraries, and applications at scale. This distribution package provides the
necessary components to run the Python multiprocessing library using the Dragon
implementation which provides greater scaling and performance improvements over
the legacy multiprocessing that is currently distributed with Python.

For examples and the actual source code for Dragon, please visit its github
repository: <https://github.com/DragonHPC/dragon>

Installing Dragon
------------------------

Dragon currently requires a minimum python version of 3.10 with support
for 3.11 and 3.12. Otherwise, just do a `pip install`:

    pip3 install --force-reinstall dragonhpc

After doing the `pip3 install` of the package, you have
completed the prerequisites for running Dragon multiprocessing programs.

Dragon is built with `manylinux2014` support and should function on most Linux
distros.

Running a Program using Dragon and python multiprocessing
---------------------------------------------------------

There are two steps that users must take to use Dragon multiprocessing.

1. You must import the dragon module in your source code and set dragon as the
   start method, much as you would set the start method for `spawn` or `fork`.

        import dragon
        import multiprocessing as mp
        ...
        if __name__ == "__main__":
            # set the start method prior to using any multiprocessing methods
            mp.set_start_method('dragon')
            ...

   This must be done for once for each application. Dragon is an API level
   replacement for multiprocessing. So, to learn more about Dragon and what it
   can do, read up on
   [multiprocessing](https://docs.python.org/3/library/multiprocessing.html).


2. You must start your program using the dragon command. This not only starts
   your program, but it also starts the Dragon run-time services that provide
   the necesssary infrastructure for running multiprocessing at scale.

        dragon myprog.py

    If you want to run across multiple nodes, simply obtain an allocation through
    Slurm (or PBS) and then run `dragon`.

        salloc --nodes=2 --exclusive
        dragon myprog.py


If you find that there are directions that would be helpful and are missing from
our documentation, please make note of them and provide us with feedback. This is
an early stab at documentation. We'd like to hear from you. Have fun with Dragon!

Sanity check Dragon installation
--------------------------------

```
cd examples/multiprocessing

dragon p2p_lat.py --dragon
using Dragon
Msglen [B]   Lat [usec]
2  28.75431440770626
4  39.88605458289385
8  37.25141752511263
16  43.31085830926895
+++ head proc exited, code 0
```

Test the same across two nodes within an allocation.
```
salloc --nodes=2 --exclusive
dragon p2p_lat.py --dragon
using Dragon
Msglen [B]   Lat [usec]
2  73.80113238468765
4  73.75898555619642
8  73.52533907396719
16  72.79851596103981
```

Environment Variables
---------------------

DRAGON_DEBUG - Set to any non-empty string to enable more verbose logging

DRAGON_DEFAULT_SEG_SZ - Set to the number of bytes for the default Managed Memory Pool.
                        The default size is 4294967296 (4 GB).  This may need to be
                        increased for applications running with a lot of Queues or Pipes,
                        for example.

Requirements
------------

- Python 3.10 
- GCC 9 or later
- Slurm or PBS+PALS (for multi-node Dragon)

Known Issues
------------

For any issues you encounter, it is recommended that you run with a higher level of debug
output. It is often possible to find the root cause of the problem in the output from the
runtime. We also ask for any issues you wish to report that this output be included in the
report. To learn more about how to enable higher levels of debug logging refer to
`dragon --help`.

Dragon Managed Memory, a low level component of the Dragon runtime, uses shared memory.
It is possible with this beta release that things go wrong while the runtime
is coming down and files are left in /dev/shm. Dragon does attempt to clean these up in
the chance of a bad exit, but it may not succeed. In that case, running `dragon-cleanup`
on your own will clean up any zombie processes or un-freed memory.

It is possible for a user application or workflow to exhaust memory resources in Dragon
Managed Memory without the runtime detecting it. Many allocation paths in the runtime use
"blocking" allocations that include a timeout, but not all paths do this if the multiprocessing
API in question doesn't have timeout semantics on an operation. When this happens, you
may observe what appears to be a hang. If this happens, try increasing the value of the
DRAGON_DEFAULT_SEG_SZ environment variable to larger sizes (default is 4 GB, try increasing
to 16 or 32 GB). Note this variable takes the number of bytes.

Python multiprocessing applications that switch between start methods may fail with this
due to how Queue is being patched in.  The issue will be addressed in a later update.

If there is a firewall blocking port 7575 between compute nodes, `dragon` will hang. You
will need to specify a different port that is not blocked through the `--port` option to
`dragon`. Additionally, if you specify `--network-prefix` and Dragon fails to find a match
the runtime will hang during startup. Proper error handling of this case will come in a later
release.

In the event your experiment goes awry, we provide a helper script, `dragon-cleanup`, to clean
up any zombie processes and memory. `dragon-cleanup` should be in your PATH once you install
dragon.
