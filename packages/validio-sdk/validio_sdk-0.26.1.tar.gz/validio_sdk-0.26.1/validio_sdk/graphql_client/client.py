from datetime import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from validio_sdk.scalars import (
    CredentialId,
    JsonTypeDefinition,
    SegmentationId,
    SourceId,
    ValidatorId,
    WindowId,
    serialize_rfc3339_datetime,
)

from .async_base_client import AsyncBaseClient
from .base_model import UNSET

if TYPE_CHECKING:
    from .add_catalog_asset_tags import AddCatalogAssetTagsCatalogAssetTagsAdd
    from .add_team_members import AddTeamMembersTeamMembersAdd
    from .apply_validator_recommendation import (
        ApplyValidatorRecommendationValidatorRecommendationApply,
    )
    from .aws_athena_credential_secret_changed import (
        AwsAthenaCredentialSecretChangedAwsAthenaCredentialSecretChanged,
    )
    from .aws_credential_secret_changed import (
        AwsCredentialSecretChangedAwsCredentialSecretChanged,
    )
    from .aws_redshift_credential_secret_changed import (
        AwsRedshiftCredentialSecretChangedAwsRedshiftCredentialSecretChanged,
    )
    from .azure_synapse_entra_id_credential_secret_changed import (
        AzureSynapseEntraIdCredentialSecretChangedAzureSynapseEntraIdCredentialSecretChanged,
    )
    from .azure_synapse_sql_credential_secret_changed import (
        AzureSynapseSqlCredentialSecretChangedAzureSynapseSqlCredentialSecretChanged,
    )
    from .backfill_source import BackfillSourceSourceBackfill
    from .base_model import UnsetType
    from .click_house_credential_secret_changed import (
        ClickHouseCredentialSecretChangedClickHouseCredentialSecretChanged,
    )
    from .create_aws_athena_credential import (
        CreateAwsAthenaCredentialAwsAthenaCredentialCreate,
    )
    from .create_aws_athena_source import CreateAwsAthenaSourceAwsAthenaSourceCreate
    from .create_aws_credential import CreateAwsCredentialAwsCredentialCreate
    from .create_aws_kinesis_source import CreateAwsKinesisSourceAwsKinesisSourceCreate
    from .create_aws_redshift_credential import (
        CreateAwsRedshiftCredentialAwsRedshiftCredentialCreate,
    )
    from .create_aws_redshift_source import (
        CreateAwsRedshiftSourceAwsRedshiftSourceCreate,
    )
    from .create_aws_s3_source import CreateAwsS3SourceAwsS3SourceCreate
    from .create_azure_synapse_entra_id_credential import (
        CreateAzureSynapseEntraIdCredentialAzureSynapseEntraIdCredentialCreate,
    )
    from .create_azure_synapse_source import (
        CreateAzureSynapseSourceAzureSynapseSourceCreate,
    )
    from .create_azure_synapse_sql_credential import (
        CreateAzureSynapseSqlCredentialAzureSynapseSqlCredentialCreate,
    )
    from .create_boolean_filter import CreateBooleanFilterBooleanFilterCreate
    from .create_categorical_distribution_validator_with_difference_threshold import (
        CreateCategoricalDistributionValidatorWithDifferenceThresholdCategoricalDistributionValidatorWithDifferenceThresholdCreate,
    )
    from .create_categorical_distribution_validator_with_dynamic_threshold import (
        CreateCategoricalDistributionValidatorWithDynamicThresholdCategoricalDistributionValidatorWithDynamicThresholdCreate,
    )
    from .create_categorical_distribution_validator_with_fixed_threshold import (
        CreateCategoricalDistributionValidatorWithFixedThresholdCategoricalDistributionValidatorWithFixedThresholdCreate,
    )
    from .create_click_house_credential import (
        CreateClickHouseCredentialClickHouseCredentialCreate,
    )
    from .create_click_house_source import CreateClickHouseSourceClickHouseSourceCreate
    from .create_databricks_credential import (
        CreateDatabricksCredentialDatabricksCredentialCreate,
    )
    from .create_databricks_source import CreateDatabricksSourceDatabricksSourceCreate
    from .create_dbt_cloud_credential import (
        CreateDbtCloudCredentialDbtCloudCredentialCreate,
    )
    from .create_dbt_core_credential import (
        CreateDbtCoreCredentialDbtCoreCredentialCreate,
    )
    from .create_dbt_model_run_source import (
        CreateDbtModelRunSourceDbtModelRunSourceCreate,
    )
    from .create_dbt_test_result_source import (
        CreateDbtTestResultSourceDbtTestResultSourceCreate,
    )
    from .create_demo_credential import CreateDemoCredentialDemoCredentialCreate
    from .create_demo_source import CreateDemoSourceDemoSourceCreate
    from .create_enum_filter import CreateEnumFilterEnumFilterCreate
    from .create_file_window import CreateFileWindowFileWindowCreate
    from .create_fixed_batch_window import CreateFixedBatchWindowFixedBatchWindowCreate
    from .create_freshness_validator_with_difference_threshold import (
        CreateFreshnessValidatorWithDifferenceThresholdFreshnessValidatorWithDifferenceThresholdCreate,
    )
    from .create_freshness_validator_with_dynamic_threshold import (
        CreateFreshnessValidatorWithDynamicThresholdFreshnessValidatorWithDynamicThresholdCreate,
    )
    from .create_freshness_validator_with_fixed_threshold import (
        CreateFreshnessValidatorWithFixedThresholdFreshnessValidatorWithFixedThresholdCreate,
    )
    from .create_gcp_big_query_source import (
        CreateGcpBigQuerySourceGcpBigQuerySourceCreate,
    )
    from .create_gcp_credential import CreateGcpCredentialGcpCredentialCreate
    from .create_gcp_pub_sub_lite_source import (
        CreateGcpPubSubLiteSourceGcpPubSubLiteSourceCreate,
    )
    from .create_gcp_pub_sub_source import CreateGcpPubSubSourceGcpPubSubSourceCreate
    from .create_gcp_storage_source import CreateGcpStorageSourceGcpStorageSourceCreate
    from .create_global_window import CreateGlobalWindowGlobalWindowCreate
    from .create_kafka_sasl_ssl_plain_credential import (
        CreateKafkaSaslSslPlainCredentialKafkaSaslSslPlainCredentialCreate,
    )
    from .create_kafka_source import CreateKafkaSourceKafkaSourceCreate
    from .create_kafka_ssl_credential import (
        CreateKafkaSslCredentialKafkaSslCredentialCreate,
    )
    from .create_lineage_edge import CreateLineageEdgeLineageEdgeCreate
    from .create_looker_credential import CreateLookerCredentialLookerCredentialCreate
    from .create_ms_power_bi_credential import (
        CreateMsPowerBiCredentialMsPowerBiCredentialCreate,
    )
    from .create_ms_teams_channel import CreateMsTeamsChannelMsTeamsChannelCreate
    from .create_namespace import CreateNamespaceNamespaceCreate
    from .create_notification_rule import CreateNotificationRuleNotificationRuleCreate
    from .create_null_filter import CreateNullFilterNullFilterCreate
    from .create_numeric_anomaly_validator_with_difference_threshold import (
        CreateNumericAnomalyValidatorWithDifferenceThresholdNumericAnomalyValidatorWithDifferenceThresholdCreate,
    )
    from .create_numeric_anomaly_validator_with_dynamic_threshold import (
        CreateNumericAnomalyValidatorWithDynamicThresholdNumericAnomalyValidatorWithDynamicThresholdCreate,
    )
    from .create_numeric_anomaly_validator_with_fixed_threshold import (
        CreateNumericAnomalyValidatorWithFixedThresholdNumericAnomalyValidatorWithFixedThresholdCreate,
    )
    from .create_numeric_distribution_validator_with_difference_threshold import (
        CreateNumericDistributionValidatorWithDifferenceThresholdNumericDistributionValidatorWithDifferenceThresholdCreate,
    )
    from .create_numeric_distribution_validator_with_dynamic_threshold import (
        CreateNumericDistributionValidatorWithDynamicThresholdNumericDistributionValidatorWithDynamicThresholdCreate,
    )
    from .create_numeric_distribution_validator_with_fixed_threshold import (
        CreateNumericDistributionValidatorWithFixedThresholdNumericDistributionValidatorWithFixedThresholdCreate,
    )
    from .create_numeric_validator_with_difference_threshold import (
        CreateNumericValidatorWithDifferenceThresholdNumericValidatorWithDifferenceThresholdCreate,
    )
    from .create_numeric_validator_with_dynamic_threshold import (
        CreateNumericValidatorWithDynamicThresholdNumericValidatorWithDynamicThresholdCreate,
    )
    from .create_numeric_validator_with_fixed_threshold import (
        CreateNumericValidatorWithFixedThresholdNumericValidatorWithFixedThresholdCreate,
    )
    from .create_owner_notification_rule_condition import (
        CreateOwnerNotificationRuleConditionOwnerNotificationRuleConditionCreate,
    )
    from .create_postgre_sql_credential import (
        CreatePostgreSqlCredentialPostgreSqlCredentialCreate,
    )
    from .create_postgre_sql_source import CreatePostgreSqlSourcePostgreSqlSourceCreate
    from .create_relative_time_validator_with_difference_threshold import (
        CreateRelativeTimeValidatorWithDifferenceThresholdRelativeTimeValidatorWithDifferenceThresholdCreate,
    )
    from .create_relative_time_validator_with_dynamic_threshold import (
        CreateRelativeTimeValidatorWithDynamicThresholdRelativeTimeValidatorWithDynamicThresholdCreate,
    )
    from .create_relative_time_validator_with_fixed_threshold import (
        CreateRelativeTimeValidatorWithFixedThresholdRelativeTimeValidatorWithFixedThresholdCreate,
    )
    from .create_relative_volume_validator_with_difference_threshold import (
        CreateRelativeVolumeValidatorWithDifferenceThresholdRelativeVolumeValidatorWithDifferenceThresholdCreate,
    )
    from .create_relative_volume_validator_with_dynamic_threshold import (
        CreateRelativeVolumeValidatorWithDynamicThresholdRelativeVolumeValidatorWithDynamicThresholdCreate,
    )
    from .create_relative_volume_validator_with_fixed_threshold import (
        CreateRelativeVolumeValidatorWithFixedThresholdRelativeVolumeValidatorWithFixedThresholdCreate,
    )
    from .create_saml_identity_provider import (
        CreateSamlIdentityProviderSamlIdentityProviderCreate,
    )
    from .create_segment_notification_rule_condition import (
        CreateSegmentNotificationRuleConditionSegmentNotificationRuleConditionCreate,
    )
    from .create_segmentation import CreateSegmentationSegmentationCreate
    from .create_severity_notification_rule_condition import (
        CreateSeverityNotificationRuleConditionSeverityNotificationRuleConditionCreate,
    )
    from .create_slack_channel import CreateSlackChannelSlackChannelCreate
    from .create_snowflake_credential import (
        CreateSnowflakeCredentialSnowflakeCredentialCreate,
    )
    from .create_snowflake_source import CreateSnowflakeSourceSnowflakeSourceCreate
    from .create_source_notification_rule_condition import (
        CreateSourceNotificationRuleConditionSourceNotificationRuleConditionCreate,
    )
    from .create_sql_filter import CreateSqlFilterSqlFilterCreate
    from .create_sql_validator_with_difference_threshold import (
        CreateSqlValidatorWithDifferenceThresholdSqlValidatorWithDifferenceThresholdCreate,
    )
    from .create_sql_validator_with_dynamic_threshold import (
        CreateSqlValidatorWithDynamicThresholdSqlValidatorWithDynamicThresholdCreate,
    )
    from .create_sql_validator_with_fixed_threshold import (
        CreateSqlValidatorWithFixedThresholdSqlValidatorWithFixedThresholdCreate,
    )
    from .create_string_filter import CreateStringFilterStringFilterCreate
    from .create_tableau_connected_app_credential import (
        CreateTableauConnectedAppCredentialTableauConnectedAppCredentialCreate,
    )
    from .create_tableau_personal_access_token_credential import (
        CreateTableauPersonalAccessTokenCredentialTableauPersonalAccessTokenCredentialCreate,
    )
    from .create_tag import CreateTagTagCreate
    from .create_tag_notification_rule_condition import (
        CreateTagNotificationRuleConditionTagNotificationRuleConditionCreate,
    )
    from .create_team import CreateTeamTeamCreate
    from .create_threshold_filter import CreateThresholdFilterThresholdFilterCreate
    from .create_tumbling_window import CreateTumblingWindowTumblingWindowCreate
    from .create_type_notification_rule_condition import (
        CreateTypeNotificationRuleConditionTypeNotificationRuleConditionCreate,
    )
    from .create_user import CreateUserUserCreate
    from .create_volume_validator_with_difference_threshold import (
        CreateVolumeValidatorWithDifferenceThresholdVolumeValidatorWithDifferenceThresholdCreate,
    )
    from .create_volume_validator_with_dynamic_threshold import (
        CreateVolumeValidatorWithDynamicThresholdVolumeValidatorWithDynamicThresholdCreate,
    )
    from .create_volume_validator_with_fixed_threshold import (
        CreateVolumeValidatorWithFixedThresholdVolumeValidatorWithFixedThresholdCreate,
    )
    from .create_webhook_channel import CreateWebhookChannelWebhookChannelCreate
    from .databricks_credential_secret_changed import (
        DatabricksCredentialSecretChangedDatabricksCredentialSecretChanged,
    )
    from .dbt_artifact_multipart_upload_append_part import (
        DbtArtifactMultipartUploadAppendPartDbtArtifactMultipartUploadAppendPart,
    )
    from .dbt_artifact_multipart_upload_complete import (
        DbtArtifactMultipartUploadCompleteDbtArtifactMultipartUploadComplete,
    )
    from .dbt_artifact_multipart_upload_create import (
        DbtArtifactMultipartUploadCreateDbtArtifactMultipartUploadCreate,
    )
    from .dbt_artifact_upload import DbtArtifactUploadDbtArtifactUpload
    from .dbt_cloud_credential_secret_changed import (
        DbtCloudCredentialSecretChangedDbtCloudCredentialSecretChanged,
    )
    from .delete_catalog_asset_tags import DeleteCatalogAssetTagsCatalogAssetTagsDelete
    from .delete_channel import DeleteChannelChannelDelete
    from .delete_credential import DeleteCredentialCredentialsDelete
    from .delete_credentials import DeleteCredentialsCredentialsDelete
    from .delete_filter import DeleteFilterFiltersDelete
    from .delete_filters import DeleteFiltersFiltersDelete
    from .delete_identity import DeleteIdentityIdentityDelete
    from .delete_identity_provider import DeleteIdentityProviderIdentityProviderDelete
    from .delete_lineage_edges import DeleteLineageEdgesLineageEdgesDelete
    from .delete_namespaces import DeleteNamespacesNamespacesDelete
    from .delete_notification_rule import DeleteNotificationRuleNotificationRuleDelete
    from .delete_segmentation import DeleteSegmentationSegmentationsDelete
    from .delete_source import DeleteSourceSourcesDelete
    from .delete_sources import DeleteSourcesSourcesDelete
    from .delete_tags import DeleteTagsTagsDelete
    from .delete_team import DeleteTeamTeamDelete
    from .delete_user import DeleteUserUserDelete
    from .delete_validators import DeleteValidatorsValidatorsDelete
    from .delete_window import DeleteWindowWindowsDelete
    from .delete_windows import DeleteWindowsWindowsDelete
    from .dismiss_validator_recommendation import (
        DismissValidatorRecommendationValidatorRecommendationDismiss,
    )
    from .gcp_credential_secret_changed import (
        GcpCredentialSecretChangedGcpCredentialSecretChanged,
    )
    from .get_channel_by_resource_name import (
        GetChannelByResourceNameChannelByResourceNameChannel,
        GetChannelByResourceNameChannelByResourceNameMsTeamsChannel,
        GetChannelByResourceNameChannelByResourceNameSlackChannel,
        GetChannelByResourceNameChannelByResourceNameWebhookChannel,
    )
    from .get_credential_by_resource_name import (
        GetCredentialByResourceNameCredentialByResourceNameAwsAthenaCredential,
        GetCredentialByResourceNameCredentialByResourceNameAwsCredential,
        GetCredentialByResourceNameCredentialByResourceNameAwsRedshiftCredential,
        GetCredentialByResourceNameCredentialByResourceNameAzureSynapseEntraIdCredential,
        GetCredentialByResourceNameCredentialByResourceNameAzureSynapseSqlCredential,
        GetCredentialByResourceNameCredentialByResourceNameClickHouseCredential,
        GetCredentialByResourceNameCredentialByResourceNameCredential,
        GetCredentialByResourceNameCredentialByResourceNameDatabricksCredential,
        GetCredentialByResourceNameCredentialByResourceNameDbtCloudCredential,
        GetCredentialByResourceNameCredentialByResourceNameDbtCoreCredential,
        GetCredentialByResourceNameCredentialByResourceNameGcpCredential,
        GetCredentialByResourceNameCredentialByResourceNameKafkaSaslSslPlainCredential,
        GetCredentialByResourceNameCredentialByResourceNameKafkaSslCredential,
        GetCredentialByResourceNameCredentialByResourceNameLookerCredential,
        GetCredentialByResourceNameCredentialByResourceNameMsPowerBiCredential,
        GetCredentialByResourceNameCredentialByResourceNamePostgreSqlCredential,
        GetCredentialByResourceNameCredentialByResourceNameSnowflakeCredential,
        GetCredentialByResourceNameCredentialByResourceNameTableauConnectedAppCredential,
        GetCredentialByResourceNameCredentialByResourceNameTableauPersonalAccessTokenCredential,
    )
    from .get_databricks_warehouse_info import (
        GetDatabricksWarehouseInfoDatabricksWarehouseInfo,
    )
    from .get_filter import (
        GetFilterFilterBooleanFilter,
        GetFilterFilterEnumFilter,
        GetFilterFilterFilter,
        GetFilterFilterNullFilter,
        GetFilterFilterSqlFilter,
        GetFilterFilterStringFilter,
        GetFilterFilterThresholdFilter,
    )
    from .get_group_incidents import GetGroupIncidentsIncidentGroup
    from .get_identity_provider_by_resource_name import (
        GetIdentityProviderByResourceNameIdentityProviderByResourceNameIdentityProvider,
        GetIdentityProviderByResourceNameIdentityProviderByResourceNameSamlIdentityProvider,
    )
    from .get_incident_group import GetIncidentGroupIncidentGroup
    from .get_incident_groups import GetIncidentGroupsIncidentGroups
    from .get_incident_past_groups import GetIncidentPastGroupsIncidentGroup
    from .get_incident_related_groups import (
        GetIncidentRelatedGroupsIncidentRelatedGroups,
    )
    from .get_lineage_edge import GetLineageEdgeLineageEdge
    from .get_lineage_graph import GetLineageGraphLineageGraph
    from .get_namespace import GetNamespaceNamespace
    from .get_notification_rule import GetNotificationRuleNotificationRule
    from .get_notification_rule_by_resource_name import (
        GetNotificationRuleByResourceNameNotificationRuleByResourceName,
    )
    from .get_segmentation import GetSegmentationSegmentation
    from .get_segmentation_by_resource_name import (
        GetSegmentationByResourceNameSegmentationByResourceName,
    )
    from .get_segments_by_segmentation import GetSegmentsBySegmentationSegmentation
    from .get_source import (
        GetSourceSourceAwsAthenaSource,
        GetSourceSourceAwsKinesisSource,
        GetSourceSourceAwsRedshiftSource,
        GetSourceSourceAwsS3Source,
        GetSourceSourceAzureSynapseSource,
        GetSourceSourceClickHouseSource,
        GetSourceSourceDatabricksSource,
        GetSourceSourceDbtModelRunSource,
        GetSourceSourceDbtTestResultSource,
        GetSourceSourceGcpBigQuerySource,
        GetSourceSourceGcpPubSubLiteSource,
        GetSourceSourceGcpPubSubSource,
        GetSourceSourceGcpStorageSource,
        GetSourceSourceKafkaSource,
        GetSourceSourcePostgreSqlSource,
        GetSourceSourceSnowflakeSource,
        GetSourceSourceSource,
    )
    from .get_source_by_resource_name import (
        GetSourceByResourceNameSourceByResourceNameAwsAthenaSource,
        GetSourceByResourceNameSourceByResourceNameAwsKinesisSource,
        GetSourceByResourceNameSourceByResourceNameAwsRedshiftSource,
        GetSourceByResourceNameSourceByResourceNameAwsS3Source,
        GetSourceByResourceNameSourceByResourceNameAzureSynapseSource,
        GetSourceByResourceNameSourceByResourceNameClickHouseSource,
        GetSourceByResourceNameSourceByResourceNameDatabricksSource,
        GetSourceByResourceNameSourceByResourceNameDbtModelRunSource,
        GetSourceByResourceNameSourceByResourceNameDbtTestResultSource,
        GetSourceByResourceNameSourceByResourceNameGcpBigQuerySource,
        GetSourceByResourceNameSourceByResourceNameGcpPubSubLiteSource,
        GetSourceByResourceNameSourceByResourceNameGcpPubSubSource,
        GetSourceByResourceNameSourceByResourceNameGcpStorageSource,
        GetSourceByResourceNameSourceByResourceNameKafkaSource,
        GetSourceByResourceNameSourceByResourceNamePostgreSqlSource,
        GetSourceByResourceNameSourceByResourceNameSnowflakeSource,
        GetSourceByResourceNameSourceByResourceNameSource,
    )
    from .get_source_by_resource_name_deprecated import (
        GetSourceByResourceNameDeprecatedSourceByResourceNameAwsAthenaSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameAwsKinesisSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameAwsRedshiftSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameAwsS3Source,
        GetSourceByResourceNameDeprecatedSourceByResourceNameAzureSynapseSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameClickHouseSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameDatabricksSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameDbtModelRunSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameDbtTestResultSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameGcpBigQuerySource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameGcpPubSubLiteSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameGcpPubSubSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameGcpStorageSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameKafkaSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNamePostgreSqlSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameSnowflakeSource,
        GetSourceByResourceNameDeprecatedSourceByResourceNameSource,
    )
    from .get_source_incident_groups import GetSourceIncidentGroupsSource
    from .get_source_manual_poll_progress import (
        GetSourceManualPollProgressSourceManualPollProgress,
    )
    from .get_source_recommended_validators import GetSourceRecommendedValidatorsSource
    from .get_tag import GetTagTag
    from .get_team import GetTeamTeam
    from .get_teams import GetTeamsTeams
    from .get_user_by_resource_name import GetUserByResourceNameUserByResourceName
    from .get_validator import (
        GetValidatorValidatorCategoricalDistributionValidator,
        GetValidatorValidatorFreshnessValidator,
        GetValidatorValidatorNumericAnomalyValidator,
        GetValidatorValidatorNumericDistributionValidator,
        GetValidatorValidatorNumericValidator,
        GetValidatorValidatorRelativeTimeValidator,
        GetValidatorValidatorRelativeVolumeValidator,
        GetValidatorValidatorSqlValidator,
        GetValidatorValidatorValidator,
        GetValidatorValidatorVolumeValidator,
    )
    from .get_validator_by_resource_name import (
        GetValidatorByResourceNameValidatorByResourceNameCategoricalDistributionValidator,
        GetValidatorByResourceNameValidatorByResourceNameFreshnessValidator,
        GetValidatorByResourceNameValidatorByResourceNameNumericAnomalyValidator,
        GetValidatorByResourceNameValidatorByResourceNameNumericDistributionValidator,
        GetValidatorByResourceNameValidatorByResourceNameNumericValidator,
        GetValidatorByResourceNameValidatorByResourceNameRelativeTimeValidator,
        GetValidatorByResourceNameValidatorByResourceNameRelativeVolumeValidator,
        GetValidatorByResourceNameValidatorByResourceNameSqlValidator,
        GetValidatorByResourceNameValidatorByResourceNameValidator,
        GetValidatorByResourceNameValidatorByResourceNameVolumeValidator,
    )
    from .get_validator_incidents import GetValidatorIncidentsValidator
    from .get_validator_metric_debug_info import (
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsAthenaSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsRedShiftSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsS3SourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoAzureSynapseSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoClickHouseSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoDatabricksSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoGcpBigQuerySourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoGcpStorageSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoPostgreSQLSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoSnowflakeSourceDebugInfo,
        GetValidatorMetricDebugInfoValidatorMetricDebugInfoValidatorMetricDebugInfo,
    )
    from .get_validator_metric_debug_records import (
        GetValidatorMetricDebugRecordsValidatorMetricDebugRecords,
    )
    from .get_validator_segment_metrics import (
        GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithDifferenceThresholdHistory,
        GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithDynamicThresholdHistory,
        GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithFixedThresholdHistory,
    )
    from .get_window import (
        GetWindowWindowFileWindow,
        GetWindowWindowFixedBatchWindow,
        GetWindowWindowTumblingWindow,
        GetWindowWindowWindow,
    )
    from .get_window_by_resource_name import (
        GetWindowByResourceNameWindowByResourceNameFileWindow,
        GetWindowByResourceNameWindowByResourceNameFixedBatchWindow,
        GetWindowByResourceNameWindowByResourceNameTumblingWindow,
        GetWindowByResourceNameWindowByResourceNameWindow,
    )
    from .input_types import (
        AwsAthenaCredentialCreateInput,
        AwsAthenaCredentialSecretChangedInput,
        AwsAthenaCredentialUpdateInput,
        AwsAthenaInferSchemaInput,
        AwsAthenaSourceCreateInput,
        AwsAthenaSourceUpdateInput,
        AwsCredentialCreateInput,
        AwsCredentialSecretChangedInput,
        AwsCredentialUpdateInput,
        AwsKinesisInferSchemaInput,
        AwsKinesisSourceCreateInput,
        AwsKinesisSourceUpdateInput,
        AwsRedshiftCredentialCreateInput,
        AwsRedshiftCredentialSecretChangedInput,
        AwsRedshiftCredentialUpdateInput,
        AwsRedshiftInferSchemaInput,
        AwsRedshiftSourceCreateInput,
        AwsRedshiftSourceUpdateInput,
        AwsS3InferSchemaInput,
        AwsS3SourceCreateInput,
        AwsS3SourceUpdateInput,
        AzureSynapseEntraIdCredentialCreateInput,
        AzureSynapseEntraIdCredentialSecretChangedInput,
        AzureSynapseEntraIdCredentialUpdateInput,
        AzureSynapseInferSchemaInput,
        AzureSynapseSourceCreateInput,
        AzureSynapseSourceUpdateInput,
        AzureSynapseSqlCredentialCreateInput,
        AzureSynapseSqlCredentialSecretChangedInput,
        AzureSynapseSqlCredentialUpdateInput,
        BooleanFilterCreateInput,
        BooleanFilterUpdateInput,
        CatalogAssetTagsAddInput,
        CatalogAssetTagsDeleteInput,
        CategoricalDistributionValidatorCreateInput,
        CategoricalDistributionValidatorUpdateInput,
        ChannelDeleteInput,
        ClickHouseCredentialCreateInput,
        ClickHouseCredentialSecretChangedInput,
        ClickHouseCredentialUpdateInput,
        ClickHouseInferSchemaInput,
        ClickHouseSourceCreateInput,
        ClickHouseSourceUpdateInput,
        DatabricksCredentialCreateInput,
        DatabricksCredentialSecretChangedInput,
        DatabricksCredentialUpdateInput,
        DatabricksInferSchemaInput,
        DatabricksSourceCreateInput,
        DatabricksSourceUpdateInput,
        DatabricksStartWarehouseInput,
        DatabricksWarehouseInfoInput,
        DbtArtifactMultipartUploadAppendPartInput,
        DbtArtifactMultipartUploadCompleteInput,
        DbtArtifactMultipartUploadCreateInput,
        DbtArtifactUploadInput,
        DbtCloudCredentialCreateInput,
        DbtCloudCredentialSecretChangedInput,
        DbtCloudCredentialUpdateInput,
        DbtCoreCredentialCreateInput,
        DbtCoreCredentialUpdateInput,
        DbtModelRunSourceCreateInput,
        DbtModelRunSourceUpdateInput,
        DbtTestResultSourceCreateInput,
        DbtTestResultSourceUpdateInput,
        DemoCredentialCreateInput,
        DemoCredentialUpdateInput,
        DemoSourceCreateInput,
        DemoSourceUpdateInput,
        DifferenceThresholdCreateInput,
        DynamicThresholdCreateInput,
        EnumFilterCreateInput,
        EnumFilterUpdateInput,
        FileWindowCreateInput,
        FileWindowUpdateInput,
        FixedBatchWindowCreateInput,
        FixedBatchWindowUpdateInput,
        FixedThresholdCreateInput,
        FreshnessValidatorCreateInput,
        FreshnessValidatorUpdateInput,
        GcpBigQueryInferSchemaInput,
        GcpBigQuerySourceCreateInput,
        GcpBigQuerySourceUpdateInput,
        GcpCredentialCreateInput,
        GcpCredentialSecretChangedInput,
        GcpCredentialUpdateInput,
        GcpPubSubInferSchemaInput,
        GcpPubSubLiteInferSchemaInput,
        GcpPubSubLiteSourceCreateInput,
        GcpPubSubLiteSourceUpdateInput,
        GcpPubSubSourceCreateInput,
        GcpPubSubSourceUpdateInput,
        GcpStorageInferSchemaInput,
        GcpStorageSourceCreateInput,
        GcpStorageSourceUpdateInput,
        GlobalWindowCreateInput,
        GlobalWindowUpdateInput,
        IdentityDeleteInput,
        IdentityProviderDeleteInput,
        IncidentGroupOwnerUpdateInput,
        IncidentGroupsFilter,
        IncidentGroupsSort,
        IncidentGroupStatusUpdateInput,
        IncidentsFilter,
        IncidentsSort,
        IncidentStatusUpdateInput,
        KafkaInferSchemaInput,
        KafkaSaslSslPlainCredentialCreateInput,
        KafkaSaslSslPlainCredentialSecretChangedInput,
        KafkaSaslSslPlainCredentialUpdateInput,
        KafkaSourceCreateInput,
        KafkaSourceUpdateInput,
        KafkaSslCredentialCreateInput,
        KafkaSslCredentialSecretChangedInput,
        KafkaSslCredentialUpdateInput,
        LineageEdgeCreateInput,
        LineageGraphInput,
        LocalIdentityProviderUpdateInput,
        LookerCredentialCreateInput,
        LookerCredentialSecretChangedInput,
        LookerCredentialUpdateInput,
        MsPowerBiCredentialCreateInput,
        MsPowerBiCredentialSecretChangedInput,
        MsPowerBiCredentialUpdateInput,
        MsTeamsChannelCreateInput,
        MsTeamsChannelSecretChangedInput,
        MsTeamsChannelUpdateInput,
        MuteIncidentsInput,
        NamespaceCreateInput,
        NamespaceRolesRevokeInput,
        NamespaceRolesUpdateInput,
        NamespaceUpdateInput,
        NotificationRuleCreateInput,
        NotificationRuleDeleteInput,
        NotificationRuleUpdateInput,
        NullFilterCreateInput,
        NullFilterUpdateInput,
        NumericAnomalyValidatorCreateInput,
        NumericAnomalyValidatorUpdateInput,
        NumericDistributionValidatorCreateInput,
        NumericDistributionValidatorUpdateInput,
        NumericValidatorCreateInput,
        NumericValidatorUpdateInput,
        OwnerNotificationRuleConditionCreateInput,
        OwnerNotificationRuleConditionUpdateInput,
        PaginationInput,
        PastIncidentGroupsFilter,
        PostgreSqlCredentialCreateInput,
        PostgreSqlCredentialSecretChangedInput,
        PostgreSqlCredentialUpdateInput,
        PostgreSqlInferSchemaInput,
        PostgreSqlSourceCreateInput,
        PostgreSqlSourceUpdateInput,
        RelativeTimeValidatorCreateInput,
        RelativeTimeValidatorUpdateInput,
        RelativeVolumeValidatorCreateInput,
        RelativeVolumeValidatorUpdateInput,
        ResourceFilter,
        ResourceNamespaceUpdateInput,
        SamlIdentityProviderCreateInput,
        SamlIdentityProviderUpdateInput,
        SegmentationCreateInput,
        SegmentationUpdateInput,
        SegmentNotificationRuleConditionCreateInput,
        SegmentNotificationRuleConditionUpdateInput,
        SeverityNotificationRuleConditionCreateInput,
        SeverityNotificationRuleConditionUpdateInput,
        SlackChannelCreateInput,
        SlackChannelSecretChangedInput,
        SlackChannelUpdateInput,
        SnowflakeCredentialCreateInput,
        SnowflakeCredentialSecretChangedInput,
        SnowflakeCredentialUpdateInput,
        SnowflakeInferSchemaInput,
        SnowflakeSourceCreateInput,
        SnowflakeSourceUpdateInput,
        SourceNotificationRuleConditionCreateInput,
        SourceNotificationRuleConditionUpdateInput,
        SourceOwnerUpdateInput,
        SqlFilterCreateInput,
        SqlFilterUpdateInput,
        SqlFilterVerificationInput,
        SqlValidatorCreateInput,
        SqlValidatorQueryVerificationInput,
        SqlValidatorUpdateInput,
        StringFilterCreateInput,
        StringFilterUpdateInput,
        TableauConnectedAppCredentialCreateInput,
        TableauConnectedAppCredentialSecretChangedInput,
        TableauConnectedAppCredentialUpdateInput,
        TableauPersonalAccessTokenCredentialCreateInput,
        TableauPersonalAccessTokenCredentialSecretChangedInput,
        TableauPersonalAccessTokenCredentialUpdateInput,
        TagCreateInput,
        TagNotificationRuleConditionCreateInput,
        TagNotificationRuleConditionUpdateInput,
        TagUpdateInput,
        TeamCreateInput,
        TeamMembersUpdateInput,
        TeamUpdateInput,
        ThresholdFilterCreateInput,
        ThresholdFilterUpdateInput,
        TimeRangeInput,
        TumblingWindowCreateInput,
        TumblingWindowUpdateInput,
        TypeNotificationRuleConditionCreateInput,
        TypeNotificationRuleConditionUpdateInput,
        UserCreateInput,
        UserDeleteInput,
        UserUpdateInput,
        ValidatorMetricDebugInfoInput,
        ValidatorRecommendationApplyInput,
        ValidatorRecommendationDismissInput,
        ValidatorSegmentMetricsInput,
        ValidatorWithDifferenceThresholdUpdateInput,
        ValidatorWithDynamicThresholdUpdateInput,
        ValidatorWithFixedThresholdUpdateInput,
        VolumeValidatorCreateInput,
        VolumeValidatorUpdateInput,
        WebhookChannelCreateInput,
        WebhookChannelSecretChangedInput,
        WebhookChannelUpdateInput,
    )
    from .kafka_sasl_ssl_plain_credential_secret_changed import (
        KafkaSaslSslPlainCredentialSecretChangedKafkaSaslSslPlainCredentialSecretChanged,
    )
    from .kafka_ssl_credential_secret_changed import (
        KafkaSslCredentialSecretChangedKafkaSslCredentialSecretChanged,
    )
    from .list_channels import (
        ListChannelsChannelsListChannel,
        ListChannelsChannelsListMsTeamsChannel,
        ListChannelsChannelsListSlackChannel,
        ListChannelsChannelsListWebhookChannel,
    )
    from .list_credentials import (
        ListCredentialsCredentialsListAwsAthenaCredential,
        ListCredentialsCredentialsListAwsCredential,
        ListCredentialsCredentialsListAwsRedshiftCredential,
        ListCredentialsCredentialsListAzureSynapseEntraIdCredential,
        ListCredentialsCredentialsListAzureSynapseSqlCredential,
        ListCredentialsCredentialsListClickHouseCredential,
        ListCredentialsCredentialsListCredential,
        ListCredentialsCredentialsListDatabricksCredential,
        ListCredentialsCredentialsListDbtCloudCredential,
        ListCredentialsCredentialsListDbtCoreCredential,
        ListCredentialsCredentialsListGcpCredential,
        ListCredentialsCredentialsListKafkaSaslSslPlainCredential,
        ListCredentialsCredentialsListKafkaSslCredential,
        ListCredentialsCredentialsListLookerCredential,
        ListCredentialsCredentialsListMsPowerBiCredential,
        ListCredentialsCredentialsListPostgreSqlCredential,
        ListCredentialsCredentialsListSnowflakeCredential,
        ListCredentialsCredentialsListTableauConnectedAppCredential,
        ListCredentialsCredentialsListTableauPersonalAccessTokenCredential,
    )
    from .list_filters import (
        ListFiltersFiltersListBooleanFilter,
        ListFiltersFiltersListEnumFilter,
        ListFiltersFiltersListFilter,
        ListFiltersFiltersListNullFilter,
        ListFiltersFiltersListSqlFilter,
        ListFiltersFiltersListStringFilter,
        ListFiltersFiltersListThresholdFilter,
    )
    from .list_identity_providers import (
        ListIdentityProvidersIdentityProvidersListIdentityProvider,
        ListIdentityProvidersIdentityProvidersListSamlIdentityProvider,
    )
    from .list_namespaces import ListNamespacesNamespaces
    from .list_notification_rules import ListNotificationRulesNotificationRulesList
    from .list_resource_namespaces import ListResourceNamespacesResourceNamespacesList
    from .list_segmentations import ListSegmentationsSegmentationsList
    from .list_sources import (
        ListSourcesSourcesListAwsAthenaSource,
        ListSourcesSourcesListAwsKinesisSource,
        ListSourcesSourcesListAwsRedshiftSource,
        ListSourcesSourcesListAwsS3Source,
        ListSourcesSourcesListAzureSynapseSource,
        ListSourcesSourcesListClickHouseSource,
        ListSourcesSourcesListDatabricksSource,
        ListSourcesSourcesListDbtModelRunSource,
        ListSourcesSourcesListDbtTestResultSource,
        ListSourcesSourcesListGcpBigQuerySource,
        ListSourcesSourcesListGcpPubSubLiteSource,
        ListSourcesSourcesListGcpPubSubSource,
        ListSourcesSourcesListGcpStorageSource,
        ListSourcesSourcesListKafkaSource,
        ListSourcesSourcesListPostgreSqlSource,
        ListSourcesSourcesListSnowflakeSource,
        ListSourcesSourcesListSource,
    )
    from .list_tags import ListTagsTagsList
    from .list_users import ListUsersUsersList
    from .list_validators import (
        ListValidatorsValidatorsListCategoricalDistributionValidator,
        ListValidatorsValidatorsListFreshnessValidator,
        ListValidatorsValidatorsListNumericAnomalyValidator,
        ListValidatorsValidatorsListNumericDistributionValidator,
        ListValidatorsValidatorsListNumericValidator,
        ListValidatorsValidatorsListRelativeTimeValidator,
        ListValidatorsValidatorsListRelativeVolumeValidator,
        ListValidatorsValidatorsListSqlValidator,
        ListValidatorsValidatorsListValidator,
        ListValidatorsValidatorsListVolumeValidator,
    )
    from .list_windows import (
        ListWindowsWindowsListFileWindow,
        ListWindowsWindowsListFixedBatchWindow,
        ListWindowsWindowsListTumblingWindow,
        ListWindowsWindowsListWindow,
    )
    from .looker_credential_secret_changed import (
        LookerCredentialSecretChangedLookerCredentialSecretChanged,
    )
    from .ms_power_bi_credential_secret_changed import (
        MsPowerBiCredentialSecretChangedMsPowerBiCredentialSecretChanged,
    )
    from .ms_teams_channel_secret_changed import (
        MsTeamsChannelSecretChangedMsTeamsChannelSecretChanged,
    )
    from .mute_incident_group import MuteIncidentGroupIncidentGroupMute
    from .mute_incidents import MuteIncidentsIncidentsMute
    from .mute_source import MuteSourceSourceMute
    from .mute_validator import MuteValidatorValidatorMute
    from .poll_source import PollSourceSourcePoll
    from .poll_source_manually import PollSourceManuallySourceManualPoll
    from .postgre_sql_credential_secret_changed import (
        PostgreSqlCredentialSecretChangedPostgreSqlCredentialSecretChanged,
    )
    from .remove_team_members import RemoveTeamMembersTeamMembersRemove
    from .reset_source import ResetSourceSourceReset
    from .revoke_namespace_roles import RevokeNamespaceRolesNamespaceRolesRevoke
    from .segments import SegmentsSegments
    from .segments_by_resource_name import SegmentsByResourceNameSegmentsByResourceName
    from .slack_channel_secret_changed import (
        SlackChannelSecretChangedSlackChannelSecretChanged,
    )
    from .snowflake_credential_secret_changed import (
        SnowflakeCredentialSecretChangedSnowflakeCredentialSecretChanged,
    )
    from .sql_filter_verification import SqlFilterVerificationSqlFilterVerification
    from .sql_validator_query_verification import (
        SqlValidatorQueryVerificationSqlValidatorQueryVerification,
    )
    from .start_source import StartSourceSourceStart
    from .stop_source import StopSourceSourceStop
    from .tableau_connected_app_credential_secret_changed import (
        TableauConnectedAppCredentialSecretChangedTableauConnectedAppCredentialSecretChanged,
    )
    from .tableau_personal_access_token_credential_secret_changed import (
        TableauPersonalAccessTokenCredentialSecretChangedTableauPersonalAccessTokenCredentialSecretChanged,
    )
    from .translate_incident_v_1_to_group_id import (
        TranslateIncidentV1ToGroupIdTranslateIncidentV1,
    )
    from .unmute_incident_group import UnmuteIncidentGroupIncidentGroupUnmute
    from .unmute_incidents import UnmuteIncidentsIncidentsUnmute
    from .unmute_source import UnmuteSourceSourceUnmute
    from .unmute_validator import UnmuteValidatorValidatorUnmute
    from .update_aws_athena_credential import (
        UpdateAwsAthenaCredentialAwsAthenaCredentialUpdate,
    )
    from .update_aws_athena_source import UpdateAwsAthenaSourceAwsAthenaSourceUpdate
    from .update_aws_credential import UpdateAwsCredentialAwsCredentialUpdate
    from .update_aws_kinesis_source import UpdateAwsKinesisSourceAwsKinesisSourceUpdate
    from .update_aws_redshift_credential import (
        UpdateAwsRedshiftCredentialAwsRedshiftCredentialUpdate,
    )
    from .update_aws_redshift_source import (
        UpdateAwsRedshiftSourceAwsRedshiftSourceUpdate,
    )
    from .update_aws_s3_source import UpdateAwsS3SourceAwsS3SourceUpdate
    from .update_azure_synapse_entra_id_credential import (
        UpdateAzureSynapseEntraIdCredentialAzureSynapseEntraIdCredentialUpdate,
    )
    from .update_azure_synapse_source import (
        UpdateAzureSynapseSourceAzureSynapseSourceUpdate,
    )
    from .update_azure_synapse_sql_credential import (
        UpdateAzureSynapseSqlCredentialAzureSynapseSqlCredentialUpdate,
    )
    from .update_boolean_filter import UpdateBooleanFilterBooleanFilterUpdate
    from .update_categorical_distribution_validator import (
        UpdateCategoricalDistributionValidatorCategoricalDistributionValidatorUpdate,
    )
    from .update_channel_namespace import UpdateChannelNamespaceChannelNamespaceUpdate
    from .update_click_house_credential import (
        UpdateClickHouseCredentialClickHouseCredentialUpdate,
    )
    from .update_click_house_source import UpdateClickHouseSourceClickHouseSourceUpdate
    from .update_credential_namespace import (
        UpdateCredentialNamespaceCredentialNamespaceUpdate,
    )
    from .update_databricks_credential import (
        UpdateDatabricksCredentialDatabricksCredentialUpdate,
    )
    from .update_databricks_source import UpdateDatabricksSourceDatabricksSourceUpdate
    from .update_dbt_cloud_credential import (
        UpdateDbtCloudCredentialDbtCloudCredentialUpdate,
    )
    from .update_dbt_core_credential import (
        UpdateDbtCoreCredentialDbtCoreCredentialUpdate,
    )
    from .update_dbt_model_run_source import (
        UpdateDbtModelRunSourceDbtModelRunSourceUpdate,
    )
    from .update_dbt_test_result_source import (
        UpdateDbtTestResultSourceDbtTestResultSourceUpdate,
    )
    from .update_demo_credential import UpdateDemoCredentialDemoCredentialUpdate
    from .update_demo_source import UpdateDemoSourceDemoSourceUpdate
    from .update_enum_filter import UpdateEnumFilterEnumFilterUpdate
    from .update_file_window import UpdateFileWindowFileWindowUpdate
    from .update_fixed_batch_window import UpdateFixedBatchWindowFixedBatchWindowUpdate
    from .update_freshness_validator import (
        UpdateFreshnessValidatorFreshnessValidatorUpdate,
    )
    from .update_gcp_big_query_source import (
        UpdateGcpBigQuerySourceGcpBigQuerySourceUpdate,
    )
    from .update_gcp_credential import UpdateGcpCredentialGcpCredentialUpdate
    from .update_gcp_pub_sub_lite_source import (
        UpdateGcpPubSubLiteSourceGcpPubSubLiteSourceUpdate,
    )
    from .update_gcp_pub_sub_source import UpdateGcpPubSubSourceGcpPubSubSourceUpdate
    from .update_gcp_storage_source import UpdateGcpStorageSourceGcpStorageSourceUpdate
    from .update_global_window import UpdateGlobalWindowGlobalWindowUpdate
    from .update_incident_group_owner import (
        UpdateIncidentGroupOwnerIncidentGroupOwnerUpdate,
    )
    from .update_incident_group_status import (
        UpdateIncidentGroupStatusIncidentGroupStatusUpdate,
    )
    from .update_incident_status import UpdateIncidentStatusIncidentStatusUpdate
    from .update_kafka_sasl_ssl_plain_credential import (
        UpdateKafkaSaslSslPlainCredentialKafkaSaslSslPlainCredentialUpdate,
    )
    from .update_kafka_source import UpdateKafkaSourceKafkaSourceUpdate
    from .update_kafka_ssl_credential import (
        UpdateKafkaSslCredentialKafkaSslCredentialUpdate,
    )
    from .update_local_identity_provider import (
        UpdateLocalIdentityProviderLocalIdentityProviderUpdate,
    )
    from .update_looker_credential import UpdateLookerCredentialLookerCredentialUpdate
    from .update_ms_power_bi_credential import (
        UpdateMsPowerBiCredentialMsPowerBiCredentialUpdate,
    )
    from .update_ms_teams_channel import UpdateMsTeamsChannelMsTeamsChannelUpdate
    from .update_namespace import UpdateNamespaceNamespaceUpdate
    from .update_namespace_roles import UpdateNamespaceRolesNamespaceRolesUpdate
    from .update_notification_rule import UpdateNotificationRuleNotificationRuleUpdate
    from .update_null_filter import UpdateNullFilterNullFilterUpdate
    from .update_numeric_anomaly_validator import (
        UpdateNumericAnomalyValidatorNumericAnomalyValidatorUpdate,
    )
    from .update_numeric_distribution_validator import (
        UpdateNumericDistributionValidatorNumericDistributionValidatorUpdate,
    )
    from .update_numeric_validator import UpdateNumericValidatorNumericValidatorUpdate
    from .update_owner_notification_rule_condition import (
        UpdateOwnerNotificationRuleConditionOwnerNotificationRuleConditionUpdate,
    )
    from .update_postgre_sql_credential import (
        UpdatePostgreSqlCredentialPostgreSqlCredentialUpdate,
    )
    from .update_postgre_sql_source import UpdatePostgreSqlSourcePostgreSqlSourceUpdate
    from .update_relative_time_validator import (
        UpdateRelativeTimeValidatorRelativeTimeValidatorUpdate,
    )
    from .update_relative_volume_validator import (
        UpdateRelativeVolumeValidatorRelativeVolumeValidatorUpdate,
    )
    from .update_saml_identity_provider import (
        UpdateSamlIdentityProviderSamlIdentityProviderUpdate,
    )
    from .update_segment_notification_rule_condition import (
        UpdateSegmentNotificationRuleConditionSegmentNotificationRuleConditionUpdate,
    )
    from .update_segmentation import UpdateSegmentationSegmentationUpdate
    from .update_severity_notification_rule_condition import (
        UpdateSeverityNotificationRuleConditionSeverityNotificationRuleConditionUpdate,
    )
    from .update_slack_channel import UpdateSlackChannelSlackChannelUpdate
    from .update_snowflake_credential import (
        UpdateSnowflakeCredentialSnowflakeCredentialUpdate,
    )
    from .update_snowflake_source import UpdateSnowflakeSourceSnowflakeSourceUpdate
    from .update_source_notification_rule_condition import (
        UpdateSourceNotificationRuleConditionSourceNotificationRuleConditionUpdate,
    )
    from .update_source_owner import UpdateSourceOwnerSourceOwnerUpdate
    from .update_sql_filter import UpdateSqlFilterSqlFilterUpdate
    from .update_sql_validator import UpdateSqlValidatorSqlValidatorUpdate
    from .update_string_filter import UpdateStringFilterStringFilterUpdate
    from .update_tableau_connected_app_credential import (
        UpdateTableauConnectedAppCredentialTableauConnectedAppCredentialUpdate,
    )
    from .update_tableau_personal_access_token_credential import (
        UpdateTableauPersonalAccessTokenCredentialTableauPersonalAccessTokenCredentialUpdate,
    )
    from .update_tag import UpdateTagTagUpdate
    from .update_tag_notification_rule_condition import (
        UpdateTagNotificationRuleConditionTagNotificationRuleConditionUpdate,
    )
    from .update_team import UpdateTeamTeamUpdate
    from .update_threshold_filter import UpdateThresholdFilterThresholdFilterUpdate
    from .update_tumbling_window import UpdateTumblingWindowTumblingWindowUpdate
    from .update_type_notification_rule_condition import (
        UpdateTypeNotificationRuleConditionTypeNotificationRuleConditionUpdate,
    )
    from .update_user import UpdateUserUserUpdate
    from .update_validator_with_difference_threshold import (
        UpdateValidatorWithDifferenceThresholdValidatorWithDifferenceThresholdUpdate,
    )
    from .update_validator_with_dynamic_threshold import (
        UpdateValidatorWithDynamicThresholdValidatorWithDynamicThresholdUpdate,
    )
    from .update_validator_with_fixed_threshold import (
        UpdateValidatorWithFixedThresholdValidatorWithFixedThresholdUpdate,
    )
    from .update_volume_validator import UpdateVolumeValidatorVolumeValidatorUpdate
    from .update_webhook_channel import UpdateWebhookChannelWebhookChannelUpdate
    from .verify_source_schema import VerifySourceSchemaSourceSchemaVerify
    from .webhook_channel_secret_changed import (
        WebhookChannelSecretChangedWebhookChannelSecretChanged,
    )


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def add_catalog_asset_tags(
        self, input: "CatalogAssetTagsAddInput", **kwargs: Any
    ) -> "AddCatalogAssetTagsCatalogAssetTagsAdd":
        from .add_catalog_asset_tags import AddCatalogAssetTags

        query = gql(
            """
            mutation AddCatalogAssetTags($input: CatalogAssetTagsAddInput!) {
              catalogAssetTagsAdd(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AddCatalogAssetTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AddCatalogAssetTags.model_validate(data).catalog_asset_tags_add

    async def add_team_members(
        self, input: "TeamMembersUpdateInput", **kwargs: Any
    ) -> "AddTeamMembersTeamMembersAdd":
        from .add_team_members import AddTeamMembers

        query = gql(
            """
            mutation AddTeamMembers($input: TeamMembersUpdateInput!) {
              teamMembersAdd(input: $input) {
                errors {
                  ...ErrorDetails
                }
                team {
                  ...TeamDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="AddTeamMembers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AddTeamMembers.model_validate(data).team_members_add

    async def apply_validator_recommendation(
        self, input: "ValidatorRecommendationApplyInput", **kwargs: Any
    ) -> "ApplyValidatorRecommendationValidatorRecommendationApply":
        from .apply_validator_recommendation import ApplyValidatorRecommendation

        query = gql(
            """
            mutation ApplyValidatorRecommendation($input: ValidatorRecommendationApplyInput!) {
              validatorRecommendationApply(input: $input) {
                ...ValidatorRecommendationApplication
              }
            }

            fragment ValidatorRecommendationApplication on ValidatorRecommendationApplyResult {
              __typename
              failedIds
              successIds
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="ApplyValidatorRecommendation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ApplyValidatorRecommendation.model_validate(
            data
        ).validator_recommendation_apply

    async def aws_athena_credential_secret_changed(
        self, input: "AwsAthenaCredentialSecretChangedInput", **kwargs: Any
    ) -> "AwsAthenaCredentialSecretChangedAwsAthenaCredentialSecretChanged":
        from .aws_athena_credential_secret_changed import (
            AwsAthenaCredentialSecretChanged,
        )

        query = gql(
            """
            query AwsAthenaCredentialSecretChanged($input: AwsAthenaCredentialSecretChangedInput!) {
              awsAthenaCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AwsAthenaCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AwsAthenaCredentialSecretChanged.model_validate(
            data
        ).aws_athena_credential_secret_changed

    async def aws_credential_secret_changed(
        self, input: "AwsCredentialSecretChangedInput", **kwargs: Any
    ) -> "AwsCredentialSecretChangedAwsCredentialSecretChanged":
        from .aws_credential_secret_changed import AwsCredentialSecretChanged

        query = gql(
            """
            query AwsCredentialSecretChanged($input: AwsCredentialSecretChangedInput!) {
              awsCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AwsCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AwsCredentialSecretChanged.model_validate(
            data
        ).aws_credential_secret_changed

    async def aws_redshift_credential_secret_changed(
        self, input: "AwsRedshiftCredentialSecretChangedInput", **kwargs: Any
    ) -> "AwsRedshiftCredentialSecretChangedAwsRedshiftCredentialSecretChanged":
        from .aws_redshift_credential_secret_changed import (
            AwsRedshiftCredentialSecretChanged,
        )

        query = gql(
            """
            query AwsRedshiftCredentialSecretChanged($input: AwsRedshiftCredentialSecretChangedInput!) {
              awsRedshiftCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AwsRedshiftCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AwsRedshiftCredentialSecretChanged.model_validate(
            data
        ).aws_redshift_credential_secret_changed

    async def azure_synapse_entra_id_credential_secret_changed(
        self, input: "AzureSynapseEntraIdCredentialSecretChangedInput", **kwargs: Any
    ) -> "AzureSynapseEntraIdCredentialSecretChangedAzureSynapseEntraIdCredentialSecretChanged":
        from .azure_synapse_entra_id_credential_secret_changed import (
            AzureSynapseEntraIdCredentialSecretChanged,
        )

        query = gql(
            """
            query AzureSynapseEntraIdCredentialSecretChanged($input: AzureSynapseEntraIdCredentialSecretChangedInput!) {
              azureSynapseEntraIdCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AzureSynapseEntraIdCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AzureSynapseEntraIdCredentialSecretChanged.model_validate(
            data
        ).azure_synapse_entra_id_credential_secret_changed

    async def azure_synapse_sql_credential_secret_changed(
        self, input: "AzureSynapseSqlCredentialSecretChangedInput", **kwargs: Any
    ) -> "AzureSynapseSqlCredentialSecretChangedAzureSynapseSqlCredentialSecretChanged":
        from .azure_synapse_sql_credential_secret_changed import (
            AzureSynapseSqlCredentialSecretChanged,
        )

        query = gql(
            """
            query AzureSynapseSqlCredentialSecretChanged($input: AzureSynapseSqlCredentialSecretChangedInput!) {
              azureSynapseSqlCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="AzureSynapseSqlCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return AzureSynapseSqlCredentialSecretChanged.model_validate(
            data
        ).azure_synapse_sql_credential_secret_changed

    async def backfill_source(
        self, id: SourceId, **kwargs: Any
    ) -> "BackfillSourceSourceBackfill":
        from .backfill_source import BackfillSource

        query = gql(
            """
            mutation BackfillSource($id: SourceId!) {
              sourceBackfill(id: $id) {
                errors {
                  ...ErrorDetails
                }
                state
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="BackfillSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return BackfillSource.model_validate(data).source_backfill

    async def click_house_credential_secret_changed(
        self, input: "ClickHouseCredentialSecretChangedInput", **kwargs: Any
    ) -> "ClickHouseCredentialSecretChangedClickHouseCredentialSecretChanged":
        from .click_house_credential_secret_changed import (
            ClickHouseCredentialSecretChanged,
        )

        query = gql(
            """
            query ClickHouseCredentialSecretChanged($input: ClickHouseCredentialSecretChangedInput!) {
              clickHouseCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="ClickHouseCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ClickHouseCredentialSecretChanged.model_validate(
            data
        ).click_house_credential_secret_changed

    async def create_aws_athena_credential(
        self, input: "AwsAthenaCredentialCreateInput", **kwargs: Any
    ) -> "CreateAwsAthenaCredentialAwsAthenaCredentialCreate":
        from .create_aws_athena_credential import CreateAwsAthenaCredential

        query = gql(
            """
            mutation CreateAwsAthenaCredential($input: AwsAthenaCredentialCreateInput!) {
              awsAthenaCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsAthenaCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsAthenaCredential.model_validate(
            data
        ).aws_athena_credential_create

    async def create_aws_athena_source(
        self, input: "AwsAthenaSourceCreateInput", **kwargs: Any
    ) -> "CreateAwsAthenaSourceAwsAthenaSourceCreate":
        from .create_aws_athena_source import CreateAwsAthenaSource

        query = gql(
            """
            mutation CreateAwsAthenaSource($input: AwsAthenaSourceCreateInput!) {
              awsAthenaSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsAthenaSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsAthenaSource.model_validate(data).aws_athena_source_create

    async def create_aws_credential(
        self, input: "AwsCredentialCreateInput", **kwargs: Any
    ) -> "CreateAwsCredentialAwsCredentialCreate":
        from .create_aws_credential import CreateAwsCredential

        query = gql(
            """
            mutation CreateAwsCredential($input: AwsCredentialCreateInput!) {
              awsCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsCredential.model_validate(data).aws_credential_create

    async def create_aws_kinesis_source(
        self, input: "AwsKinesisSourceCreateInput", **kwargs: Any
    ) -> "CreateAwsKinesisSourceAwsKinesisSourceCreate":
        from .create_aws_kinesis_source import CreateAwsKinesisSource

        query = gql(
            """
            mutation CreateAwsKinesisSource($input: AwsKinesisSourceCreateInput!) {
              awsKinesisSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsKinesisSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsKinesisSource.model_validate(data).aws_kinesis_source_create

    async def create_aws_redshift_credential(
        self, input: "AwsRedshiftCredentialCreateInput", **kwargs: Any
    ) -> "CreateAwsRedshiftCredentialAwsRedshiftCredentialCreate":
        from .create_aws_redshift_credential import CreateAwsRedshiftCredential

        query = gql(
            """
            mutation CreateAwsRedshiftCredential($input: AwsRedshiftCredentialCreateInput!) {
              awsRedshiftCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsRedshiftCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsRedshiftCredential.model_validate(
            data
        ).aws_redshift_credential_create

    async def create_aws_redshift_source(
        self, input: "AwsRedshiftSourceCreateInput", **kwargs: Any
    ) -> "CreateAwsRedshiftSourceAwsRedshiftSourceCreate":
        from .create_aws_redshift_source import CreateAwsRedshiftSource

        query = gql(
            """
            mutation CreateAwsRedshiftSource($input: AwsRedshiftSourceCreateInput!) {
              awsRedshiftSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsRedshiftSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsRedshiftSource.model_validate(data).aws_redshift_source_create

    async def create_aws_s3_source(
        self, input: "AwsS3SourceCreateInput", **kwargs: Any
    ) -> "CreateAwsS3SourceAwsS3SourceCreate":
        from .create_aws_s3_source import CreateAwsS3Source

        query = gql(
            """
            mutation CreateAwsS3Source($input: AwsS3SourceCreateInput!) {
              awsS3SourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAwsS3Source",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAwsS3Source.model_validate(data).aws_s3_source_create

    async def create_azure_synapse_entra_id_credential(
        self, input: "AzureSynapseEntraIdCredentialCreateInput", **kwargs: Any
    ) -> "CreateAzureSynapseEntraIdCredentialAzureSynapseEntraIdCredentialCreate":
        from .create_azure_synapse_entra_id_credential import (
            CreateAzureSynapseEntraIdCredential,
        )

        query = gql(
            """
            mutation CreateAzureSynapseEntraIdCredential($input: AzureSynapseEntraIdCredentialCreateInput!) {
              azureSynapseEntraIdCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAzureSynapseEntraIdCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAzureSynapseEntraIdCredential.model_validate(
            data
        ).azure_synapse_entra_id_credential_create

    async def create_azure_synapse_source(
        self, input: "AzureSynapseSourceCreateInput", **kwargs: Any
    ) -> "CreateAzureSynapseSourceAzureSynapseSourceCreate":
        from .create_azure_synapse_source import CreateAzureSynapseSource

        query = gql(
            """
            mutation CreateAzureSynapseSource($input: AzureSynapseSourceCreateInput!) {
              azureSynapseSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAzureSynapseSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAzureSynapseSource.model_validate(data).azure_synapse_source_create

    async def create_azure_synapse_sql_credential(
        self, input: "AzureSynapseSqlCredentialCreateInput", **kwargs: Any
    ) -> "CreateAzureSynapseSqlCredentialAzureSynapseSqlCredentialCreate":
        from .create_azure_synapse_sql_credential import CreateAzureSynapseSqlCredential

        query = gql(
            """
            mutation CreateAzureSynapseSqlCredential($input: AzureSynapseSqlCredentialCreateInput!) {
              azureSynapseSqlCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateAzureSynapseSqlCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateAzureSynapseSqlCredential.model_validate(
            data
        ).azure_synapse_sql_credential_create

    async def create_boolean_filter(
        self, input: "BooleanFilterCreateInput", **kwargs: Any
    ) -> "CreateBooleanFilterBooleanFilterCreate":
        from .create_boolean_filter import CreateBooleanFilter

        query = gql(
            """
            mutation CreateBooleanFilter($input: BooleanFilterCreateInput!) {
              booleanFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateBooleanFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateBooleanFilter.model_validate(data).boolean_filter_create

    async def create_categorical_distribution_validator_with_difference_threshold(
        self,
        input: "CategoricalDistributionValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateCategoricalDistributionValidatorWithDifferenceThresholdCategoricalDistributionValidatorWithDifferenceThresholdCreate":
        from .create_categorical_distribution_validator_with_difference_threshold import (
            CreateCategoricalDistributionValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateCategoricalDistributionValidatorWithDifferenceThreshold($input: CategoricalDistributionValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              categoricalDistributionValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateCategoricalDistributionValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCategoricalDistributionValidatorWithDifferenceThreshold.model_validate(
            data
        ).categorical_distribution_validator_with_difference_threshold_create

    async def create_categorical_distribution_validator_with_dynamic_threshold(
        self,
        input: "CategoricalDistributionValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateCategoricalDistributionValidatorWithDynamicThresholdCategoricalDistributionValidatorWithDynamicThresholdCreate":
        from .create_categorical_distribution_validator_with_dynamic_threshold import (
            CreateCategoricalDistributionValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateCategoricalDistributionValidatorWithDynamicThreshold($input: CategoricalDistributionValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              categoricalDistributionValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateCategoricalDistributionValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return (
            CreateCategoricalDistributionValidatorWithDynamicThreshold.model_validate(
                data
            ).categorical_distribution_validator_with_dynamic_threshold_create
        )

    async def create_categorical_distribution_validator_with_fixed_threshold(
        self,
        input: "CategoricalDistributionValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateCategoricalDistributionValidatorWithFixedThresholdCategoricalDistributionValidatorWithFixedThresholdCreate":
        from .create_categorical_distribution_validator_with_fixed_threshold import (
            CreateCategoricalDistributionValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateCategoricalDistributionValidatorWithFixedThreshold($input: CategoricalDistributionValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              categoricalDistributionValidatorWithFixedThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateCategoricalDistributionValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateCategoricalDistributionValidatorWithFixedThreshold.model_validate(
            data
        ).categorical_distribution_validator_with_fixed_threshold_create

    async def create_click_house_credential(
        self, input: "ClickHouseCredentialCreateInput", **kwargs: Any
    ) -> "CreateClickHouseCredentialClickHouseCredentialCreate":
        from .create_click_house_credential import CreateClickHouseCredential

        query = gql(
            """
            mutation CreateClickHouseCredential($input: ClickHouseCredentialCreateInput!) {
              clickHouseCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateClickHouseCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateClickHouseCredential.model_validate(
            data
        ).click_house_credential_create

    async def create_click_house_source(
        self, input: "ClickHouseSourceCreateInput", **kwargs: Any
    ) -> "CreateClickHouseSourceClickHouseSourceCreate":
        from .create_click_house_source import CreateClickHouseSource

        query = gql(
            """
            mutation CreateClickHouseSource($input: ClickHouseSourceCreateInput!) {
              clickHouseSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateClickHouseSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateClickHouseSource.model_validate(data).click_house_source_create

    async def create_databricks_credential(
        self, input: "DatabricksCredentialCreateInput", **kwargs: Any
    ) -> "CreateDatabricksCredentialDatabricksCredentialCreate":
        from .create_databricks_credential import CreateDatabricksCredential

        query = gql(
            """
            mutation CreateDatabricksCredential($input: DatabricksCredentialCreateInput!) {
              databricksCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDatabricksCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDatabricksCredential.model_validate(
            data
        ).databricks_credential_create

    async def create_databricks_source(
        self, input: "DatabricksSourceCreateInput", **kwargs: Any
    ) -> "CreateDatabricksSourceDatabricksSourceCreate":
        from .create_databricks_source import CreateDatabricksSource

        query = gql(
            """
            mutation CreateDatabricksSource($input: DatabricksSourceCreateInput!) {
              databricksSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDatabricksSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDatabricksSource.model_validate(data).databricks_source_create

    async def create_dbt_cloud_credential(
        self, input: "DbtCloudCredentialCreateInput", **kwargs: Any
    ) -> "CreateDbtCloudCredentialDbtCloudCredentialCreate":
        from .create_dbt_cloud_credential import CreateDbtCloudCredential

        query = gql(
            """
            mutation CreateDbtCloudCredential($input: DbtCloudCredentialCreateInput!) {
              dbtCloudCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDbtCloudCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDbtCloudCredential.model_validate(data).dbt_cloud_credential_create

    async def create_dbt_core_credential(
        self, input: "DbtCoreCredentialCreateInput", **kwargs: Any
    ) -> "CreateDbtCoreCredentialDbtCoreCredentialCreate":
        from .create_dbt_core_credential import CreateDbtCoreCredential

        query = gql(
            """
            mutation CreateDbtCoreCredential($input: DbtCoreCredentialCreateInput!) {
              dbtCoreCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDbtCoreCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDbtCoreCredential.model_validate(data).dbt_core_credential_create

    async def create_dbt_model_run_source(
        self, input: "DbtModelRunSourceCreateInput", **kwargs: Any
    ) -> "CreateDbtModelRunSourceDbtModelRunSourceCreate":
        from .create_dbt_model_run_source import CreateDbtModelRunSource

        query = gql(
            """
            mutation CreateDbtModelRunSource($input: DbtModelRunSourceCreateInput!) {
              dbtModelRunSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDbtModelRunSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDbtModelRunSource.model_validate(data).dbt_model_run_source_create

    async def create_dbt_test_result_source(
        self, input: "DbtTestResultSourceCreateInput", **kwargs: Any
    ) -> "CreateDbtTestResultSourceDbtTestResultSourceCreate":
        from .create_dbt_test_result_source import CreateDbtTestResultSource

        query = gql(
            """
            mutation CreateDbtTestResultSource($input: DbtTestResultSourceCreateInput!) {
              dbtTestResultSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDbtTestResultSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDbtTestResultSource.model_validate(
            data
        ).dbt_test_result_source_create

    async def create_demo_credential(
        self, input: "DemoCredentialCreateInput", **kwargs: Any
    ) -> "CreateDemoCredentialDemoCredentialCreate":
        from .create_demo_credential import CreateDemoCredential

        query = gql(
            """
            mutation CreateDemoCredential($input: DemoCredentialCreateInput!) {
              demoCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDemoCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDemoCredential.model_validate(data).demo_credential_create

    async def create_demo_source(
        self, input: "DemoSourceCreateInput", **kwargs: Any
    ) -> "CreateDemoSourceDemoSourceCreate":
        from .create_demo_source import CreateDemoSource

        query = gql(
            """
            mutation CreateDemoSource($input: DemoSourceCreateInput!) {
              demoSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateDemoSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateDemoSource.model_validate(data).demo_source_create

    async def create_enum_filter(
        self, input: "EnumFilterCreateInput", **kwargs: Any
    ) -> "CreateEnumFilterEnumFilterCreate":
        from .create_enum_filter import CreateEnumFilter

        query = gql(
            """
            mutation CreateEnumFilter($input: EnumFilterCreateInput!) {
              enumFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateEnumFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateEnumFilter.model_validate(data).enum_filter_create

    async def create_file_window(
        self, input: "FileWindowCreateInput", **kwargs: Any
    ) -> "CreateFileWindowFileWindowCreate":
        from .create_file_window import CreateFileWindow

        query = gql(
            """
            mutation CreateFileWindow($input: FileWindowCreateInput!) {
              fileWindowCreate(input: $input) {
                ...WindowCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowCreation on WindowCreateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateFileWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFileWindow.model_validate(data).file_window_create

    async def create_fixed_batch_window(
        self, input: "FixedBatchWindowCreateInput", **kwargs: Any
    ) -> "CreateFixedBatchWindowFixedBatchWindowCreate":
        from .create_fixed_batch_window import CreateFixedBatchWindow

        query = gql(
            """
            mutation CreateFixedBatchWindow($input: FixedBatchWindowCreateInput!) {
              fixedBatchWindowCreate(input: $input) {
                ...WindowCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowCreation on WindowCreateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateFixedBatchWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFixedBatchWindow.model_validate(data).fixed_batch_window_create

    async def create_freshness_validator_with_difference_threshold(
        self,
        input: "FreshnessValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateFreshnessValidatorWithDifferenceThresholdFreshnessValidatorWithDifferenceThresholdCreate":
        from .create_freshness_validator_with_difference_threshold import (
            CreateFreshnessValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateFreshnessValidatorWithDifferenceThreshold($input: FreshnessValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              freshnessValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateFreshnessValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFreshnessValidatorWithDifferenceThreshold.model_validate(
            data
        ).freshness_validator_with_difference_threshold_create

    async def create_freshness_validator_with_dynamic_threshold(
        self,
        input: "FreshnessValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateFreshnessValidatorWithDynamicThresholdFreshnessValidatorWithDynamicThresholdCreate":
        from .create_freshness_validator_with_dynamic_threshold import (
            CreateFreshnessValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateFreshnessValidatorWithDynamicThreshold($input: FreshnessValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              freshnessValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateFreshnessValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFreshnessValidatorWithDynamicThreshold.model_validate(
            data
        ).freshness_validator_with_dynamic_threshold_create

    async def create_freshness_validator_with_fixed_threshold(
        self,
        input: "FreshnessValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateFreshnessValidatorWithFixedThresholdFreshnessValidatorWithFixedThresholdCreate":
        from .create_freshness_validator_with_fixed_threshold import (
            CreateFreshnessValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateFreshnessValidatorWithFixedThreshold($input: FreshnessValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              freshnessValidatorWithFixedThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateFreshnessValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateFreshnessValidatorWithFixedThreshold.model_validate(
            data
        ).freshness_validator_with_fixed_threshold_create

    async def create_gcp_big_query_source(
        self, input: "GcpBigQuerySourceCreateInput", **kwargs: Any
    ) -> "CreateGcpBigQuerySourceGcpBigQuerySourceCreate":
        from .create_gcp_big_query_source import CreateGcpBigQuerySource

        query = gql(
            """
            mutation CreateGcpBigQuerySource($input: GcpBigQuerySourceCreateInput!) {
              gcpBigQuerySourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGcpBigQuerySource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGcpBigQuerySource.model_validate(data).gcp_big_query_source_create

    async def create_gcp_credential(
        self, input: "GcpCredentialCreateInput", **kwargs: Any
    ) -> "CreateGcpCredentialGcpCredentialCreate":
        from .create_gcp_credential import CreateGcpCredential

        query = gql(
            """
            mutation CreateGcpCredential($input: GcpCredentialCreateInput!) {
              gcpCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGcpCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGcpCredential.model_validate(data).gcp_credential_create

    async def create_gcp_pub_sub_lite_source(
        self, input: "GcpPubSubLiteSourceCreateInput", **kwargs: Any
    ) -> "CreateGcpPubSubLiteSourceGcpPubSubLiteSourceCreate":
        from .create_gcp_pub_sub_lite_source import CreateGcpPubSubLiteSource

        query = gql(
            """
            mutation CreateGcpPubSubLiteSource($input: GcpPubSubLiteSourceCreateInput!) {
              gcpPubSubLiteSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGcpPubSubLiteSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGcpPubSubLiteSource.model_validate(
            data
        ).gcp_pub_sub_lite_source_create

    async def create_gcp_pub_sub_source(
        self, input: "GcpPubSubSourceCreateInput", **kwargs: Any
    ) -> "CreateGcpPubSubSourceGcpPubSubSourceCreate":
        from .create_gcp_pub_sub_source import CreateGcpPubSubSource

        query = gql(
            """
            mutation CreateGcpPubSubSource($input: GcpPubSubSourceCreateInput!) {
              gcpPubSubSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGcpPubSubSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGcpPubSubSource.model_validate(data).gcp_pub_sub_source_create

    async def create_gcp_storage_source(
        self, input: "GcpStorageSourceCreateInput", **kwargs: Any
    ) -> "CreateGcpStorageSourceGcpStorageSourceCreate":
        from .create_gcp_storage_source import CreateGcpStorageSource

        query = gql(
            """
            mutation CreateGcpStorageSource($input: GcpStorageSourceCreateInput!) {
              gcpStorageSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGcpStorageSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGcpStorageSource.model_validate(data).gcp_storage_source_create

    async def create_global_window(
        self, input: "GlobalWindowCreateInput", **kwargs: Any
    ) -> "CreateGlobalWindowGlobalWindowCreate":
        from .create_global_window import CreateGlobalWindow

        query = gql(
            """
            mutation CreateGlobalWindow($input: GlobalWindowCreateInput!) {
              globalWindowCreate(input: $input) {
                ...WindowCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowCreation on WindowCreateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateGlobalWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateGlobalWindow.model_validate(data).global_window_create

    async def create_kafka_sasl_ssl_plain_credential(
        self, input: "KafkaSaslSslPlainCredentialCreateInput", **kwargs: Any
    ) -> "CreateKafkaSaslSslPlainCredentialKafkaSaslSslPlainCredentialCreate":
        from .create_kafka_sasl_ssl_plain_credential import (
            CreateKafkaSaslSslPlainCredential,
        )

        query = gql(
            """
            mutation CreateKafkaSaslSslPlainCredential($input: KafkaSaslSslPlainCredentialCreateInput!) {
              kafkaSaslSslPlainCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateKafkaSaslSslPlainCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateKafkaSaslSslPlainCredential.model_validate(
            data
        ).kafka_sasl_ssl_plain_credential_create

    async def create_kafka_source(
        self, input: "KafkaSourceCreateInput", **kwargs: Any
    ) -> "CreateKafkaSourceKafkaSourceCreate":
        from .create_kafka_source import CreateKafkaSource

        query = gql(
            """
            mutation CreateKafkaSource($input: KafkaSourceCreateInput!) {
              kafkaSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateKafkaSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateKafkaSource.model_validate(data).kafka_source_create

    async def create_kafka_ssl_credential(
        self, input: "KafkaSslCredentialCreateInput", **kwargs: Any
    ) -> "CreateKafkaSslCredentialKafkaSslCredentialCreate":
        from .create_kafka_ssl_credential import CreateKafkaSslCredential

        query = gql(
            """
            mutation CreateKafkaSslCredential($input: KafkaSslCredentialCreateInput!) {
              kafkaSslCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateKafkaSslCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateKafkaSslCredential.model_validate(data).kafka_ssl_credential_create

    async def create_lineage_edge(
        self, input: "LineageEdgeCreateInput", **kwargs: Any
    ) -> "CreateLineageEdgeLineageEdgeCreate":
        from .create_lineage_edge import CreateLineageEdge

        query = gql(
            """
            mutation CreateLineageEdge($input: LineageEdgeCreateInput!) {
              lineageEdgeCreate(input: $input) {
                ...LineageEdgeCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment LineageEdgeCreation on LineageEdgeCreateResult {
              errors {
                ...ErrorDetails
              }
              edge {
                ...LineageEdgeDetails
              }
            }

            fragment LineageEdgeDetails on LineageEdge {
              __typename
              id
              upstream {
                catalogAsset {
                  __typename
                  id
                  name
                }
                field
              }
              downstream {
                catalogAsset {
                  __typename
                  id
                  name
                }
                field
              }
              sqlQuery
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateLineageEdge",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateLineageEdge.model_validate(data).lineage_edge_create

    async def create_looker_credential(
        self, input: "LookerCredentialCreateInput", **kwargs: Any
    ) -> "CreateLookerCredentialLookerCredentialCreate":
        from .create_looker_credential import CreateLookerCredential

        query = gql(
            """
            mutation CreateLookerCredential($input: LookerCredentialCreateInput!) {
              lookerCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateLookerCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateLookerCredential.model_validate(data).looker_credential_create

    async def create_ms_power_bi_credential(
        self, input: "MsPowerBiCredentialCreateInput", **kwargs: Any
    ) -> "CreateMsPowerBiCredentialMsPowerBiCredentialCreate":
        from .create_ms_power_bi_credential import CreateMsPowerBiCredential

        query = gql(
            """
            mutation CreateMsPowerBiCredential($input: MsPowerBiCredentialCreateInput!) {
              msPowerBiCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateMsPowerBiCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateMsPowerBiCredential.model_validate(
            data
        ).ms_power_bi_credential_create

    async def create_ms_teams_channel(
        self, input: "MsTeamsChannelCreateInput", **kwargs: Any
    ) -> "CreateMsTeamsChannelMsTeamsChannelCreate":
        from .create_ms_teams_channel import CreateMsTeamsChannel

        query = gql(
            """
            mutation CreateMsTeamsChannel($input: MsTeamsChannelCreateInput!) {
              msTeamsChannelCreate(input: $input) {
                ...ChannelCreation
              }
            }

            fragment ChannelCreation on ChannelCreateResult {
              errors {
                ...ErrorDetails
              }
              channel {
                ...ChannelDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateMsTeamsChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateMsTeamsChannel.model_validate(data).ms_teams_channel_create

    async def create_namespace(
        self, input: "NamespaceCreateInput", **kwargs: Any
    ) -> "CreateNamespaceNamespaceCreate":
        from .create_namespace import CreateNamespace

        query = gql(
            """
            mutation CreateNamespace($input: NamespaceCreateInput!) {
              namespaceCreate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                namespace {
                  ...NamespaceDetails
                }
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="CreateNamespace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateNamespace.model_validate(data).namespace_create

    async def create_notification_rule(
        self, input: "NotificationRuleCreateInput", **kwargs: Any
    ) -> "CreateNotificationRuleNotificationRuleCreate":
        from .create_notification_rule import CreateNotificationRule

        query = gql(
            """
            mutation CreateNotificationRule($input: NotificationRuleCreateInput!) {
              notificationRuleCreate(input: $input) {
                ...NotificationRuleCreation
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment NotificationRuleConditions on NotificationRuleCondition {
              __typename
              id
              notificationRuleId
              createdAt
              updatedAt
              ... on SourceNotificationRuleCondition {
                config {
                  sources {
                    __typename
                    id
                    name
                    resourceName
                  }
                }
              }
              ... on SeverityNotificationRuleCondition {
                config {
                  severities
                }
              }
              ... on TypeNotificationRuleCondition {
                config {
                  types
                }
              }
              ... on OwnerNotificationRuleCondition {
                config {
                  owners {
                    id
                    displayName
                  }
                }
              }
              ... on TagNotificationRuleCondition {
                config {
                  tags {
                    id
                    key
                    value
                  }
                }
              }
              ... on SegmentNotificationRuleCondition {
                config {
                  segments {
                    field
                    value
                  }
                }
              }
            }

            fragment NotificationRuleCreation on NotificationRuleCreateResult {
              errors {
                code
                message
              }
              notificationRule {
                ...NotificationRuleDetails
              }
            }

            fragment NotificationRuleDetails on NotificationRule {
              __typename
              id
              name
              createdAt
              updatedAt
              conditions {
                ...NotificationRuleConditions
              }
              channel {
                ...ChannelDetails
              }
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateNotificationRule",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNotificationRule.model_validate(data).notification_rule_create

    async def create_null_filter(
        self, input: "NullFilterCreateInput", **kwargs: Any
    ) -> "CreateNullFilterNullFilterCreate":
        from .create_null_filter import CreateNullFilter

        query = gql(
            """
            mutation CreateNullFilter($input: NullFilterCreateInput!) {
              nullFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateNullFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNullFilter.model_validate(data).null_filter_create

    async def create_numeric_anomaly_validator_with_difference_threshold(
        self,
        input: "NumericAnomalyValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericAnomalyValidatorWithDifferenceThresholdNumericAnomalyValidatorWithDifferenceThresholdCreate":
        from .create_numeric_anomaly_validator_with_difference_threshold import (
            CreateNumericAnomalyValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateNumericAnomalyValidatorWithDifferenceThreshold($input: NumericAnomalyValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              numericAnomalyValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericAnomalyValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericAnomalyValidatorWithDifferenceThreshold.model_validate(
            data
        ).numeric_anomaly_validator_with_difference_threshold_create

    async def create_numeric_anomaly_validator_with_dynamic_threshold(
        self,
        input: "NumericAnomalyValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericAnomalyValidatorWithDynamicThresholdNumericAnomalyValidatorWithDynamicThresholdCreate":
        from .create_numeric_anomaly_validator_with_dynamic_threshold import (
            CreateNumericAnomalyValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateNumericAnomalyValidatorWithDynamicThreshold($input: NumericAnomalyValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              numericAnomalyValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericAnomalyValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericAnomalyValidatorWithDynamicThreshold.model_validate(
            data
        ).numeric_anomaly_validator_with_dynamic_threshold_create

    async def create_numeric_anomaly_validator_with_fixed_threshold(
        self,
        input: "NumericAnomalyValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericAnomalyValidatorWithFixedThresholdNumericAnomalyValidatorWithFixedThresholdCreate":
        from .create_numeric_anomaly_validator_with_fixed_threshold import (
            CreateNumericAnomalyValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateNumericAnomalyValidatorWithFixedThreshold($input: NumericAnomalyValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              numericAnomalyValidatorWithFixedThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericAnomalyValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericAnomalyValidatorWithFixedThreshold.model_validate(
            data
        ).numeric_anomaly_validator_with_fixed_threshold_create

    async def create_numeric_distribution_validator_with_difference_threshold(
        self,
        input: "NumericDistributionValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericDistributionValidatorWithDifferenceThresholdNumericDistributionValidatorWithDifferenceThresholdCreate":
        from .create_numeric_distribution_validator_with_difference_threshold import (
            CreateNumericDistributionValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateNumericDistributionValidatorWithDifferenceThreshold($input: NumericDistributionValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              numericDistributionValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericDistributionValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericDistributionValidatorWithDifferenceThreshold.model_validate(
            data
        ).numeric_distribution_validator_with_difference_threshold_create

    async def create_numeric_distribution_validator_with_dynamic_threshold(
        self,
        input: "NumericDistributionValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericDistributionValidatorWithDynamicThresholdNumericDistributionValidatorWithDynamicThresholdCreate":
        from .create_numeric_distribution_validator_with_dynamic_threshold import (
            CreateNumericDistributionValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateNumericDistributionValidatorWithDynamicThreshold($input: NumericDistributionValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              numericDistributionValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericDistributionValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericDistributionValidatorWithDynamicThreshold.model_validate(
            data
        ).numeric_distribution_validator_with_dynamic_threshold_create

    async def create_numeric_distribution_validator_with_fixed_threshold(
        self,
        input: "NumericDistributionValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericDistributionValidatorWithFixedThresholdNumericDistributionValidatorWithFixedThresholdCreate":
        from .create_numeric_distribution_validator_with_fixed_threshold import (
            CreateNumericDistributionValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateNumericDistributionValidatorWithFixedThreshold($input: NumericDistributionValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              numericDistributionValidatorWithFixedThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericDistributionValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericDistributionValidatorWithFixedThreshold.model_validate(
            data
        ).numeric_distribution_validator_with_fixed_threshold_create

    async def create_numeric_validator_with_difference_threshold(
        self,
        input: "NumericValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericValidatorWithDifferenceThresholdNumericValidatorWithDifferenceThresholdCreate":
        from .create_numeric_validator_with_difference_threshold import (
            CreateNumericValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateNumericValidatorWithDifferenceThreshold($input: NumericValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              numericValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericValidatorWithDifferenceThreshold.model_validate(
            data
        ).numeric_validator_with_difference_threshold_create

    async def create_numeric_validator_with_dynamic_threshold(
        self,
        input: "NumericValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericValidatorWithDynamicThresholdNumericValidatorWithDynamicThresholdCreate":
        from .create_numeric_validator_with_dynamic_threshold import (
            CreateNumericValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateNumericValidatorWithDynamicThreshold($input: NumericValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              numericValidatorWithDynamicThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericValidatorWithDynamicThreshold.model_validate(
            data
        ).numeric_validator_with_dynamic_threshold_create

    async def create_numeric_validator_with_fixed_threshold(
        self,
        input: "NumericValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateNumericValidatorWithFixedThresholdNumericValidatorWithFixedThresholdCreate":
        from .create_numeric_validator_with_fixed_threshold import (
            CreateNumericValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateNumericValidatorWithFixedThreshold($input: NumericValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              numericValidatorWithFixedThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateNumericValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateNumericValidatorWithFixedThreshold.model_validate(
            data
        ).numeric_validator_with_fixed_threshold_create

    async def create_owner_notification_rule_condition(
        self, input: "OwnerNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> "CreateOwnerNotificationRuleConditionOwnerNotificationRuleConditionCreate":
        from .create_owner_notification_rule_condition import (
            CreateOwnerNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateOwnerNotificationRuleCondition($input: OwnerNotificationRuleConditionCreateInput!) {
              ownerNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateOwnerNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateOwnerNotificationRuleCondition.model_validate(
            data
        ).owner_notification_rule_condition_create

    async def create_postgre_sql_credential(
        self, input: "PostgreSqlCredentialCreateInput", **kwargs: Any
    ) -> "CreatePostgreSqlCredentialPostgreSqlCredentialCreate":
        from .create_postgre_sql_credential import CreatePostgreSqlCredential

        query = gql(
            """
            mutation CreatePostgreSqlCredential($input: PostgreSqlCredentialCreateInput!) {
              postgreSqlCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreatePostgreSqlCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreatePostgreSqlCredential.model_validate(
            data
        ).postgre_sql_credential_create

    async def create_postgre_sql_source(
        self, input: "PostgreSqlSourceCreateInput", **kwargs: Any
    ) -> "CreatePostgreSqlSourcePostgreSqlSourceCreate":
        from .create_postgre_sql_source import CreatePostgreSqlSource

        query = gql(
            """
            mutation CreatePostgreSqlSource($input: PostgreSqlSourceCreateInput!) {
              postgreSqlSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreatePostgreSqlSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreatePostgreSqlSource.model_validate(data).postgre_sql_source_create

    async def create_relative_time_validator_with_difference_threshold(
        self,
        input: "RelativeTimeValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeTimeValidatorWithDifferenceThresholdRelativeTimeValidatorWithDifferenceThresholdCreate":
        from .create_relative_time_validator_with_difference_threshold import (
            CreateRelativeTimeValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeTimeValidatorWithDifferenceThreshold($input: RelativeTimeValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              relativeTimeValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeTimeValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeTimeValidatorWithDifferenceThreshold.model_validate(
            data
        ).relative_time_validator_with_difference_threshold_create

    async def create_relative_time_validator_with_dynamic_threshold(
        self,
        input: "RelativeTimeValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeTimeValidatorWithDynamicThresholdRelativeTimeValidatorWithDynamicThresholdCreate":
        from .create_relative_time_validator_with_dynamic_threshold import (
            CreateRelativeTimeValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeTimeValidatorWithDynamicThreshold($input: RelativeTimeValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              relativeTimeValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeTimeValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeTimeValidatorWithDynamicThreshold.model_validate(
            data
        ).relative_time_validator_with_dynamic_threshold_create

    async def create_relative_time_validator_with_fixed_threshold(
        self,
        input: "RelativeTimeValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeTimeValidatorWithFixedThresholdRelativeTimeValidatorWithFixedThresholdCreate":
        from .create_relative_time_validator_with_fixed_threshold import (
            CreateRelativeTimeValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeTimeValidatorWithFixedThreshold($input: RelativeTimeValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              relativeTimeValidatorWithFixedThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeTimeValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeTimeValidatorWithFixedThreshold.model_validate(
            data
        ).relative_time_validator_with_fixed_threshold_create

    async def create_relative_volume_validator_with_difference_threshold(
        self,
        input: "RelativeVolumeValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeVolumeValidatorWithDifferenceThresholdRelativeVolumeValidatorWithDifferenceThresholdCreate":
        from .create_relative_volume_validator_with_difference_threshold import (
            CreateRelativeVolumeValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeVolumeValidatorWithDifferenceThreshold($input: RelativeVolumeValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              relativeVolumeValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeVolumeValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeVolumeValidatorWithDifferenceThreshold.model_validate(
            data
        ).relative_volume_validator_with_difference_threshold_create

    async def create_relative_volume_validator_with_dynamic_threshold(
        self,
        input: "RelativeVolumeValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeVolumeValidatorWithDynamicThresholdRelativeVolumeValidatorWithDynamicThresholdCreate":
        from .create_relative_volume_validator_with_dynamic_threshold import (
            CreateRelativeVolumeValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeVolumeValidatorWithDynamicThreshold($input: RelativeVolumeValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              relativeVolumeValidatorWithDynamicThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeVolumeValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeVolumeValidatorWithDynamicThreshold.model_validate(
            data
        ).relative_volume_validator_with_dynamic_threshold_create

    async def create_relative_volume_validator_with_fixed_threshold(
        self,
        input: "RelativeVolumeValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateRelativeVolumeValidatorWithFixedThresholdRelativeVolumeValidatorWithFixedThresholdCreate":
        from .create_relative_volume_validator_with_fixed_threshold import (
            CreateRelativeVolumeValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateRelativeVolumeValidatorWithFixedThreshold($input: RelativeVolumeValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              relativeVolumeValidatorWithFixedThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateRelativeVolumeValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateRelativeVolumeValidatorWithFixedThreshold.model_validate(
            data
        ).relative_volume_validator_with_fixed_threshold_create

    async def create_saml_identity_provider(
        self, input: "SamlIdentityProviderCreateInput", **kwargs: Any
    ) -> "CreateSamlIdentityProviderSamlIdentityProviderCreate":
        from .create_saml_identity_provider import CreateSamlIdentityProvider

        query = gql(
            """
            mutation CreateSamlIdentityProvider($input: SamlIdentityProviderCreateInput!) {
              samlIdentityProviderCreate(input: $input) {
                ...IdentityProviderCreation
              }
            }

            fragment IdentityProviderCreation on IdentityProviderCreateResult {
              errors {
                code
                message
              }
              identityProvider {
                ...IdentityProviderDetails
              }
            }

            fragment IdentityProviderDetails on IdentityProvider {
              __typename
              id
              name
              disabled
              createdAt
              updatedAt
              resourceName
              ... on SamlIdentityProvider {
                config {
                  entryPoint
                  entityId
                  cert
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSamlIdentityProvider",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSamlIdentityProvider.model_validate(
            data
        ).saml_identity_provider_create

    async def create_segment_notification_rule_condition(
        self, input: "SegmentNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> "CreateSegmentNotificationRuleConditionSegmentNotificationRuleConditionCreate":
        from .create_segment_notification_rule_condition import (
            CreateSegmentNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateSegmentNotificationRuleCondition($input: SegmentNotificationRuleConditionCreateInput!) {
              segmentNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSegmentNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSegmentNotificationRuleCondition.model_validate(
            data
        ).segment_notification_rule_condition_create

    async def create_segmentation(
        self, input: "SegmentationCreateInput", **kwargs: Any
    ) -> "CreateSegmentationSegmentationCreate":
        from .create_segmentation import CreateSegmentation

        query = gql(
            """
            mutation CreateSegmentation($input: SegmentationCreateInput!) {
              segmentationCreate(input: $input) {
                ...SegmentationCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SegmentationCreation on SegmentationCreateResult {
              errors {
                ...ErrorDetails
              }
              segmentation {
                ...SegmentationDetails
              }
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSegmentation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSegmentation.model_validate(data).segmentation_create

    async def create_severity_notification_rule_condition(
        self, input: "SeverityNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> (
        "CreateSeverityNotificationRuleConditionSeverityNotificationRuleConditionCreate"
    ):
        from .create_severity_notification_rule_condition import (
            CreateSeverityNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateSeverityNotificationRuleCondition($input: SeverityNotificationRuleConditionCreateInput!) {
              severityNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSeverityNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSeverityNotificationRuleCondition.model_validate(
            data
        ).severity_notification_rule_condition_create

    async def create_slack_channel(
        self, input: "SlackChannelCreateInput", **kwargs: Any
    ) -> "CreateSlackChannelSlackChannelCreate":
        from .create_slack_channel import CreateSlackChannel

        query = gql(
            """
            mutation CreateSlackChannel($input: SlackChannelCreateInput!) {
              slackChannelCreate(input: $input) {
                ...ChannelCreation
              }
            }

            fragment ChannelCreation on ChannelCreateResult {
              errors {
                ...ErrorDetails
              }
              channel {
                ...ChannelDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSlackChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSlackChannel.model_validate(data).slack_channel_create

    async def create_snowflake_credential(
        self, input: "SnowflakeCredentialCreateInput", **kwargs: Any
    ) -> "CreateSnowflakeCredentialSnowflakeCredentialCreate":
        from .create_snowflake_credential import CreateSnowflakeCredential

        query = gql(
            """
            mutation CreateSnowflakeCredential($input: SnowflakeCredentialCreateInput!) {
              snowflakeCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSnowflakeCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSnowflakeCredential.model_validate(
            data
        ).snowflake_credential_create

    async def create_snowflake_source(
        self, input: "SnowflakeSourceCreateInput", **kwargs: Any
    ) -> "CreateSnowflakeSourceSnowflakeSourceCreate":
        from .create_snowflake_source import CreateSnowflakeSource

        query = gql(
            """
            mutation CreateSnowflakeSource($input: SnowflakeSourceCreateInput!) {
              snowflakeSourceCreate(input: $input) {
                ...SourceCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceCreation on SourceCreateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSnowflakeSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSnowflakeSource.model_validate(data).snowflake_source_create

    async def create_source_notification_rule_condition(
        self, input: "SourceNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> "CreateSourceNotificationRuleConditionSourceNotificationRuleConditionCreate":
        from .create_source_notification_rule_condition import (
            CreateSourceNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateSourceNotificationRuleCondition($input: SourceNotificationRuleConditionCreateInput!) {
              sourceNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateSourceNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSourceNotificationRuleCondition.model_validate(
            data
        ).source_notification_rule_condition_create

    async def create_sql_filter(
        self, input: "SqlFilterCreateInput", **kwargs: Any
    ) -> "CreateSqlFilterSqlFilterCreate":
        from .create_sql_filter import CreateSqlFilter

        query = gql(
            """
            mutation CreateSqlFilter($input: SqlFilterCreateInput!) {
              sqlFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="CreateSqlFilter", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateSqlFilter.model_validate(data).sql_filter_create

    async def create_sql_validator_with_difference_threshold(
        self,
        input: "SqlValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateSqlValidatorWithDifferenceThresholdSqlValidatorWithDifferenceThresholdCreate":
        from .create_sql_validator_with_difference_threshold import (
            CreateSqlValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateSqlValidatorWithDifferenceThreshold($input: SqlValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              sqlValidatorWithDifferenceThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateSqlValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSqlValidatorWithDifferenceThreshold.model_validate(
            data
        ).sql_validator_with_difference_threshold_create

    async def create_sql_validator_with_dynamic_threshold(
        self,
        input: "SqlValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateSqlValidatorWithDynamicThresholdSqlValidatorWithDynamicThresholdCreate":
        from .create_sql_validator_with_dynamic_threshold import (
            CreateSqlValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateSqlValidatorWithDynamicThreshold($input: SqlValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              sqlValidatorWithDynamicThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateSqlValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSqlValidatorWithDynamicThreshold.model_validate(
            data
        ).sql_validator_with_dynamic_threshold_create

    async def create_sql_validator_with_fixed_threshold(
        self,
        input: "SqlValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateSqlValidatorWithFixedThresholdSqlValidatorWithFixedThresholdCreate":
        from .create_sql_validator_with_fixed_threshold import (
            CreateSqlValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateSqlValidatorWithFixedThreshold($input: SqlValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              sqlValidatorWithFixedThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateSqlValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateSqlValidatorWithFixedThreshold.model_validate(
            data
        ).sql_validator_with_fixed_threshold_create

    async def create_string_filter(
        self, input: "StringFilterCreateInput", **kwargs: Any
    ) -> "CreateStringFilterStringFilterCreate":
        from .create_string_filter import CreateStringFilter

        query = gql(
            """
            mutation CreateStringFilter($input: StringFilterCreateInput!) {
              stringFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateStringFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateStringFilter.model_validate(data).string_filter_create

    async def create_tableau_connected_app_credential(
        self, input: "TableauConnectedAppCredentialCreateInput", **kwargs: Any
    ) -> "CreateTableauConnectedAppCredentialTableauConnectedAppCredentialCreate":
        from .create_tableau_connected_app_credential import (
            CreateTableauConnectedAppCredential,
        )

        query = gql(
            """
            mutation CreateTableauConnectedAppCredential($input: TableauConnectedAppCredentialCreateInput!) {
              tableauConnectedAppCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateTableauConnectedAppCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateTableauConnectedAppCredential.model_validate(
            data
        ).tableau_connected_app_credential_create

    async def create_tableau_personal_access_token_credential(
        self, input: "TableauPersonalAccessTokenCredentialCreateInput", **kwargs: Any
    ) -> "CreateTableauPersonalAccessTokenCredentialTableauPersonalAccessTokenCredentialCreate":
        from .create_tableau_personal_access_token_credential import (
            CreateTableauPersonalAccessTokenCredential,
        )

        query = gql(
            """
            mutation CreateTableauPersonalAccessTokenCredential($input: TableauPersonalAccessTokenCredentialCreateInput!) {
              tableauPersonalAccessTokenCredentialCreate(input: $input) {
                ...CredentialCreation
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialCreation on CredentialCreateResult {
              __typename
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateTableauPersonalAccessTokenCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateTableauPersonalAccessTokenCredential.model_validate(
            data
        ).tableau_personal_access_token_credential_create

    async def create_tag(
        self, input: "TagCreateInput", **kwargs: Any
    ) -> "CreateTagTagCreate":
        from .create_tag import CreateTag

        query = gql(
            """
            mutation CreateTag($input: TagCreateInput!) {
              tagCreate(input: $input) {
                ...TagCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TagCreation on TagCreateResult {
              errors {
                ...ErrorDetails
              }
              tag {
                ...TagDetails
              }
            }

            fragment TagDetails on Tag {
              id
              key
              value
              createdAt
              origin
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="CreateTag", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateTag.model_validate(data).tag_create

    async def create_tag_notification_rule_condition(
        self, input: "TagNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> "CreateTagNotificationRuleConditionTagNotificationRuleConditionCreate":
        from .create_tag_notification_rule_condition import (
            CreateTagNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateTagNotificationRuleCondition($input: TagNotificationRuleConditionCreateInput!) {
              tagNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateTagNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateTagNotificationRuleCondition.model_validate(
            data
        ).tag_notification_rule_condition_create

    async def create_team(
        self, input: "TeamCreateInput", **kwargs: Any
    ) -> "CreateTeamTeamCreate":
        from .create_team import CreateTeam

        query = gql(
            """
            mutation CreateTeam($input: TeamCreateInput!) {
              teamCreate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                team {
                  ...TeamDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="CreateTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateTeam.model_validate(data).team_create

    async def create_threshold_filter(
        self, input: "ThresholdFilterCreateInput", **kwargs: Any
    ) -> "CreateThresholdFilterThresholdFilterCreate":
        from .create_threshold_filter import CreateThresholdFilter

        query = gql(
            """
            mutation CreateThresholdFilter($input: ThresholdFilterCreateInput!) {
              thresholdFilterCreate(input: $input) {
                ...FilterCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterCreation on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateThresholdFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateThresholdFilter.model_validate(data).threshold_filter_create

    async def create_tumbling_window(
        self, input: "TumblingWindowCreateInput", **kwargs: Any
    ) -> "CreateTumblingWindowTumblingWindowCreate":
        from .create_tumbling_window import CreateTumblingWindow

        query = gql(
            """
            mutation CreateTumblingWindow($input: TumblingWindowCreateInput!) {
              tumblingWindowCreate(input: $input) {
                ...WindowCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowCreation on WindowCreateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateTumblingWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateTumblingWindow.model_validate(data).tumbling_window_create

    async def create_type_notification_rule_condition(
        self, input: "TypeNotificationRuleConditionCreateInput", **kwargs: Any
    ) -> "CreateTypeNotificationRuleConditionTypeNotificationRuleConditionCreate":
        from .create_type_notification_rule_condition import (
            CreateTypeNotificationRuleCondition,
        )

        query = gql(
            """
            mutation CreateTypeNotificationRuleCondition($input: TypeNotificationRuleConditionCreateInput!) {
              typeNotificationRuleConditionCreate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateTypeNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateTypeNotificationRuleCondition.model_validate(
            data
        ).type_notification_rule_condition_create

    async def create_user(
        self, input: "UserCreateInput", **kwargs: Any
    ) -> "CreateUserUserCreate":
        from .create_user import CreateUser

        query = gql(
            """
            mutation CreateUser($input: UserCreateInput!) {
              userCreate(input: $input) {
                ...UserCreation
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment IdentityDetails on Identity {
              ... on LocalIdentity {
                __typename
                id
                userId
                username
                createdAt
              }
              ... on FederatedIdentity {
                __typename
                id
                userId
                idp {
                  __typename
                  id
                  name
                }
                createdAt
              }
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserCreation on UserCreateResult {
              errors {
                code
                message
              }
              user {
                ...UserDetails
              }
            }

            fragment UserDetails on User {
              id
              displayName
              fullName
              email
              status
              avatar
              avatarThumbnail
              loginType
              globalRole
              identities {
                ...IdentityDetails
              }
              teams {
                ...TeamDetails
              }
              namespaces {
                ...NamespaceDetails
              }
              createdAt
              updatedAt
              lastLoginAt
              resourceName
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="CreateUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return CreateUser.model_validate(data).user_create

    async def create_volume_validator_with_difference_threshold(
        self,
        input: "VolumeValidatorCreateInput",
        threshold: "DifferenceThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateVolumeValidatorWithDifferenceThresholdVolumeValidatorWithDifferenceThresholdCreate":
        from .create_volume_validator_with_difference_threshold import (
            CreateVolumeValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation CreateVolumeValidatorWithDifferenceThreshold($input: VolumeValidatorCreateInput!, $threshold: DifferenceThresholdCreateInput!) {
              volumeValidatorWithDifferenceThresholdCreate(
                input: $input
                threshold: $threshold
              ) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateVolumeValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateVolumeValidatorWithDifferenceThreshold.model_validate(
            data
        ).volume_validator_with_difference_threshold_create

    async def create_volume_validator_with_dynamic_threshold(
        self,
        input: "VolumeValidatorCreateInput",
        threshold: "DynamicThresholdCreateInput",
        **kwargs: Any
    ) -> "CreateVolumeValidatorWithDynamicThresholdVolumeValidatorWithDynamicThresholdCreate":
        from .create_volume_validator_with_dynamic_threshold import (
            CreateVolumeValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation CreateVolumeValidatorWithDynamicThreshold($input: VolumeValidatorCreateInput!, $threshold: DynamicThresholdCreateInput!) {
              volumeValidatorWithDynamicThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateVolumeValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateVolumeValidatorWithDynamicThreshold.model_validate(
            data
        ).volume_validator_with_dynamic_threshold_create

    async def create_volume_validator_with_fixed_threshold(
        self,
        input: "VolumeValidatorCreateInput",
        threshold: "FixedThresholdCreateInput",
        **kwargs: Any
    ) -> (
        "CreateVolumeValidatorWithFixedThresholdVolumeValidatorWithFixedThresholdCreate"
    ):
        from .create_volume_validator_with_fixed_threshold import (
            CreateVolumeValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation CreateVolumeValidatorWithFixedThreshold($input: VolumeValidatorCreateInput!, $threshold: FixedThresholdCreateInput!) {
              volumeValidatorWithFixedThresholdCreate(input: $input, threshold: $threshold) {
                ...ValidatorCreation
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorCreation on ValidatorCreateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input, "threshold": threshold}
        response = await self.execute(
            query=query,
            operation_name="CreateVolumeValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateVolumeValidatorWithFixedThreshold.model_validate(
            data
        ).volume_validator_with_fixed_threshold_create

    async def create_webhook_channel(
        self, input: "WebhookChannelCreateInput", **kwargs: Any
    ) -> "CreateWebhookChannelWebhookChannelCreate":
        from .create_webhook_channel import CreateWebhookChannel

        query = gql(
            """
            mutation CreateWebhookChannel($input: WebhookChannelCreateInput!) {
              webhookChannelCreate(input: $input) {
                ...ChannelCreation
              }
            }

            fragment ChannelCreation on ChannelCreateResult {
              errors {
                ...ErrorDetails
              }
              channel {
                ...ChannelDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="CreateWebhookChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CreateWebhookChannel.model_validate(data).webhook_channel_create

    async def databricks_credential_secret_changed(
        self, input: "DatabricksCredentialSecretChangedInput", **kwargs: Any
    ) -> "DatabricksCredentialSecretChangedDatabricksCredentialSecretChanged":
        from .databricks_credential_secret_changed import (
            DatabricksCredentialSecretChanged,
        )

        query = gql(
            """
            query DatabricksCredentialSecretChanged($input: DatabricksCredentialSecretChangedInput!) {
              databricksCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DatabricksCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DatabricksCredentialSecretChanged.model_validate(
            data
        ).databricks_credential_secret_changed

    async def dbt_artifact_multipart_upload_append_part(
        self, input: "DbtArtifactMultipartUploadAppendPartInput", **kwargs: Any
    ) -> "DbtArtifactMultipartUploadAppendPartDbtArtifactMultipartUploadAppendPart":
        from .dbt_artifact_multipart_upload_append_part import (
            DbtArtifactMultipartUploadAppendPart,
        )

        query = gql(
            """
            mutation DbtArtifactMultipartUploadAppendPart($input: DbtArtifactMultipartUploadAppendPartInput!) {
              dbtArtifactMultipartUploadAppendPart(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DbtArtifactMultipartUploadAppendPart",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DbtArtifactMultipartUploadAppendPart.model_validate(
            data
        ).dbt_artifact_multipart_upload_append_part

    async def dbt_artifact_multipart_upload_complete(
        self, input: "DbtArtifactMultipartUploadCompleteInput", **kwargs: Any
    ) -> "DbtArtifactMultipartUploadCompleteDbtArtifactMultipartUploadComplete":
        from .dbt_artifact_multipart_upload_complete import (
            DbtArtifactMultipartUploadComplete,
        )

        query = gql(
            """
            mutation DbtArtifactMultipartUploadComplete($input: DbtArtifactMultipartUploadCompleteInput!) {
              dbtArtifactMultipartUploadComplete(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DbtArtifactMultipartUploadComplete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DbtArtifactMultipartUploadComplete.model_validate(
            data
        ).dbt_artifact_multipart_upload_complete

    async def dbt_artifact_multipart_upload_create(
        self, input: "DbtArtifactMultipartUploadCreateInput", **kwargs: Any
    ) -> "DbtArtifactMultipartUploadCreateDbtArtifactMultipartUploadCreate":
        from .dbt_artifact_multipart_upload_create import (
            DbtArtifactMultipartUploadCreate,
        )

        query = gql(
            """
            mutation DbtArtifactMultipartUploadCreate($input: DbtArtifactMultipartUploadCreateInput!) {
              dbtArtifactMultipartUploadCreate(input: $input) {
                id
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DbtArtifactMultipartUploadCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DbtArtifactMultipartUploadCreate.model_validate(
            data
        ).dbt_artifact_multipart_upload_create

    async def dbt_artifact_upload(
        self, input: "DbtArtifactUploadInput", **kwargs: Any
    ) -> "DbtArtifactUploadDbtArtifactUpload":
        from .dbt_artifact_upload import DbtArtifactUpload

        query = gql(
            """
            mutation DbtArtifactUpload($input: DbtArtifactUploadInput!) {
              dbtArtifactUpload(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DbtArtifactUpload",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DbtArtifactUpload.model_validate(data).dbt_artifact_upload

    async def dbt_cloud_credential_secret_changed(
        self, input: "DbtCloudCredentialSecretChangedInput", **kwargs: Any
    ) -> "DbtCloudCredentialSecretChangedDbtCloudCredentialSecretChanged":
        from .dbt_cloud_credential_secret_changed import DbtCloudCredentialSecretChanged

        query = gql(
            """
            query DbtCloudCredentialSecretChanged($input: DbtCloudCredentialSecretChangedInput!) {
              dbtCloudCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DbtCloudCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DbtCloudCredentialSecretChanged.model_validate(
            data
        ).dbt_cloud_credential_secret_changed

    async def delete_catalog_asset_tags(
        self, input: "CatalogAssetTagsDeleteInput", **kwargs: Any
    ) -> "DeleteCatalogAssetTagsCatalogAssetTagsDelete":
        from .delete_catalog_asset_tags import DeleteCatalogAssetTags

        query = gql(
            """
            mutation DeleteCatalogAssetTags($input: CatalogAssetTagsDeleteInput!) {
              catalogAssetTagsDelete(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DeleteCatalogAssetTags",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCatalogAssetTags.model_validate(data).catalog_asset_tags_delete

    async def delete_channel(
        self, input: "ChannelDeleteInput", **kwargs: Any
    ) -> "DeleteChannelChannelDelete":
        from .delete_channel import DeleteChannel

        query = gql(
            """
            mutation DeleteChannel($input: ChannelDeleteInput!) {
              channelDelete(input: $input) {
                ...ChannelDeletion
              }
            }

            fragment ChannelDeletion on ChannelDeleteResult {
              errors {
                code
                message
              }
              channel {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="DeleteChannel", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteChannel.model_validate(data).channel_delete

    async def delete_credential(
        self, id: CredentialId, **kwargs: Any
    ) -> "DeleteCredentialCredentialsDelete":
        from .delete_credential import DeleteCredential

        query = gql(
            """
            mutation DeleteCredential($id: CredentialId!) {
              credentialsDelete(ids: [$id]) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="DeleteCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCredential.model_validate(data).credentials_delete

    async def delete_credentials(
        self, ids: List[CredentialId], **kwargs: Any
    ) -> "DeleteCredentialsCredentialsDelete":
        from .delete_credentials import DeleteCredentials

        query = gql(
            """
            mutation DeleteCredentials($ids: [CredentialId!]!) {
              credentialsDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query,
            operation_name="DeleteCredentials",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteCredentials.model_validate(data).credentials_delete

    async def delete_filter(
        self, id: Any, **kwargs: Any
    ) -> "DeleteFilterFiltersDelete":
        from .delete_filter import DeleteFilter

        query = gql(
            """
            mutation DeleteFilter($id: FilterId!) {
              filtersDelete(ids: [$id]) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="DeleteFilter", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteFilter.model_validate(data).filters_delete

    async def delete_filters(
        self, ids: List[Any], **kwargs: Any
    ) -> "DeleteFiltersFiltersDelete":
        from .delete_filters import DeleteFilters

        query = gql(
            """
            mutation DeleteFilters($ids: [FilterId!]!) {
              filtersDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query, operation_name="DeleteFilters", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteFilters.model_validate(data).filters_delete

    async def delete_identity(
        self, input: "IdentityDeleteInput", **kwargs: Any
    ) -> "DeleteIdentityIdentityDelete":
        from .delete_identity import DeleteIdentity

        query = gql(
            """
            mutation DeleteIdentity($input: IdentityDeleteInput!) {
              identityDelete(input: $input) {
                ...IdentityDeletion
              }
            }

            fragment IdentityDeletion on IdentityDeleteResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="DeleteIdentity", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteIdentity.model_validate(data).identity_delete

    async def delete_identity_provider(
        self, input: "IdentityProviderDeleteInput", **kwargs: Any
    ) -> "DeleteIdentityProviderIdentityProviderDelete":
        from .delete_identity_provider import DeleteIdentityProvider

        query = gql(
            """
            mutation DeleteIdentityProvider($input: IdentityProviderDeleteInput!) {
              identityProviderDelete(input: $input) {
                ...IdentityProviderDeletion
              }
            }

            fragment IdentityProviderDeletion on IdentityProviderDeleteResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DeleteIdentityProvider",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteIdentityProvider.model_validate(data).identity_provider_delete

    async def delete_lineage_edges(
        self, ids: List[Any], **kwargs: Any
    ) -> "DeleteLineageEdgesLineageEdgesDelete":
        from .delete_lineage_edges import DeleteLineageEdges

        query = gql(
            """
            mutation DeleteLineageEdges($ids: [LineageEdgeId!]!) {
              lineageEdgesDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query,
            operation_name="DeleteLineageEdges",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteLineageEdges.model_validate(data).lineage_edges_delete

    async def delete_namespaces(
        self, ids: List[str], **kwargs: Any
    ) -> "DeleteNamespacesNamespacesDelete":
        from .delete_namespaces import DeleteNamespaces

        query = gql(
            """
            mutation DeleteNamespaces($ids: [String!]!) {
              namespacesDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query,
            operation_name="DeleteNamespaces",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteNamespaces.model_validate(data).namespaces_delete

    async def delete_notification_rule(
        self, input: "NotificationRuleDeleteInput", **kwargs: Any
    ) -> "DeleteNotificationRuleNotificationRuleDelete":
        from .delete_notification_rule import DeleteNotificationRule

        query = gql(
            """
            mutation DeleteNotificationRule($input: NotificationRuleDeleteInput!) {
              notificationRuleDelete(input: $input) {
                ...NotificationRuleDeletion
              }
            }

            fragment NotificationRuleDeletion on NotificationRuleDeleteResult {
              errors {
                code
                message
              }
              notificationRule {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DeleteNotificationRule",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteNotificationRule.model_validate(data).notification_rule_delete

    async def delete_segmentation(
        self, id: SegmentationId, **kwargs: Any
    ) -> "DeleteSegmentationSegmentationsDelete":
        from .delete_segmentation import DeleteSegmentation

        query = gql(
            """
            mutation DeleteSegmentation($id: SegmentationId!) {
              segmentationsDelete(ids: [$id]) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="DeleteSegmentation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteSegmentation.model_validate(data).segmentations_delete

    async def delete_source(
        self, id: SourceId, **kwargs: Any
    ) -> "DeleteSourceSourcesDelete":
        from .delete_source import DeleteSource

        query = gql(
            """
            mutation DeleteSource($id: SourceId!) {
              sourcesDelete(ids: [$id]) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="DeleteSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteSource.model_validate(data).sources_delete

    async def delete_sources(
        self, ids: List[SourceId], **kwargs: Any
    ) -> "DeleteSourcesSourcesDelete":
        from .delete_sources import DeleteSources

        query = gql(
            """
            mutation DeleteSources($ids: [SourceId!]!) {
              sourcesDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query, operation_name="DeleteSources", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteSources.model_validate(data).sources_delete

    async def delete_tags(
        self, ids: List[Any], **kwargs: Any
    ) -> "DeleteTagsTagsDelete":
        from .delete_tags import DeleteTags

        query = gql(
            """
            mutation DeleteTags($ids: [TagId!]!) {
              tagsDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query, operation_name="DeleteTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteTags.model_validate(data).tags_delete

    async def delete_team(self, id: str, **kwargs: Any) -> "DeleteTeamTeamDelete":
        from .delete_team import DeleteTeam

        query = gql(
            """
            mutation DeleteTeam($id: String!) {
              teamDelete(id: $id) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="DeleteTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteTeam.model_validate(data).team_delete

    async def delete_user(
        self, input: "UserDeleteInput", **kwargs: Any
    ) -> "DeleteUserUserDelete":
        from .delete_user import DeleteUser

        query = gql(
            """
            mutation DeleteUser($input: UserDeleteInput!) {
              userDelete(input: $input) {
                ...UserDeletion
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment IdentityDetails on Identity {
              ... on LocalIdentity {
                __typename
                id
                userId
                username
                createdAt
              }
              ... on FederatedIdentity {
                __typename
                id
                userId
                idp {
                  __typename
                  id
                  name
                }
                createdAt
              }
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserDeletion on UserDeleteResult {
              errors {
                code
                message
              }
              user {
                ...UserDetails
              }
            }

            fragment UserDetails on User {
              id
              displayName
              fullName
              email
              status
              avatar
              avatarThumbnail
              loginType
              globalRole
              identities {
                ...IdentityDetails
              }
              teams {
                ...TeamDetails
              }
              namespaces {
                ...NamespaceDetails
              }
              createdAt
              updatedAt
              lastLoginAt
              resourceName
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="DeleteUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteUser.model_validate(data).user_delete

    async def delete_validators(
        self, ids: List[ValidatorId], **kwargs: Any
    ) -> "DeleteValidatorsValidatorsDelete":
        from .delete_validators import DeleteValidators

        query = gql(
            """
            mutation DeleteValidators($ids: [ValidatorId!]!) {
              validatorsDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query,
            operation_name="DeleteValidators",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DeleteValidators.model_validate(data).validators_delete

    async def delete_window(
        self, id: WindowId, **kwargs: Any
    ) -> "DeleteWindowWindowsDelete":
        from .delete_window import DeleteWindow

        query = gql(
            """
            mutation DeleteWindow($id: WindowId!) {
              windowsDelete(ids: [$id]) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="DeleteWindow", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteWindow.model_validate(data).windows_delete

    async def delete_windows(
        self, ids: List[WindowId], **kwargs: Any
    ) -> "DeleteWindowsWindowsDelete":
        from .delete_windows import DeleteWindows

        query = gql(
            """
            mutation DeleteWindows($ids: [WindowId!]!) {
              windowsDelete(ids: $ids) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids}
        response = await self.execute(
            query=query, operation_name="DeleteWindows", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return DeleteWindows.model_validate(data).windows_delete

    async def dismiss_validator_recommendation(
        self, input: "ValidatorRecommendationDismissInput", **kwargs: Any
    ) -> "DismissValidatorRecommendationValidatorRecommendationDismiss":
        from .dismiss_validator_recommendation import DismissValidatorRecommendation

        query = gql(
            """
            mutation DismissValidatorRecommendation($input: ValidatorRecommendationDismissInput!) {
              validatorRecommendationDismiss(input: $input) {
                ...ValidatorRecommendationDismissal
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment ValidatorRecommendationDismissal on ValidatorRecommendationDismissResult {
              __typename
              errors {
                ...ErrorDetails
              }
              recommendationIds
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="DismissValidatorRecommendation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return DismissValidatorRecommendation.model_validate(
            data
        ).validator_recommendation_dismiss

    async def gcp_credential_secret_changed(
        self, input: "GcpCredentialSecretChangedInput", **kwargs: Any
    ) -> "GcpCredentialSecretChangedGcpCredentialSecretChanged":
        from .gcp_credential_secret_changed import GcpCredentialSecretChanged

        query = gql(
            """
            query GcpCredentialSecretChanged($input: GcpCredentialSecretChangedInput!) {
              gcpCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="GcpCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GcpCredentialSecretChanged.model_validate(
            data
        ).gcp_credential_secret_changed

    async def get_channel_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetChannelByResourceNameChannelByResourceNameChannel",
            "GetChannelByResourceNameChannelByResourceNameMsTeamsChannel",
            "GetChannelByResourceNameChannelByResourceNameSlackChannel",
            "GetChannelByResourceNameChannelByResourceNameWebhookChannel",
        ]
    ]:
        from .get_channel_by_resource_name import GetChannelByResourceName

        query = gql(
            """
            query GetChannelByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              channelByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...ChannelDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetChannelByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetChannelByResourceName.model_validate(data).channel_by_resource_name

    async def get_credential_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetCredentialByResourceNameCredentialByResourceNameCredential",
            "GetCredentialByResourceNameCredentialByResourceNameAwsAthenaCredential",
            "GetCredentialByResourceNameCredentialByResourceNameAwsCredential",
            "GetCredentialByResourceNameCredentialByResourceNameAwsRedshiftCredential",
            "GetCredentialByResourceNameCredentialByResourceNameAzureSynapseEntraIdCredential",
            "GetCredentialByResourceNameCredentialByResourceNameAzureSynapseSqlCredential",
            "GetCredentialByResourceNameCredentialByResourceNameClickHouseCredential",
            "GetCredentialByResourceNameCredentialByResourceNameDatabricksCredential",
            "GetCredentialByResourceNameCredentialByResourceNameDbtCloudCredential",
            "GetCredentialByResourceNameCredentialByResourceNameDbtCoreCredential",
            "GetCredentialByResourceNameCredentialByResourceNameGcpCredential",
            "GetCredentialByResourceNameCredentialByResourceNameKafkaSaslSslPlainCredential",
            "GetCredentialByResourceNameCredentialByResourceNameKafkaSslCredential",
            "GetCredentialByResourceNameCredentialByResourceNameLookerCredential",
            "GetCredentialByResourceNameCredentialByResourceNameMsPowerBiCredential",
            "GetCredentialByResourceNameCredentialByResourceNamePostgreSqlCredential",
            "GetCredentialByResourceNameCredentialByResourceNameSnowflakeCredential",
            "GetCredentialByResourceNameCredentialByResourceNameTableauConnectedAppCredential",
            "GetCredentialByResourceNameCredentialByResourceNameTableauPersonalAccessTokenCredential",
        ]
    ]:
        from .get_credential_by_resource_name import GetCredentialByResourceName

        query = gql(
            """
            query GetCredentialByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              credentialByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...CredentialDetails
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetCredentialByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCredentialByResourceName.model_validate(
            data
        ).credential_by_resource_name

    async def get_databricks_warehouse_info(
        self, input: "DatabricksWarehouseInfoInput", **kwargs: Any
    ) -> "GetDatabricksWarehouseInfoDatabricksWarehouseInfo":
        from .get_databricks_warehouse_info import GetDatabricksWarehouseInfo

        query = gql(
            """
            query GetDatabricksWarehouseInfo($input: DatabricksWarehouseInfoInput!) {
              databricksWarehouseInfo(input: $input) {
                name
                state
                autoStopMinutes
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="GetDatabricksWarehouseInfo",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDatabricksWarehouseInfo.model_validate(data).databricks_warehouse_info

    async def get_filter(self, id: Any, **kwargs: Any) -> Optional[
        Union[
            "GetFilterFilterFilter",
            "GetFilterFilterBooleanFilter",
            "GetFilterFilterEnumFilter",
            "GetFilterFilterNullFilter",
            "GetFilterFilterSqlFilter",
            "GetFilterFilterStringFilter",
            "GetFilterFilterThresholdFilter",
        ]
    ]:
        from .get_filter import GetFilter

        query = gql(
            """
            query GetFilter($id: FilterId!) {
              filter(id: $id) {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetFilter", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetFilter.model_validate(data).filter

    async def get_group_incidents(
        self,
        id: Any,
        filter: Union[Optional["IncidentsFilter"], "UnsetType"] = UNSET,
        sort: Union[Optional["IncidentsSort"], "UnsetType"] = UNSET,
        pagination: Union[Optional["PaginationInput"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> Optional["GetGroupIncidentsIncidentGroup"]:
        from .get_group_incidents import GetGroupIncidents

        query = gql(
            """
            query GetGroupIncidents($id: IncidentGroupId!, $filter: IncidentsFilter, $sort: IncidentsSort, $pagination: PaginationInput) {
              incidentGroup(id: $id) {
                validator {
                  __typename
                  metricValueFormat
                }
                incidents(filter: $filter, sort: $sort, pagination: $pagination) {
                  elements {
                    id
                    value
                    deviation
                    lowerBound
                    upperBound
                    status
                    severity
                    startTime
                    endTime
                    backfillMode
                    createdAt
                    updatedAt
                  }
                  index {
                    severity {
                      value
                      count
                    }
                    status {
                      value
                      count
                    }
                  }
                  pageInfo {
                    startCursor
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    filteredCount
                    totalCount
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "filter": filter,
            "sort": sort,
            "pagination": pagination,
        }
        response = await self.execute(
            query=query,
            operation_name="GetGroupIncidents",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetGroupIncidents.model_validate(data).incident_group

    async def get_identity_provider_by_resource_name(
        self, resource_name: str, **kwargs: Any
    ) -> Optional[
        Union[
            "GetIdentityProviderByResourceNameIdentityProviderByResourceNameIdentityProvider",
            "GetIdentityProviderByResourceNameIdentityProviderByResourceNameSamlIdentityProvider",
        ]
    ]:
        from .get_identity_provider_by_resource_name import (
            GetIdentityProviderByResourceName,
        )

        query = gql(
            """
            query GetIdentityProviderByResourceName($resourceName: String!) {
              identityProviderByResourceName(resourceName: $resourceName) {
                ...IdentityProviderDetails
              }
            }

            fragment IdentityProviderDetails on IdentityProvider {
              __typename
              id
              name
              disabled
              createdAt
              updatedAt
              resourceName
              ... on SamlIdentityProvider {
                config {
                  entryPoint
                  entityId
                  cert
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"resourceName": resource_name}
        response = await self.execute(
            query=query,
            operation_name="GetIdentityProviderByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetIdentityProviderByResourceName.model_validate(
            data
        ).identity_provider_by_resource_name

    async def get_incident_group(
        self, id: Any, **kwargs: Any
    ) -> Optional["GetIncidentGroupIncidentGroup"]:
        from .get_incident_group import GetIncidentGroup

        query = gql(
            """
            query GetIncidentGroup($id: IncidentGroupId!) {
              incidentGroup(id: $id) {
                id
                status
                priority
                owner {
                  id
                  displayName
                }
                source {
                  __typename
                  id
                  name
                }
                validator {
                  ...ValidatorDetails
                }
                segment {
                  ...SegmentDetails
                }
                severityStats {
                  highCount
                  mediumCount
                  lowCount
                  totalCount
                }
                firstSeenAt
                lastSeenAt
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment SegmentDetails on Segment {
              __typename
              id
              muted
              fields {
                field
                value
              }
              dataQuality {
                incidentCount
                totalCount
                quality
                qualityDiff
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="GetIncidentGroup",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetIncidentGroup.model_validate(data).incident_group

    async def get_incident_groups(
        self,
        filter: Union[Optional["IncidentGroupsFilter"], "UnsetType"] = UNSET,
        sort: Union[Optional["IncidentGroupsSort"], "UnsetType"] = UNSET,
        pagination: Union[Optional["PaginationInput"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> "GetIncidentGroupsIncidentGroups":
        from .get_incident_groups import GetIncidentGroups

        query = gql(
            """
            query GetIncidentGroups($filter: IncidentGroupsFilter, $sort: IncidentGroupsSort, $pagination: PaginationInput) {
              incidentGroups(filter: $filter, sort: $sort, pagination: $pagination) {
                elements {
                  id
                  status
                  priority
                  muteUntil
                  owner {
                    id
                    displayName
                    avatarThumbnail
                  }
                  source {
                    __typename
                    id
                    name
                    namespaceId
                    namespace {
                      id
                      name
                      avatarThumbnail
                    }
                  }
                  validator {
                    __typename
                    id
                    name
                  }
                  segment {
                    fields {
                      field
                      value
                    }
                  }
                  severityStats {
                    highCount
                    mediumCount
                    lowCount
                    totalCount
                  }
                  firstSeenAt
                  lastSeenAt
                }
                index {
                  source {
                    label
                    value
                    count
                  }
                  owner {
                    label
                    value
                    count
                  }
                  status {
                    label
                    value
                    count
                  }
                  priority {
                    label
                    value
                    count
                  }
                  validator {
                    label
                    value
                    count
                  }
                  tagLabel {
                    label
                    value
                    count
                  }
                  namespace {
                    value
                    count
                  }
                }
                pageInfo {
                  startCursor
                  endCursor
                  hasNextPage
                  hasPreviousPage
                  filteredCount
                  totalCount
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "filter": filter,
            "sort": sort,
            "pagination": pagination,
        }
        response = await self.execute(
            query=query,
            operation_name="GetIncidentGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetIncidentGroups.model_validate(data).incident_groups

    async def get_incident_past_groups(
        self,
        id: Any,
        filter: Union[Optional["PastIncidentGroupsFilter"], "UnsetType"] = UNSET,
        sort: Union[Optional["IncidentGroupsSort"], "UnsetType"] = UNSET,
        pagination: Union[Optional["PaginationInput"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> Optional["GetIncidentPastGroupsIncidentGroup"]:
        from .get_incident_past_groups import GetIncidentPastGroups

        query = gql(
            """
            query GetIncidentPastGroups($id: IncidentGroupId!, $filter: PastIncidentGroupsFilter, $sort: IncidentGroupsSort, $pagination: PaginationInput) {
              incidentGroup(id: $id) {
                pastGroups(filter: $filter, sort: $sort, pagination: $pagination) {
                  elements {
                    id
                    status
                    priority
                    owner {
                      id
                      displayName
                    }
                    validator {
                      __typename
                      id
                      name
                    }
                    segment {
                      fields {
                        field
                        value
                      }
                    }
                    severityStats {
                      highCount
                      mediumCount
                      lowCount
                      totalCount
                    }
                    firstSeenAt
                    lastSeenAt
                  }
                  index {
                    owner {
                      label
                      value
                      count
                    }
                    status {
                      label
                      value
                      count
                    }
                    priority {
                      label
                      value
                      count
                    }
                  }
                  pageInfo {
                    startCursor
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    filteredCount
                    totalCount
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "filter": filter,
            "sort": sort,
            "pagination": pagination,
        }
        response = await self.execute(
            query=query,
            operation_name="GetIncidentPastGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetIncidentPastGroups.model_validate(data).incident_group

    async def get_incident_related_groups(
        self, id: Any, **kwargs: Any
    ) -> "GetIncidentRelatedGroupsIncidentRelatedGroups":
        from .get_incident_related_groups import GetIncidentRelatedGroups

        query = gql(
            """
            query GetIncidentRelatedGroups($id: IncidentGroupId!) {
              incidentRelatedGroups(id: $id) {
                originField
                originFields
                elements {
                  group {
                    id
                    status
                    priority
                    owner {
                      id
                      displayName
                    }
                    source {
                      __typename
                      id
                      catalogAsset {
                        __typename
                        id
                      }
                      name
                    }
                    validator {
                      __typename
                      id
                      name
                    }
                    segment {
                      fields {
                        field
                        value
                      }
                    }
                    severityStats {
                      highCount
                      mediumCount
                      lowCount
                      totalCount
                    }
                    firstSeenAt
                    lastSeenAt
                  }
                  field
                  originField
                  relationship
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="GetIncidentRelatedGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetIncidentRelatedGroups.model_validate(data).incident_related_groups

    async def get_lineage_edge(
        self, id: Any, **kwargs: Any
    ) -> Optional["GetLineageEdgeLineageEdge"]:
        from .get_lineage_edge import GetLineageEdge

        query = gql(
            """
            query GetLineageEdge($id: LineageEdgeId!) {
              lineageEdge(id: $id) {
                ...LineageEdgeDetails
              }
            }

            fragment LineageEdgeDetails on LineageEdge {
              __typename
              id
              upstream {
                catalogAsset {
                  __typename
                  id
                  name
                }
                field
              }
              downstream {
                catalogAsset {
                  __typename
                  id
                  name
                }
                field
              }
              sqlQuery
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetLineageEdge", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetLineageEdge.model_validate(data).lineage_edge

    async def get_lineage_graph(
        self, input: "LineageGraphInput", **kwargs: Any
    ) -> "GetLineageGraphLineageGraph":
        from .get_lineage_graph import GetLineageGraph

        query = gql(
            """
            query GetLineageGraph($input: LineageGraphInput!) {
              lineageGraph(input: $input) {
                ...LineageGraphDetails
              }
            }

            fragment CatalogAssetLineageGraphSummary on CatalogAsset {
              __typename
              id
              name
              stats {
                nReads
                nWrites
                utilization
              }
              ... on SourcesCatalogAsset {
                sources {
                  id
                }
                fieldCount
              }
              ... on DbtModelCatalogAsset {
                isDbtModel
              }
            }

            fragment LineageEdgeSummary on LineageEdge {
              id
              upstream {
                catalogAsset {
                  __typename
                  id
                }
                field
              }
              downstream {
                catalogAsset {
                  __typename
                  id
                }
                field
              }
            }

            fragment LineageGraphDetails on LineageGraph {
              nodes {
                ...CatalogAssetLineageGraphSummary
              }
              edges {
                ...LineageEdgeSummary
              }
              stats {
                totalAssetCount
                totalEdgeCount
                totalSourceCount
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="GetLineageGraph", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetLineageGraph.model_validate(data).lineage_graph

    async def get_namespace(
        self, id: Any, **kwargs: Any
    ) -> Optional["GetNamespaceNamespace"]:
        from .get_namespace import GetNamespace

        query = gql(
            """
            query GetNamespace($id: NamespaceId!) {
              namespace(id: $id) {
                ...NamespaceDetailsWithFullAvatar
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment NamespaceDetailsWithFullAvatar on Namespace {
              id
              name
              description
              avatar
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetNamespace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetNamespace.model_validate(data).namespace

    async def get_notification_rule(
        self, id: Any, **kwargs: Any
    ) -> Optional["GetNotificationRuleNotificationRule"]:
        from .get_notification_rule import GetNotificationRule

        query = gql(
            """
            query GetNotificationRule($id: NotificationRuleId!) {
              notificationRule(id: $id) {
                ...NotificationRuleDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment NotificationRuleConditions on NotificationRuleCondition {
              __typename
              id
              notificationRuleId
              createdAt
              updatedAt
              ... on SourceNotificationRuleCondition {
                config {
                  sources {
                    __typename
                    id
                    name
                    resourceName
                  }
                }
              }
              ... on SeverityNotificationRuleCondition {
                config {
                  severities
                }
              }
              ... on TypeNotificationRuleCondition {
                config {
                  types
                }
              }
              ... on OwnerNotificationRuleCondition {
                config {
                  owners {
                    id
                    displayName
                  }
                }
              }
              ... on TagNotificationRuleCondition {
                config {
                  tags {
                    id
                    key
                    value
                  }
                }
              }
              ... on SegmentNotificationRuleCondition {
                config {
                  segments {
                    field
                    value
                  }
                }
              }
            }

            fragment NotificationRuleDetails on NotificationRule {
              __typename
              id
              name
              createdAt
              updatedAt
              conditions {
                ...NotificationRuleConditions
              }
              channel {
                ...ChannelDetails
              }
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="GetNotificationRule",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetNotificationRule.model_validate(data).notification_rule

    async def get_notification_rule_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional["GetNotificationRuleByResourceNameNotificationRuleByResourceName"]:
        from .get_notification_rule_by_resource_name import (
            GetNotificationRuleByResourceName,
        )

        query = gql(
            """
            query GetNotificationRuleByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              notificationRuleByResourceName(
                resourceName: $resourceName
                namespaceId: $namespaceId
              ) {
                ...NotificationRuleDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment NotificationRuleConditions on NotificationRuleCondition {
              __typename
              id
              notificationRuleId
              createdAt
              updatedAt
              ... on SourceNotificationRuleCondition {
                config {
                  sources {
                    __typename
                    id
                    name
                    resourceName
                  }
                }
              }
              ... on SeverityNotificationRuleCondition {
                config {
                  severities
                }
              }
              ... on TypeNotificationRuleCondition {
                config {
                  types
                }
              }
              ... on OwnerNotificationRuleCondition {
                config {
                  owners {
                    id
                    displayName
                  }
                }
              }
              ... on TagNotificationRuleCondition {
                config {
                  tags {
                    id
                    key
                    value
                  }
                }
              }
              ... on SegmentNotificationRuleCondition {
                config {
                  segments {
                    field
                    value
                  }
                }
              }
            }

            fragment NotificationRuleDetails on NotificationRule {
              __typename
              id
              name
              createdAt
              updatedAt
              conditions {
                ...NotificationRuleConditions
              }
              channel {
                ...ChannelDetails
              }
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetNotificationRuleByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetNotificationRuleByResourceName.model_validate(
            data
        ).notification_rule_by_resource_name

    async def get_segmentation(
        self, id: SegmentationId, **kwargs: Any
    ) -> Optional["GetSegmentationSegmentation"]:
        from .get_segmentation import GetSegmentation

        query = gql(
            """
            query GetSegmentation($id: SegmentationId!) {
              segmentation(id: $id) {
                ...SegmentationDetails
              }
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetSegmentation", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetSegmentation.model_validate(data).segmentation

    async def get_segmentation_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional["GetSegmentationByResourceNameSegmentationByResourceName"]:
        from .get_segmentation_by_resource_name import GetSegmentationByResourceName

        query = gql(
            """
            query GetSegmentationByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              segmentationByResourceName(
                resourceName: $resourceName
                namespaceId: $namespaceId
              ) {
                ...SegmentationDetails
              }
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetSegmentationByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSegmentationByResourceName.model_validate(
            data
        ).segmentation_by_resource_name

    async def get_segments_by_segmentation(
        self,
        id: SegmentationId,
        limit: Union[Optional[int], "UnsetType"] = UNSET,
        before: Union[Optional[str], "UnsetType"] = UNSET,
        after: Union[Optional[str], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> Optional["GetSegmentsBySegmentationSegmentation"]:
        from .get_segments_by_segmentation import GetSegmentsBySegmentation

        query = gql(
            """
            query GetSegmentsBySegmentation($id: SegmentationId!, $limit: Int, $before: String, $after: String) {
              segmentation(id: $id) {
                ...SegmentationDetails
                segments(limit: $limit, before: $before, after: $after) {
                  elements {
                    fields {
                      field
                      value
                    }
                  }
                  pageInfo {
                    startCursor
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    filteredCount
                    totalCount
                  }
                }
              }
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "limit": limit,
            "before": before,
            "after": after,
        }
        response = await self.execute(
            query=query,
            operation_name="GetSegmentsBySegmentation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSegmentsBySegmentation.model_validate(data).segmentation

    async def get_source(self, id: SourceId, **kwargs: Any) -> Optional[
        Union[
            "GetSourceSourceSource",
            "GetSourceSourceAwsAthenaSource",
            "GetSourceSourceAwsKinesisSource",
            "GetSourceSourceAwsRedshiftSource",
            "GetSourceSourceAwsS3Source",
            "GetSourceSourceAzureSynapseSource",
            "GetSourceSourceClickHouseSource",
            "GetSourceSourceDatabricksSource",
            "GetSourceSourceDbtModelRunSource",
            "GetSourceSourceDbtTestResultSource",
            "GetSourceSourceGcpBigQuerySource",
            "GetSourceSourceGcpPubSubLiteSource",
            "GetSourceSourceGcpPubSubSource",
            "GetSourceSourceGcpStorageSource",
            "GetSourceSourceKafkaSource",
            "GetSourceSourcePostgreSqlSource",
            "GetSourceSourceSnowflakeSource",
        ]
    ]:
        from .get_source import GetSource

        query = gql(
            """
            query GetSource($id: SourceId!) {
              source(id: $id) {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetSource.model_validate(data).source

    async def get_source_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetSourceByResourceNameSourceByResourceNameSource",
            "GetSourceByResourceNameSourceByResourceNameAwsAthenaSource",
            "GetSourceByResourceNameSourceByResourceNameAwsKinesisSource",
            "GetSourceByResourceNameSourceByResourceNameAwsRedshiftSource",
            "GetSourceByResourceNameSourceByResourceNameAwsS3Source",
            "GetSourceByResourceNameSourceByResourceNameAzureSynapseSource",
            "GetSourceByResourceNameSourceByResourceNameClickHouseSource",
            "GetSourceByResourceNameSourceByResourceNameDatabricksSource",
            "GetSourceByResourceNameSourceByResourceNameDbtModelRunSource",
            "GetSourceByResourceNameSourceByResourceNameDbtTestResultSource",
            "GetSourceByResourceNameSourceByResourceNameGcpBigQuerySource",
            "GetSourceByResourceNameSourceByResourceNameGcpPubSubLiteSource",
            "GetSourceByResourceNameSourceByResourceNameGcpPubSubSource",
            "GetSourceByResourceNameSourceByResourceNameGcpStorageSource",
            "GetSourceByResourceNameSourceByResourceNameKafkaSource",
            "GetSourceByResourceNameSourceByResourceNamePostgreSqlSource",
            "GetSourceByResourceNameSourceByResourceNameSnowflakeSource",
        ]
    ]:
        from .get_source_by_resource_name import GetSourceByResourceName

        query = gql(
            """
            query GetSourceByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              sourceByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetSourceByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSourceByResourceName.model_validate(data).source_by_resource_name

    async def get_source_by_resource_name_deprecated(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetSourceByResourceNameDeprecatedSourceByResourceNameSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameAwsAthenaSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameAwsKinesisSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameAwsRedshiftSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameAwsS3Source",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameAzureSynapseSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameClickHouseSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameDatabricksSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameDbtModelRunSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameDbtTestResultSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameGcpBigQuerySource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameGcpPubSubLiteSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameGcpPubSubSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameGcpStorageSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameKafkaSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNamePostgreSqlSource",
            "GetSourceByResourceNameDeprecatedSourceByResourceNameSnowflakeSource",
        ]
    ]:
        from .get_source_by_resource_name_deprecated import (
            GetSourceByResourceNameDeprecated,
        )

        query = gql(
            """
            query GetSourceByResourceNameDeprecated($resourceName: String!, $namespaceId: NamespaceId!) {
              sourceByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetSourceByResourceNameDeprecated",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSourceByResourceNameDeprecated.model_validate(
            data
        ).source_by_resource_name

    async def get_source_incident_groups(
        self,
        id: SourceId,
        filter: Union[Optional["IncidentGroupsFilter"], "UnsetType"] = UNSET,
        sort: Union[Optional["IncidentGroupsSort"], "UnsetType"] = UNSET,
        pagination: Union[Optional["PaginationInput"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> Optional["GetSourceIncidentGroupsSource"]:
        from .get_source_incident_groups import GetSourceIncidentGroups

        query = gql(
            """
            query GetSourceIncidentGroups($id: SourceId!, $filter: IncidentGroupsFilter, $sort: IncidentGroupsSort, $pagination: PaginationInput) {
              source(id: $id) {
                __typename
                incidentGroups(filter: $filter, sort: $sort, pagination: $pagination) {
                  elements {
                    id
                    status
                    priority
                    owner {
                      id
                      displayName
                    }
                    source {
                      __typename
                      id
                      name
                      namespaceId
                      namespace {
                        id
                        name
                        avatarThumbnail
                      }
                    }
                    validator {
                      __typename
                      id
                      name
                    }
                    segment {
                      fields {
                        field
                        value
                      }
                    }
                    severityStats {
                      highCount
                      mediumCount
                      lowCount
                      totalCount
                    }
                    firstSeenAt
                    lastSeenAt
                  }
                  index {
                    owner {
                      label
                      value
                      count
                    }
                    status {
                      value
                      count
                    }
                    priority {
                      label
                      value
                      count
                    }
                    validator {
                      label
                      value
                      count
                    }
                  }
                  pageInfo {
                    startCursor
                    endCursor
                    hasNextPage
                    hasPreviousPage
                    filteredCount
                    totalCount
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "filter": filter,
            "sort": sort,
            "pagination": pagination,
        }
        response = await self.execute(
            query=query,
            operation_name="GetSourceIncidentGroups",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSourceIncidentGroups.model_validate(data).source

    async def get_source_manual_poll_progress(
        self, id: Any, **kwargs: Any
    ) -> "GetSourceManualPollProgressSourceManualPollProgress":
        from .get_source_manual_poll_progress import GetSourceManualPollProgress

        query = gql(
            """
            mutation GetSourceManualPollProgress($id: SourcePollId!) {
              sourceManualPollProgress(id: $id) {
                errors {
                  ...ErrorDetails
                }
                status
                description
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="GetSourceManualPollProgress",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSourceManualPollProgress.model_validate(
            data
        ).source_manual_poll_progress

    async def get_source_recommended_validators(
        self, id: SourceId, **kwargs: Any
    ) -> Optional["GetSourceRecommendedValidatorsSource"]:
        from .get_source_recommended_validators import GetSourceRecommendedValidators

        query = gql(
            """
            query GetSourceRecommendedValidators($id: SourceId!) {
              source(id: $id) {
                __typename
                state
                recommendedValidators {
                  id
                  __typename
                  name
                  sourceConfig {
                    segmentation {
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="GetSourceRecommendedValidators",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetSourceRecommendedValidators.model_validate(data).source

    async def get_tag(self, id: Any, **kwargs: Any) -> Optional["GetTagTag"]:
        from .get_tag import GetTag

        query = gql(
            """
            query GetTag($id: TagId!) {
              tag(id: $id) {
                ...TagDetails
              }
            }

            fragment TagDetails on Tag {
              id
              key
              value
              createdAt
              origin
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetTag", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTag.model_validate(data).tag

    async def get_team(self, id: Any, **kwargs: Any) -> Optional["GetTeamTeam"]:
        from .get_team import GetTeam

        query = gql(
            """
            query GetTeam($id: TeamId!) {
              team(id: $id) {
                ...TeamDetails
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTeam.model_validate(data).team

    async def get_teams(self, **kwargs: Any) -> List["GetTeamsTeams"]:
        from .get_teams import GetTeams

        query = gql(
            """
            query GetTeams {
              teams {
                ...TeamDetails
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="GetTeams", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTeams.model_validate(data).teams

    async def get_user_by_resource_name(
        self, resource_name: str, **kwargs: Any
    ) -> Optional["GetUserByResourceNameUserByResourceName"]:
        from .get_user_by_resource_name import GetUserByResourceName

        query = gql(
            """
            query GetUserByResourceName($resourceName: String!) {
              userByResourceName(resourceName: $resourceName) {
                ...UserDetails
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment IdentityDetails on Identity {
              ... on LocalIdentity {
                __typename
                id
                userId
                username
                createdAt
              }
              ... on FederatedIdentity {
                __typename
                id
                userId
                idp {
                  __typename
                  id
                  name
                }
                createdAt
              }
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserDetails on User {
              id
              displayName
              fullName
              email
              status
              avatar
              avatarThumbnail
              loginType
              globalRole
              identities {
                ...IdentityDetails
              }
              teams {
                ...TeamDetails
              }
              namespaces {
                ...NamespaceDetails
              }
              createdAt
              updatedAt
              lastLoginAt
              resourceName
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"resourceName": resource_name}
        response = await self.execute(
            query=query,
            operation_name="GetUserByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetUserByResourceName.model_validate(data).user_by_resource_name

    async def get_validator(self, id: ValidatorId, **kwargs: Any) -> Optional[
        Union[
            "GetValidatorValidatorValidator",
            "GetValidatorValidatorCategoricalDistributionValidator",
            "GetValidatorValidatorFreshnessValidator",
            "GetValidatorValidatorNumericAnomalyValidator",
            "GetValidatorValidatorNumericDistributionValidator",
            "GetValidatorValidatorNumericValidator",
            "GetValidatorValidatorRelativeTimeValidator",
            "GetValidatorValidatorRelativeVolumeValidator",
            "GetValidatorValidatorSqlValidator",
            "GetValidatorValidatorVolumeValidator",
        ]
    ]:
        from .get_validator import GetValidator

        query = gql(
            """
            query GetValidator($id: ValidatorId!) {
              validator(id: $id) {
                ...ValidatorDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetValidator", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetValidator.model_validate(data).validator

    async def get_validator_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetValidatorByResourceNameValidatorByResourceNameValidator",
            "GetValidatorByResourceNameValidatorByResourceNameCategoricalDistributionValidator",
            "GetValidatorByResourceNameValidatorByResourceNameFreshnessValidator",
            "GetValidatorByResourceNameValidatorByResourceNameNumericAnomalyValidator",
            "GetValidatorByResourceNameValidatorByResourceNameNumericDistributionValidator",
            "GetValidatorByResourceNameValidatorByResourceNameNumericValidator",
            "GetValidatorByResourceNameValidatorByResourceNameRelativeTimeValidator",
            "GetValidatorByResourceNameValidatorByResourceNameRelativeVolumeValidator",
            "GetValidatorByResourceNameValidatorByResourceNameSqlValidator",
            "GetValidatorByResourceNameValidatorByResourceNameVolumeValidator",
        ]
    ]:
        from .get_validator_by_resource_name import GetValidatorByResourceName

        query = gql(
            """
            query GetValidatorByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              validatorByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...ValidatorDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetValidatorByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetValidatorByResourceName.model_validate(
            data
        ).validator_by_resource_name

    async def get_validator_incidents(
        self,
        id: ValidatorId,
        range: "TimeRangeInput",
        segment_id: Union[Optional[Any], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> Optional["GetValidatorIncidentsValidator"]:
        from .get_validator_incidents import GetValidatorIncidents

        query = gql(
            """
            query GetValidatorIncidents($id: ValidatorId!, $range: TimeRangeInput!, $segmentId: SegmentId) {
              validator(id: $id) {
                __typename
                id
                metricValueFormat
                incidents(range: $range, segmentId: $segmentId) {
                  id
                  group {
                    id
                  }
                  value
                  deviation
                  lowerBound
                  upperBound
                  status
                  severity
                  startTime
                  endTime
                  backfillMode
                  createdAt
                  updatedAt
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "range": range,
            "segmentId": segment_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetValidatorIncidents",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetValidatorIncidents.model_validate(data).validator

    async def get_validator_metric_debug_info(
        self, input: "ValidatorMetricDebugInfoInput", **kwargs: Any
    ) -> Union[
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoValidatorMetricDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsAthenaSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsRedShiftSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoAwsS3SourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoAzureSynapseSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoClickHouseSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoDatabricksSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoGcpBigQuerySourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoGcpStorageSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoPostgreSQLSourceDebugInfo",
        "GetValidatorMetricDebugInfoValidatorMetricDebugInfoSnowflakeSourceDebugInfo",
    ]:
        from .get_validator_metric_debug_info import GetValidatorMetricDebugInfo

        query = gql(
            """
            query GetValidatorMetricDebugInfo($input: ValidatorMetricDebugInfoInput!) {
              validatorMetricDebugInfo(input: $input) {
                ...ValidatorMetricDebugInfoDetails
              }
            }

            fragment ValidatorMetricDebugInfoDetails on ValidatorMetricDebugInfo {
              __typename
              startTime
              endTime
              ... on AzureSynapseSourceDebugInfo {
                sqlQuery
              }
              ... on DatabricksSourceDebugInfo {
                sqlQuery
              }
              ... on GcpBigQuerySourceDebugInfo {
                sqlQuery
              }
              ... on GcpStorageSourceDebugInfo {
                bucket
                filePath
              }
              ... on AwsS3SourceDebugInfo {
                bucket
                filePath
              }
              ... on AwsRedShiftSourceDebugInfo {
                sqlQuery
              }
              ... on AwsAthenaSourceDebugInfo {
                sqlQuery
              }
              ... on SnowflakeSourceDebugInfo {
                sqlQuery
              }
              ... on PostgreSQLSourceDebugInfo {
                sqlQuery
              }
              ... on ClickHouseSourceDebugInfo {
                sqlQuery
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="GetValidatorMetricDebugInfo",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetValidatorMetricDebugInfo.model_validate(
            data
        ).validator_metric_debug_info

    async def get_validator_metric_debug_records(
        self, input: "ValidatorMetricDebugInfoInput", **kwargs: Any
    ) -> "GetValidatorMetricDebugRecordsValidatorMetricDebugRecords":
        from .get_validator_metric_debug_records import GetValidatorMetricDebugRecords

        query = gql(
            """
            query GetValidatorMetricDebugRecords($input: ValidatorMetricDebugInfoInput!) {
              validatorMetricDebugRecords(input: $input) {
                columns
                rows
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="GetValidatorMetricDebugRecords",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetValidatorMetricDebugRecords.model_validate(
            data
        ).validator_metric_debug_records

    async def get_validator_segment_metrics(
        self, input: "ValidatorSegmentMetricsInput", **kwargs: Any
    ) -> Union[
        "GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithDifferenceThresholdHistory",
        "GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithDynamicThresholdHistory",
        "GetValidatorSegmentMetricsValidatorSegmentMetricsValidatorMetricWithFixedThresholdHistory",
    ]:
        from .get_validator_segment_metrics import GetValidatorSegmentMetrics

        query = gql(
            """
            query GetValidatorSegmentMetrics($input: ValidatorSegmentMetricsInput!) {
              validatorSegmentMetrics(input: $input) {
                __typename
                ... on ValidatorMetricWithFixedThresholdHistory {
                  values {
                    ...ValidatorMetricDetails
                  }
                }
                ... on ValidatorMetricWithDynamicThresholdHistory {
                  values {
                    ...ValidatorMetricDetails
                  }
                }
                ... on ValidatorMetricWithDifferenceThresholdHistory {
                  values {
                    ...ValidatorMetricDetails
                  }
                }
              }
            }

            fragment ValidatorMetricDetails on ValidatorMetric {
              __typename
              startTime
              endTime
              isIncident
              value
              severity
              ... on ValidatorMetricWithFixedThreshold {
                operator
                bound
              }
              ... on ValidatorMetricWithDynamicThreshold {
                lowerBound
                upperBound
                decisionBoundsType
                isBurnIn
              }
              ... on ValidatorMetricWithDifferenceThreshold {
                maybeLowerBound: lowerBound
                maybeUpperBound: upperBound
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="GetValidatorSegmentMetrics",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetValidatorSegmentMetrics.model_validate(data).validator_segment_metrics

    async def get_window(self, id: WindowId, **kwargs: Any) -> Optional[
        Union[
            "GetWindowWindowWindow",
            "GetWindowWindowFileWindow",
            "GetWindowWindowFixedBatchWindow",
            "GetWindowWindowTumblingWindow",
        ]
    ]:
        from .get_window import GetWindow

        query = gql(
            """
            query GetWindow($id: WindowId!) {
              window(id: $id) {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="GetWindow", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetWindow.model_validate(data).window

    async def get_window_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> Optional[
        Union[
            "GetWindowByResourceNameWindowByResourceNameWindow",
            "GetWindowByResourceNameWindowByResourceNameFileWindow",
            "GetWindowByResourceNameWindowByResourceNameFixedBatchWindow",
            "GetWindowByResourceNameWindowByResourceNameTumblingWindow",
        ]
    ]:
        from .get_window_by_resource_name import GetWindowByResourceName

        query = gql(
            """
            query GetWindowByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              windowByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="GetWindowByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetWindowByResourceName.model_validate(data).window_by_resource_name

    async def infer_aws_athena_schema(
        self, input: "AwsAthenaInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_aws_athena_schema import InferAwsAthenaSchema

        query = gql(
            """
            query InferAwsAthenaSchema($input: AwsAthenaInferSchemaInput!) {
              awsAthenaInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferAwsAthenaSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferAwsAthenaSchema.model_validate(data).aws_athena_infer_schema

    async def infer_aws_kinesis_schema(
        self, input: "AwsKinesisInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_aws_kinesis_schema import InferAwsKinesisSchema

        query = gql(
            """
            query InferAwsKinesisSchema($input: AwsKinesisInferSchemaInput!) {
              awsKinesisInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferAwsKinesisSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferAwsKinesisSchema.model_validate(data).aws_kinesis_infer_schema

    async def infer_aws_redshift_schema(
        self, input: "AwsRedshiftInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_aws_redshift_schema import InferAwsRedshiftSchema

        query = gql(
            """
            query InferAwsRedshiftSchema($input: AwsRedshiftInferSchemaInput!) {
              awsRedshiftInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferAwsRedshiftSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferAwsRedshiftSchema.model_validate(data).aws_redshift_infer_schema

    async def infer_aws_s3_schema(
        self, input: "AwsS3InferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_aws_s3_schema import InferAwsS3Schema

        query = gql(
            """
            query InferAwsS3Schema($input: AwsS3InferSchemaInput!) {
              awsS3InferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferAwsS3Schema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferAwsS3Schema.model_validate(data).aws_s3_infer_schema

    async def infer_azure_synapse_schema(
        self, input: "AzureSynapseInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_azure_synapse_schema import InferAzureSynapseSchema

        query = gql(
            """
            query InferAzureSynapseSchema($input: AzureSynapseInferSchemaInput!) {
              azureSynapseInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferAzureSynapseSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferAzureSynapseSchema.model_validate(data).azure_synapse_infer_schema

    async def infer_click_house_schema(
        self, input: "ClickHouseInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_click_house_schema import InferClickHouseSchema

        query = gql(
            """
            query InferClickHouseSchema($input: ClickHouseInferSchemaInput!) {
              clickHouseInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferClickHouseSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferClickHouseSchema.model_validate(data).click_house_infer_schema

    async def infer_databricks_schema(
        self, input: "DatabricksInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_databricks_schema import InferDatabricksSchema

        query = gql(
            """
            query InferDatabricksSchema($input: DatabricksInferSchemaInput!) {
              databricksInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferDatabricksSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferDatabricksSchema.model_validate(data).databricks_infer_schema

    async def infer_dbt_model_run_schema(self, **kwargs: Any) -> JsonTypeDefinition:
        from .infer_dbt_model_run_schema import InferDbtModelRunSchema

        query = gql(
            """
            query InferDbtModelRunSchema {
              dbtModelRunInferSchema
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="InferDbtModelRunSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferDbtModelRunSchema.model_validate(data).dbt_model_run_infer_schema

    async def infer_dbt_test_result_schema(self, **kwargs: Any) -> JsonTypeDefinition:
        from .infer_dbt_test_result_schema import InferDbtTestResultSchema

        query = gql(
            """
            query InferDbtTestResultSchema {
              dbtTestResultInferSchema
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="InferDbtTestResultSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferDbtTestResultSchema.model_validate(
            data
        ).dbt_test_result_infer_schema

    async def infer_demo_schema(self, **kwargs: Any) -> JsonTypeDefinition:
        from .infer_demo_schema import InferDemoSchema

        query = gql(
            """
            query InferDemoSchema {
              demoInferSchema
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="InferDemoSchema", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return InferDemoSchema.model_validate(data).demo_infer_schema

    async def infer_gcp_big_query_schema(
        self, input: "GcpBigQueryInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_gcp_big_query_schema import InferGcpBigQuerySchema

        query = gql(
            """
            query InferGcpBigQuerySchema($input: GcpBigQueryInferSchemaInput!) {
              gcpBigQueryInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferGcpBigQuerySchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferGcpBigQuerySchema.model_validate(data).gcp_big_query_infer_schema

    async def infer_gcp_pub_sub_lite_schema(
        self, input: "GcpPubSubLiteInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_gcp_pub_sub_lite_schema import InferGcpPubSubLiteSchema

        query = gql(
            """
            query InferGcpPubSubLiteSchema($input: GcpPubSubLiteInferSchemaInput!) {
              gcpPubSubLiteInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferGcpPubSubLiteSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferGcpPubSubLiteSchema.model_validate(
            data
        ).gcp_pub_sub_lite_infer_schema

    async def infer_gcp_pub_sub_schema(
        self, input: "GcpPubSubInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_gcp_pub_sub_schema import InferGcpPubSubSchema

        query = gql(
            """
            query InferGcpPubSubSchema($input: GcpPubSubInferSchemaInput!) {
              gcpPubSubInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferGcpPubSubSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferGcpPubSubSchema.model_validate(data).gcp_pub_sub_infer_schema

    async def infer_gcp_storage_schema(
        self, input: "GcpStorageInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_gcp_storage_schema import InferGcpStorageSchema

        query = gql(
            """
            query InferGcpStorageSchema($input: GcpStorageInferSchemaInput!) {
              gcpStorageInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferGcpStorageSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferGcpStorageSchema.model_validate(data).gcp_storage_infer_schema

    async def infer_kafka_schema(
        self, input: "KafkaInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_kafka_schema import InferKafkaSchema

        query = gql(
            """
            query InferKafkaSchema($input: KafkaInferSchemaInput!) {
              kafkaInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferKafkaSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferKafkaSchema.model_validate(data).kafka_infer_schema

    async def infer_postgre_sql_schema(
        self, input: "PostgreSqlInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_postgre_sql_schema import InferPostgreSqlSchema

        query = gql(
            """
            query InferPostgreSqlSchema($input: PostgreSqlInferSchemaInput!) {
              postgreSqlInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferPostgreSqlSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferPostgreSqlSchema.model_validate(data).postgre_sql_infer_schema

    async def infer_sample_schema(
        self, input: List[Any], **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_sample_schema import InferSampleSchema

        query = gql(
            """
            query InferSampleSchema($input: [JSONObject!]!) {
              sampleInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferSampleSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferSampleSchema.model_validate(data).sample_infer_schema

    async def infer_snowflake_schema(
        self, input: "SnowflakeInferSchemaInput", **kwargs: Any
    ) -> JsonTypeDefinition:
        from .infer_snowflake_schema import InferSnowflakeSchema

        query = gql(
            """
            query InferSnowflakeSchema($input: SnowflakeInferSchemaInput!) {
              snowflakeInferSchema(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="InferSnowflakeSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return InferSnowflakeSchema.model_validate(data).snowflake_infer_schema

    async def kafka_sasl_ssl_plain_credential_secret_changed(
        self, input: "KafkaSaslSslPlainCredentialSecretChangedInput", **kwargs: Any
    ) -> "KafkaSaslSslPlainCredentialSecretChangedKafkaSaslSslPlainCredentialSecretChanged":
        from .kafka_sasl_ssl_plain_credential_secret_changed import (
            KafkaSaslSslPlainCredentialSecretChanged,
        )

        query = gql(
            """
            query KafkaSaslSslPlainCredentialSecretChanged($input: KafkaSaslSslPlainCredentialSecretChangedInput!) {
              kafkaSaslSslPlainCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="KafkaSaslSslPlainCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return KafkaSaslSslPlainCredentialSecretChanged.model_validate(
            data
        ).kafka_sasl_ssl_plain_credential_secret_changed

    async def kafka_ssl_credential_secret_changed(
        self, input: "KafkaSslCredentialSecretChangedInput", **kwargs: Any
    ) -> "KafkaSslCredentialSecretChangedKafkaSslCredentialSecretChanged":
        from .kafka_ssl_credential_secret_changed import KafkaSslCredentialSecretChanged

        query = gql(
            """
            query KafkaSslCredentialSecretChanged($input: KafkaSslCredentialSecretChangedInput!) {
              kafkaSslCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="KafkaSslCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return KafkaSslCredentialSecretChanged.model_validate(
            data
        ).kafka_ssl_credential_secret_changed

    async def list_channels(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListChannelsChannelsListChannel",
            "ListChannelsChannelsListMsTeamsChannel",
            "ListChannelsChannelsListSlackChannel",
            "ListChannelsChannelsListWebhookChannel",
        ]
    ]:
        from .list_channels import ListChannels

        query = gql(
            """
            query ListChannels($filter: ResourceFilter) {
              channelsList(filter: $filter) {
                ...ChannelDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query, operation_name="ListChannels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListChannels.model_validate(data).channels_list

    async def list_credentials(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListCredentialsCredentialsListCredential",
            "ListCredentialsCredentialsListAwsAthenaCredential",
            "ListCredentialsCredentialsListAwsCredential",
            "ListCredentialsCredentialsListAwsRedshiftCredential",
            "ListCredentialsCredentialsListAzureSynapseEntraIdCredential",
            "ListCredentialsCredentialsListAzureSynapseSqlCredential",
            "ListCredentialsCredentialsListClickHouseCredential",
            "ListCredentialsCredentialsListDatabricksCredential",
            "ListCredentialsCredentialsListDbtCloudCredential",
            "ListCredentialsCredentialsListDbtCoreCredential",
            "ListCredentialsCredentialsListGcpCredential",
            "ListCredentialsCredentialsListKafkaSaslSslPlainCredential",
            "ListCredentialsCredentialsListKafkaSslCredential",
            "ListCredentialsCredentialsListLookerCredential",
            "ListCredentialsCredentialsListMsPowerBiCredential",
            "ListCredentialsCredentialsListPostgreSqlCredential",
            "ListCredentialsCredentialsListSnowflakeCredential",
            "ListCredentialsCredentialsListTableauConnectedAppCredential",
            "ListCredentialsCredentialsListTableauPersonalAccessTokenCredential",
        ]
    ]:
        from .list_credentials import ListCredentials

        query = gql(
            """
            query ListCredentials($filter: ResourceFilter) {
              credentialsList(filter: $filter) {
                ...CredentialDetails
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query, operation_name="ListCredentials", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListCredentials.model_validate(data).credentials_list

    async def list_filters(
        self,
        source_id: Union[Optional[SourceId], "UnsetType"] = UNSET,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListFiltersFiltersListFilter",
            "ListFiltersFiltersListBooleanFilter",
            "ListFiltersFiltersListEnumFilter",
            "ListFiltersFiltersListNullFilter",
            "ListFiltersFiltersListSqlFilter",
            "ListFiltersFiltersListStringFilter",
            "ListFiltersFiltersListThresholdFilter",
        ]
    ]:
        from .list_filters import ListFilters

        query = gql(
            """
            query ListFilters($sourceId: SourceId, $filter: ResourceFilter) {
              filtersList(sourceId: $sourceId, filter: $filter) {
                ...FilterDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"sourceId": source_id, "filter": filter}
        response = await self.execute(
            query=query, operation_name="ListFilters", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListFilters.model_validate(data).filters_list

    async def list_identity_providers(self, **kwargs: Any) -> List[
        Union[
            "ListIdentityProvidersIdentityProvidersListIdentityProvider",
            "ListIdentityProvidersIdentityProvidersListSamlIdentityProvider",
        ]
    ]:
        from .list_identity_providers import ListIdentityProviders

        query = gql(
            """
            query ListIdentityProviders {
              identityProvidersList {
                ...IdentityProviderDetails
              }
            }

            fragment IdentityProviderDetails on IdentityProvider {
              __typename
              id
              name
              disabled
              createdAt
              updatedAt
              resourceName
              ... on SamlIdentityProvider {
                config {
                  entryPoint
                  entityId
                  cert
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="ListIdentityProviders",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ListIdentityProviders.model_validate(data).identity_providers_list

    async def list_namespaces(self, **kwargs: Any) -> List["ListNamespacesNamespaces"]:
        from .list_namespaces import ListNamespaces

        query = gql(
            """
            query listNamespaces {
              namespaces {
                ...NamespaceDetails
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="listNamespaces", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListNamespaces.model_validate(data).namespaces

    async def list_notification_rules(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List["ListNotificationRulesNotificationRulesList"]:
        from .list_notification_rules import ListNotificationRules

        query = gql(
            """
            query ListNotificationRules($filter: ResourceFilter) {
              notificationRulesList(filter: $filter) {
                ...NotificationRuleDetails
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment NotificationRuleConditions on NotificationRuleCondition {
              __typename
              id
              notificationRuleId
              createdAt
              updatedAt
              ... on SourceNotificationRuleCondition {
                config {
                  sources {
                    __typename
                    id
                    name
                    resourceName
                  }
                }
              }
              ... on SeverityNotificationRuleCondition {
                config {
                  severities
                }
              }
              ... on TypeNotificationRuleCondition {
                config {
                  types
                }
              }
              ... on OwnerNotificationRuleCondition {
                config {
                  owners {
                    id
                    displayName
                  }
                }
              }
              ... on TagNotificationRuleCondition {
                config {
                  tags {
                    id
                    key
                    value
                  }
                }
              }
              ... on SegmentNotificationRuleCondition {
                config {
                  segments {
                    field
                    value
                  }
                }
              }
            }

            fragment NotificationRuleDetails on NotificationRule {
              __typename
              id
              name
              createdAt
              updatedAt
              conditions {
                ...NotificationRuleConditions
              }
              channel {
                ...ChannelDetails
              }
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query,
            operation_name="ListNotificationRules",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ListNotificationRules.model_validate(data).notification_rules_list

    async def list_resource_namespaces(
        self, **kwargs: Any
    ) -> List["ListResourceNamespacesResourceNamespacesList"]:
        from .list_resource_namespaces import ListResourceNamespaces

        query = gql(
            """
            query listResourceNamespaces {
              resourceNamespacesList {
                namespaceId
                resourceNamespace
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query,
            operation_name="listResourceNamespaces",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ListResourceNamespaces.model_validate(data).resource_namespaces_list

    async def list_segmentations(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List["ListSegmentationsSegmentationsList"]:
        from .list_segmentations import ListSegmentations

        query = gql(
            """
            query ListSegmentations($filter: ResourceFilter) {
              segmentationsList(filter: $filter) {
                ...SegmentationDetails
              }
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query,
            operation_name="ListSegmentations",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return ListSegmentations.model_validate(data).segmentations_list

    async def list_sources(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListSourcesSourcesListSource",
            "ListSourcesSourcesListAwsAthenaSource",
            "ListSourcesSourcesListAwsKinesisSource",
            "ListSourcesSourcesListAwsRedshiftSource",
            "ListSourcesSourcesListAwsS3Source",
            "ListSourcesSourcesListAzureSynapseSource",
            "ListSourcesSourcesListClickHouseSource",
            "ListSourcesSourcesListDatabricksSource",
            "ListSourcesSourcesListDbtModelRunSource",
            "ListSourcesSourcesListDbtTestResultSource",
            "ListSourcesSourcesListGcpBigQuerySource",
            "ListSourcesSourcesListGcpPubSubLiteSource",
            "ListSourcesSourcesListGcpPubSubSource",
            "ListSourcesSourcesListGcpStorageSource",
            "ListSourcesSourcesListKafkaSource",
            "ListSourcesSourcesListPostgreSqlSource",
            "ListSourcesSourcesListSnowflakeSource",
        ]
    ]:
        from .list_sources import ListSources

        query = gql(
            """
            query ListSources($filter: ResourceFilter) {
              sourcesList(filter: $filter) {
                ...SourceDetails
              }
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query, operation_name="ListSources", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListSources.model_validate(data).sources_list

    async def list_tags(self, **kwargs: Any) -> List["ListTagsTagsList"]:
        from .list_tags import ListTags

        query = gql(
            """
            query ListTags {
              tagsList {
                ...TagDetails
              }
            }

            fragment TagDetails on Tag {
              id
              key
              value
              createdAt
              origin
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="ListTags", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListTags.model_validate(data).tags_list

    async def list_users(self, **kwargs: Any) -> List["ListUsersUsersList"]:
        from .list_users import ListUsers

        query = gql(
            """
            query ListUsers {
              usersList {
                ...UserDetails
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment IdentityDetails on Identity {
              ... on LocalIdentity {
                __typename
                id
                userId
                username
                createdAt
              }
              ... on FederatedIdentity {
                __typename
                id
                userId
                idp {
                  __typename
                  id
                  name
                }
                createdAt
              }
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserDetails on User {
              id
              displayName
              fullName
              email
              status
              avatar
              avatarThumbnail
              loginType
              globalRole
              identities {
                ...IdentityDetails
              }
              teams {
                ...TeamDetails
              }
              namespaces {
                ...NamespaceDetails
              }
              createdAt
              updatedAt
              lastLoginAt
              resourceName
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = await self.execute(
            query=query, operation_name="ListUsers", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListUsers.model_validate(data).users_list

    async def list_validators(
        self,
        id: Union[Optional[SourceId], "UnsetType"] = UNSET,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListValidatorsValidatorsListValidator",
            "ListValidatorsValidatorsListCategoricalDistributionValidator",
            "ListValidatorsValidatorsListFreshnessValidator",
            "ListValidatorsValidatorsListNumericAnomalyValidator",
            "ListValidatorsValidatorsListNumericDistributionValidator",
            "ListValidatorsValidatorsListNumericValidator",
            "ListValidatorsValidatorsListRelativeTimeValidator",
            "ListValidatorsValidatorsListRelativeVolumeValidator",
            "ListValidatorsValidatorsListSqlValidator",
            "ListValidatorsValidatorsListVolumeValidator",
        ]
    ]:
        from .list_validators import ListValidators

        query = gql(
            """
            query ListValidators($id: SourceId, $filter: ResourceFilter) {
              validatorsList(id: $id, filter: $filter) {
                ...ValidatorDetails
              }
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "filter": filter}
        response = await self.execute(
            query=query, operation_name="ListValidators", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListValidators.model_validate(data).validators_list

    async def list_windows(
        self,
        filter: Union[Optional["ResourceFilter"], "UnsetType"] = UNSET,
        **kwargs: Any
    ) -> List[
        Union[
            "ListWindowsWindowsListWindow",
            "ListWindowsWindowsListFileWindow",
            "ListWindowsWindowsListFixedBatchWindow",
            "ListWindowsWindowsListTumblingWindow",
        ]
    ]:
        from .list_windows import ListWindows

        query = gql(
            """
            query ListWindows($filter: ResourceFilter) {
              windowsList(filter: $filter) {
                ...WindowDetails
              }
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }
            """
        )
        variables: Dict[str, object] = {"filter": filter}
        response = await self.execute(
            query=query, operation_name="ListWindows", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ListWindows.model_validate(data).windows_list

    async def looker_credential_secret_changed(
        self, input: "LookerCredentialSecretChangedInput", **kwargs: Any
    ) -> "LookerCredentialSecretChangedLookerCredentialSecretChanged":
        from .looker_credential_secret_changed import LookerCredentialSecretChanged

        query = gql(
            """
            query LookerCredentialSecretChanged($input: LookerCredentialSecretChangedInput!) {
              lookerCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="LookerCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return LookerCredentialSecretChanged.model_validate(
            data
        ).looker_credential_secret_changed

    async def ms_power_bi_credential_secret_changed(
        self, input: "MsPowerBiCredentialSecretChangedInput", **kwargs: Any
    ) -> "MsPowerBiCredentialSecretChangedMsPowerBiCredentialSecretChanged":
        from .ms_power_bi_credential_secret_changed import (
            MsPowerBiCredentialSecretChanged,
        )

        query = gql(
            """
            query MsPowerBiCredentialSecretChanged($input: MsPowerBiCredentialSecretChangedInput!) {
              msPowerBiCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="MsPowerBiCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MsPowerBiCredentialSecretChanged.model_validate(
            data
        ).ms_power_bi_credential_secret_changed

    async def ms_teams_channel_secret_changed(
        self, input: "MsTeamsChannelSecretChangedInput", **kwargs: Any
    ) -> "MsTeamsChannelSecretChangedMsTeamsChannelSecretChanged":
        from .ms_teams_channel_secret_changed import MsTeamsChannelSecretChanged

        query = gql(
            """
            query MsTeamsChannelSecretChanged($input: MsTeamsChannelSecretChangedInput!) {
              msTeamsChannelSecretChanged(input: $input) {
                errors {
                  ...ErrorDetails
                }
                clientId
                clientSecret
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="MsTeamsChannelSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MsTeamsChannelSecretChanged.model_validate(
            data
        ).ms_teams_channel_secret_changed

    async def mute_incident_group(
        self, id: Any, until: datetime, **kwargs: Any
    ) -> "MuteIncidentGroupIncidentGroupMute":
        from .mute_incident_group import MuteIncidentGroup

        query = gql(
            """
            mutation MuteIncidentGroup($id: IncidentGroupId!, $until: DateTime!) {
              incidentGroupMute(id: $id, until: $until) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "until": serialize_rfc3339_datetime(until),
        }
        response = await self.execute(
            query=query,
            operation_name="MuteIncidentGroup",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return MuteIncidentGroup.model_validate(data).incident_group_mute

    async def mute_incidents(
        self, input: "MuteIncidentsInput", until: datetime, **kwargs: Any
    ) -> "MuteIncidentsIncidentsMute":
        from .mute_incidents import MuteIncidents

        query = gql(
            """
            mutation MuteIncidents($input: MuteIncidentsInput!, $until: DateTime!) {
              incidentsMute(input: $input, until: $until) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {
            "input": input,
            "until": serialize_rfc3339_datetime(until),
        }
        response = await self.execute(
            query=query, operation_name="MuteIncidents", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MuteIncidents.model_validate(data).incidents_mute

    async def mute_source(
        self, id: SourceId, until: datetime, **kwargs: Any
    ) -> "MuteSourceSourceMute":
        from .mute_source import MuteSource

        query = gql(
            """
            mutation MuteSource($id: SourceId!, $until: DateTime!) {
              sourceMute(id: $id, until: $until) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "until": serialize_rfc3339_datetime(until),
        }
        response = await self.execute(
            query=query, operation_name="MuteSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MuteSource.model_validate(data).source_mute

    async def mute_validator(
        self, id: ValidatorId, until: datetime, **kwargs: Any
    ) -> "MuteValidatorValidatorMute":
        from .mute_validator import MuteValidator

        query = gql(
            """
            mutation MuteValidator($id: ValidatorId!, $until: DateTime!) {
              validatorMute(id: $id, until: $until) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {
            "id": id,
            "until": serialize_rfc3339_datetime(until),
        }
        response = await self.execute(
            query=query, operation_name="MuteValidator", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return MuteValidator.model_validate(data).validator_mute

    async def revoke_namespace_roles(
        self, input: "NamespaceRolesRevokeInput", **kwargs: Any
    ) -> "RevokeNamespaceRolesNamespaceRolesRevoke":
        from .revoke_namespace_roles import RevokeNamespaceRoles

        query = gql(
            """
            mutation RevokeNamespaceRoles($input: NamespaceRolesRevokeInput!) {
              namespaceRolesRevoke(input: $input) {
                errors {
                  ...ErrorDetails
                }
                namespace {
                  ...NamespaceDetails
                }
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="RevokeNamespaceRoles",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RevokeNamespaceRoles.model_validate(data).namespace_roles_revoke

    async def update_namespace_roles(
        self, input: "NamespaceRolesUpdateInput", **kwargs: Any
    ) -> "UpdateNamespaceRolesNamespaceRolesUpdate":
        from .update_namespace_roles import UpdateNamespaceRoles

        query = gql(
            """
            mutation UpdateNamespaceRoles($input: NamespaceRolesUpdateInput!) {
              namespaceRolesUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                namespace {
                  ...NamespaceDetails
                }
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNamespaceRoles",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNamespaceRoles.model_validate(data).namespace_roles_update

    async def poll_source(
        self, id: SourceId, **kwargs: Any
    ) -> Optional["PollSourceSourcePoll"]:
        from .poll_source import PollSource

        query = gql(
            """
            mutation PollSource($id: SourceId!) {
              sourcePoll(id: $id) {
                errors {
                  ...ErrorDetails
                }
                state
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="PollSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return PollSource.model_validate(data).source_poll

    async def poll_source_manually(
        self, id: SourceId, **kwargs: Any
    ) -> "PollSourceManuallySourceManualPoll":
        from .poll_source_manually import PollSourceManually

        query = gql(
            """
            mutation PollSourceManually($id: SourceId!) {
              sourceManualPoll(id: $id) {
                id
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="PollSourceManually",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PollSourceManually.model_validate(data).source_manual_poll

    async def postgre_sql_credential_secret_changed(
        self, input: "PostgreSqlCredentialSecretChangedInput", **kwargs: Any
    ) -> "PostgreSqlCredentialSecretChangedPostgreSqlCredentialSecretChanged":
        from .postgre_sql_credential_secret_changed import (
            PostgreSqlCredentialSecretChanged,
        )

        query = gql(
            """
            query PostgreSqlCredentialSecretChanged($input: PostgreSqlCredentialSecretChangedInput!) {
              postgreSqlCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="PostgreSqlCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return PostgreSqlCredentialSecretChanged.model_validate(
            data
        ).postgre_sql_credential_secret_changed

    async def remove_team_members(
        self, input: "TeamMembersUpdateInput", **kwargs: Any
    ) -> "RemoveTeamMembersTeamMembersRemove":
        from .remove_team_members import RemoveTeamMembers

        query = gql(
            """
            mutation RemoveTeamMembers($input: TeamMembersUpdateInput!) {
              teamMembersRemove(input: $input) {
                errors {
                  ...ErrorDetails
                }
                team {
                  ...TeamDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="RemoveTeamMembers",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RemoveTeamMembers.model_validate(data).team_members_remove

    async def reset_source(
        self, id: SourceId, **kwargs: Any
    ) -> "ResetSourceSourceReset":
        from .reset_source import ResetSource

        query = gql(
            """
            mutation ResetSource($id: SourceId!) {
              sourceReset(id: $id) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="ResetSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return ResetSource.model_validate(data).source_reset

    async def segments(
        self, id: SegmentationId, **kwargs: Any
    ) -> List["SegmentsSegments"]:
        from .segments import Segments

        query = gql(
            """
            query Segments($id: SegmentationId!) {
              segments(id: $id) {
                ...SegmentDetails
              }
            }

            fragment SegmentDetails on Segment {
              __typename
              id
              muted
              fields {
                field
                value
              }
              dataQuality {
                incidentCount
                totalCount
                quality
                qualityDiff
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="Segments", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return Segments.model_validate(data).segments

    async def segments_by_resource_name(
        self, resource_name: str, namespace_id: Any, **kwargs: Any
    ) -> List["SegmentsByResourceNameSegmentsByResourceName"]:
        from .segments_by_resource_name import SegmentsByResourceName

        query = gql(
            """
            query SegmentsByResourceName($resourceName: String!, $namespaceId: NamespaceId!) {
              segmentsByResourceName(resourceName: $resourceName, namespaceId: $namespaceId) {
                ...SegmentDetails
              }
            }

            fragment SegmentDetails on Segment {
              __typename
              id
              muted
              fields {
                field
                value
              }
              dataQuality {
                incidentCount
                totalCount
                quality
                qualityDiff
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "resourceName": resource_name,
            "namespaceId": namespace_id,
        }
        response = await self.execute(
            query=query,
            operation_name="SegmentsByResourceName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SegmentsByResourceName.model_validate(data).segments_by_resource_name

    async def slack_channel_secret_changed(
        self, input: "SlackChannelSecretChangedInput", **kwargs: Any
    ) -> "SlackChannelSecretChangedSlackChannelSecretChanged":
        from .slack_channel_secret_changed import SlackChannelSecretChanged

        query = gql(
            """
            query SlackChannelSecretChanged($input: SlackChannelSecretChangedInput!) {
              slackChannelSecretChanged(input: $input) {
                errors {
                  ...ErrorDetails
                }
                token
                signingSecret
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="SlackChannelSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SlackChannelSecretChanged.model_validate(
            data
        ).slack_channel_secret_changed

    async def snowflake_credential_secret_changed(
        self, input: "SnowflakeCredentialSecretChangedInput", **kwargs: Any
    ) -> "SnowflakeCredentialSecretChangedSnowflakeCredentialSecretChanged":
        from .snowflake_credential_secret_changed import (
            SnowflakeCredentialSecretChanged,
        )

        query = gql(
            """
            query SnowflakeCredentialSecretChanged($input: SnowflakeCredentialSecretChangedInput!) {
              snowflakeCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="SnowflakeCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SnowflakeCredentialSecretChanged.model_validate(
            data
        ).snowflake_credential_secret_changed

    async def sql_filter_verification(
        self, input: "SqlFilterVerificationInput", **kwargs: Any
    ) -> "SqlFilterVerificationSqlFilterVerification":
        from .sql_filter_verification import SqlFilterVerification

        query = gql(
            """
            query SqlFilterVerification($input: SqlFilterVerificationInput!) {
              sqlFilterVerification(input: $input) {
                queryError
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="SqlFilterVerification",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SqlFilterVerification.model_validate(data).sql_filter_verification

    async def sql_validator_query_verification(
        self, input: "SqlValidatorQueryVerificationInput", **kwargs: Any
    ) -> "SqlValidatorQueryVerificationSqlValidatorQueryVerification":
        from .sql_validator_query_verification import SqlValidatorQueryVerification

        query = gql(
            """
            query SqlValidatorQueryVerification($input: SqlValidatorQueryVerificationInput!) {
              sqlValidatorQueryVerification(input: $input) {
                query
                records {
                  columns
                  rows
                }
                queryError
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="SqlValidatorQueryVerification",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return SqlValidatorQueryVerification.model_validate(
            data
        ).sql_validator_query_verification

    async def start_databricks_warehouse(
        self, input: "DatabricksStartWarehouseInput", **kwargs: Any
    ) -> bool:
        from .start_databricks_warehouse import StartDatabricksWarehouse

        query = gql(
            """
            query StartDatabricksWarehouse($input: DatabricksStartWarehouseInput!) {
              databricksStartWarehouse(input: $input)
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="StartDatabricksWarehouse",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return StartDatabricksWarehouse.model_validate(data).databricks_start_warehouse

    async def start_source(
        self, id: SourceId, **kwargs: Any
    ) -> "StartSourceSourceStart":
        from .start_source import StartSource

        query = gql(
            """
            mutation StartSource($id: SourceId!) {
              sourceStart(id: $id) {
                errors {
                  ...ErrorDetails
                }
                state
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="StartSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return StartSource.model_validate(data).source_start

    async def stop_source(self, id: SourceId, **kwargs: Any) -> "StopSourceSourceStop":
        from .stop_source import StopSource

        query = gql(
            """
            mutation StopSource($id: SourceId!) {
              sourceStop(id: $id) {
                errors {
                  ...ErrorDetails
                }
                state
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="StopSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return StopSource.model_validate(data).source_stop

    async def tableau_connected_app_credential_secret_changed(
        self, input: "TableauConnectedAppCredentialSecretChangedInput", **kwargs: Any
    ) -> "TableauConnectedAppCredentialSecretChangedTableauConnectedAppCredentialSecretChanged":
        from .tableau_connected_app_credential_secret_changed import (
            TableauConnectedAppCredentialSecretChanged,
        )

        query = gql(
            """
            query TableauConnectedAppCredentialSecretChanged($input: TableauConnectedAppCredentialSecretChangedInput!) {
              tableauConnectedAppCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="TableauConnectedAppCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return TableauConnectedAppCredentialSecretChanged.model_validate(
            data
        ).tableau_connected_app_credential_secret_changed

    async def tableau_personal_access_token_credential_secret_changed(
        self,
        input: "TableauPersonalAccessTokenCredentialSecretChangedInput",
        **kwargs: Any
    ) -> "TableauPersonalAccessTokenCredentialSecretChangedTableauPersonalAccessTokenCredentialSecretChanged":
        from .tableau_personal_access_token_credential_secret_changed import (
            TableauPersonalAccessTokenCredentialSecretChanged,
        )

        query = gql(
            """
            query TableauPersonalAccessTokenCredentialSecretChanged($input: TableauPersonalAccessTokenCredentialSecretChangedInput!) {
              tableauPersonalAccessTokenCredentialSecretChanged(input: $input) {
                ...CredentialSecretChanged
              }
            }

            fragment CredentialSecretChanged on CredentialSecretChangedResult {
              errors {
                ...ErrorDetails
              }
              hasChanged
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="TableauPersonalAccessTokenCredentialSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return TableauPersonalAccessTokenCredentialSecretChanged.model_validate(
            data
        ).tableau_personal_access_token_credential_secret_changed

    async def translate_incident_v_1_to_group_id(
        self, old_id: str, **kwargs: Any
    ) -> Optional["TranslateIncidentV1ToGroupIdTranslateIncidentV1"]:
        from .translate_incident_v_1_to_group_id import TranslateIncidentV1ToGroupId

        query = gql(
            """
            query TranslateIncidentV1ToGroupId($oldId: ID!) {
              translateIncidentV1(oldId: $oldId) {
                oldId
                groupId
                incidentId
              }
            }
            """
        )
        variables: Dict[str, object] = {"oldId": old_id}
        response = await self.execute(
            query=query,
            operation_name="TranslateIncidentV1ToGroupId",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return TranslateIncidentV1ToGroupId.model_validate(data).translate_incident_v_1

    async def unmute_incident_group(
        self, id: Any, **kwargs: Any
    ) -> "UnmuteIncidentGroupIncidentGroupUnmute":
        from .unmute_incident_group import UnmuteIncidentGroup

        query = gql(
            """
            mutation UnmuteIncidentGroup($id: IncidentGroupId!) {
              incidentGroupUnmute(id: $id) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="UnmuteIncidentGroup",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UnmuteIncidentGroup.model_validate(data).incident_group_unmute

    async def unmute_incidents(
        self, input: "MuteIncidentsInput", **kwargs: Any
    ) -> "UnmuteIncidentsIncidentsUnmute":
        from .unmute_incidents import UnmuteIncidents

        query = gql(
            """
            mutation UnmuteIncidents($input: MuteIncidentsInput!) {
              incidentsUnmute(input: $input) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UnmuteIncidents", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UnmuteIncidents.model_validate(data).incidents_unmute

    async def unmute_source(
        self, id: SourceId, **kwargs: Any
    ) -> "UnmuteSourceSourceUnmute":
        from .unmute_source import UnmuteSource

        query = gql(
            """
            mutation UnmuteSource($id: SourceId!) {
              sourceUnmute(id: $id) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="UnmuteSource", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UnmuteSource.model_validate(data).source_unmute

    async def unmute_validator(
        self, id: ValidatorId, **kwargs: Any
    ) -> "UnmuteValidatorValidatorUnmute":
        from .unmute_validator import UnmuteValidator

        query = gql(
            """
            mutation UnmuteValidator($id: ValidatorId!) {
              validatorUnmute(id: $id) {
                errors {
                  ...ErrorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query, operation_name="UnmuteValidator", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UnmuteValidator.model_validate(data).validator_unmute

    async def update_aws_athena_credential(
        self, input: "AwsAthenaCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateAwsAthenaCredentialAwsAthenaCredentialUpdate":
        from .update_aws_athena_credential import UpdateAwsAthenaCredential

        query = gql(
            """
            mutation UpdateAwsAthenaCredential($input: AwsAthenaCredentialUpdateInput!) {
              awsAthenaCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsAthenaCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsAthenaCredential.model_validate(
            data
        ).aws_athena_credential_update

    async def update_aws_athena_source(
        self, input: "AwsAthenaSourceUpdateInput", **kwargs: Any
    ) -> "UpdateAwsAthenaSourceAwsAthenaSourceUpdate":
        from .update_aws_athena_source import UpdateAwsAthenaSource

        query = gql(
            """
            mutation UpdateAwsAthenaSource($input: AwsAthenaSourceUpdateInput!) {
              awsAthenaSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsAthenaSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsAthenaSource.model_validate(data).aws_athena_source_update

    async def update_aws_credential(
        self, input: "AwsCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateAwsCredentialAwsCredentialUpdate":
        from .update_aws_credential import UpdateAwsCredential

        query = gql(
            """
            mutation UpdateAwsCredential($input: AwsCredentialUpdateInput!) {
              awsCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsCredential.model_validate(data).aws_credential_update

    async def update_aws_kinesis_source(
        self, input: "AwsKinesisSourceUpdateInput", **kwargs: Any
    ) -> "UpdateAwsKinesisSourceAwsKinesisSourceUpdate":
        from .update_aws_kinesis_source import UpdateAwsKinesisSource

        query = gql(
            """
            mutation UpdateAwsKinesisSource($input: AwsKinesisSourceUpdateInput!) {
              awsKinesisSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsKinesisSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsKinesisSource.model_validate(data).aws_kinesis_source_update

    async def update_aws_redshift_credential(
        self, input: "AwsRedshiftCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateAwsRedshiftCredentialAwsRedshiftCredentialUpdate":
        from .update_aws_redshift_credential import UpdateAwsRedshiftCredential

        query = gql(
            """
            mutation UpdateAwsRedshiftCredential($input: AwsRedshiftCredentialUpdateInput!) {
              awsRedshiftCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsRedshiftCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsRedshiftCredential.model_validate(
            data
        ).aws_redshift_credential_update

    async def update_aws_redshift_source(
        self, input: "AwsRedshiftSourceUpdateInput", **kwargs: Any
    ) -> "UpdateAwsRedshiftSourceAwsRedshiftSourceUpdate":
        from .update_aws_redshift_source import UpdateAwsRedshiftSource

        query = gql(
            """
            mutation UpdateAwsRedshiftSource($input: AwsRedshiftSourceUpdateInput!) {
              awsRedshiftSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsRedshiftSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsRedshiftSource.model_validate(data).aws_redshift_source_update

    async def update_aws_s3_source(
        self, input: "AwsS3SourceUpdateInput", **kwargs: Any
    ) -> "UpdateAwsS3SourceAwsS3SourceUpdate":
        from .update_aws_s3_source import UpdateAwsS3Source

        query = gql(
            """
            mutation UpdateAwsS3Source($input: AwsS3SourceUpdateInput!) {
              awsS3SourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAwsS3Source",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAwsS3Source.model_validate(data).aws_s3_source_update

    async def update_azure_synapse_entra_id_credential(
        self, input: "AzureSynapseEntraIdCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateAzureSynapseEntraIdCredentialAzureSynapseEntraIdCredentialUpdate":
        from .update_azure_synapse_entra_id_credential import (
            UpdateAzureSynapseEntraIdCredential,
        )

        query = gql(
            """
            mutation UpdateAzureSynapseEntraIdCredential($input: AzureSynapseEntraIdCredentialUpdateInput!) {
              azureSynapseEntraIdCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAzureSynapseEntraIdCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAzureSynapseEntraIdCredential.model_validate(
            data
        ).azure_synapse_entra_id_credential_update

    async def update_azure_synapse_source(
        self, input: "AzureSynapseSourceUpdateInput", **kwargs: Any
    ) -> "UpdateAzureSynapseSourceAzureSynapseSourceUpdate":
        from .update_azure_synapse_source import UpdateAzureSynapseSource

        query = gql(
            """
            mutation UpdateAzureSynapseSource($input: AzureSynapseSourceUpdateInput!) {
              azureSynapseSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAzureSynapseSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAzureSynapseSource.model_validate(data).azure_synapse_source_update

    async def update_azure_synapse_sql_credential(
        self, input: "AzureSynapseSqlCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateAzureSynapseSqlCredentialAzureSynapseSqlCredentialUpdate":
        from .update_azure_synapse_sql_credential import UpdateAzureSynapseSqlCredential

        query = gql(
            """
            mutation UpdateAzureSynapseSqlCredential($input: AzureSynapseSqlCredentialUpdateInput!) {
              azureSynapseSqlCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateAzureSynapseSqlCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateAzureSynapseSqlCredential.model_validate(
            data
        ).azure_synapse_sql_credential_update

    async def update_boolean_filter(
        self, input: "BooleanFilterUpdateInput", **kwargs: Any
    ) -> "UpdateBooleanFilterBooleanFilterUpdate":
        from .update_boolean_filter import UpdateBooleanFilter

        query = gql(
            """
            mutation UpdateBooleanFilter($input: BooleanFilterUpdateInput!) {
              booleanFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateBooleanFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateBooleanFilter.model_validate(data).boolean_filter_update

    async def update_categorical_distribution_validator(
        self, input: "CategoricalDistributionValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateCategoricalDistributionValidatorCategoricalDistributionValidatorUpdate":
        from .update_categorical_distribution_validator import (
            UpdateCategoricalDistributionValidator,
        )

        query = gql(
            """
            mutation UpdateCategoricalDistributionValidator($input: CategoricalDistributionValidatorUpdateInput!) {
              categoricalDistributionValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateCategoricalDistributionValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCategoricalDistributionValidator.model_validate(
            data
        ).categorical_distribution_validator_update

    async def update_channel_namespace(
        self, input: "ResourceNamespaceUpdateInput", **kwargs: Any
    ) -> "UpdateChannelNamespaceChannelNamespaceUpdate":
        from .update_channel_namespace import UpdateChannelNamespace

        query = gql(
            """
            mutation UpdateChannelNamespace($input: ResourceNamespaceUpdateInput!) {
              channelNamespaceUpdate(input: $input) {
                ...NamespaceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceUpdate on ResourceNamespaceUpdatedResult {
              errors {
                ...ErrorDetails
              }
              resourceName
              namespaceId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateChannelNamespace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateChannelNamespace.model_validate(data).channel_namespace_update

    async def update_click_house_credential(
        self, input: "ClickHouseCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateClickHouseCredentialClickHouseCredentialUpdate":
        from .update_click_house_credential import UpdateClickHouseCredential

        query = gql(
            """
            mutation UpdateClickHouseCredential($input: ClickHouseCredentialUpdateInput!) {
              clickHouseCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateClickHouseCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateClickHouseCredential.model_validate(
            data
        ).click_house_credential_update

    async def update_click_house_source(
        self, input: "ClickHouseSourceUpdateInput", **kwargs: Any
    ) -> "UpdateClickHouseSourceClickHouseSourceUpdate":
        from .update_click_house_source import UpdateClickHouseSource

        query = gql(
            """
            mutation UpdateClickHouseSource($input: ClickHouseSourceUpdateInput!) {
              clickHouseSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateClickHouseSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateClickHouseSource.model_validate(data).click_house_source_update

    async def update_credential_namespace(
        self, input: "ResourceNamespaceUpdateInput", **kwargs: Any
    ) -> "UpdateCredentialNamespaceCredentialNamespaceUpdate":
        from .update_credential_namespace import UpdateCredentialNamespace

        query = gql(
            """
            mutation UpdateCredentialNamespace($input: ResourceNamespaceUpdateInput!) {
              credentialNamespaceUpdate(input: $input) {
                ...NamespaceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceUpdate on ResourceNamespaceUpdatedResult {
              errors {
                ...ErrorDetails
              }
              resourceName
              namespaceId
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateCredentialNamespace",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateCredentialNamespace.model_validate(
            data
        ).credential_namespace_update

    async def update_databricks_credential(
        self, input: "DatabricksCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateDatabricksCredentialDatabricksCredentialUpdate":
        from .update_databricks_credential import UpdateDatabricksCredential

        query = gql(
            """
            mutation UpdateDatabricksCredential($input: DatabricksCredentialUpdateInput!) {
              databricksCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDatabricksCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDatabricksCredential.model_validate(
            data
        ).databricks_credential_update

    async def update_databricks_source(
        self, input: "DatabricksSourceUpdateInput", **kwargs: Any
    ) -> "UpdateDatabricksSourceDatabricksSourceUpdate":
        from .update_databricks_source import UpdateDatabricksSource

        query = gql(
            """
            mutation UpdateDatabricksSource($input: DatabricksSourceUpdateInput!) {
              databricksSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDatabricksSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDatabricksSource.model_validate(data).databricks_source_update

    async def update_dbt_cloud_credential(
        self, input: "DbtCloudCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateDbtCloudCredentialDbtCloudCredentialUpdate":
        from .update_dbt_cloud_credential import UpdateDbtCloudCredential

        query = gql(
            """
            mutation UpdateDbtCloudCredential($input: DbtCloudCredentialUpdateInput!) {
              dbtCloudCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDbtCloudCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDbtCloudCredential.model_validate(data).dbt_cloud_credential_update

    async def update_dbt_core_credential(
        self, input: "DbtCoreCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateDbtCoreCredentialDbtCoreCredentialUpdate":
        from .update_dbt_core_credential import UpdateDbtCoreCredential

        query = gql(
            """
            mutation UpdateDbtCoreCredential($input: DbtCoreCredentialUpdateInput!) {
              dbtCoreCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDbtCoreCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDbtCoreCredential.model_validate(data).dbt_core_credential_update

    async def update_dbt_model_run_source(
        self, input: "DbtModelRunSourceUpdateInput", **kwargs: Any
    ) -> "UpdateDbtModelRunSourceDbtModelRunSourceUpdate":
        from .update_dbt_model_run_source import UpdateDbtModelRunSource

        query = gql(
            """
            mutation UpdateDbtModelRunSource($input: DbtModelRunSourceUpdateInput!) {
              dbtModelRunSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDbtModelRunSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDbtModelRunSource.model_validate(data).dbt_model_run_source_update

    async def update_dbt_test_result_source(
        self, input: "DbtTestResultSourceUpdateInput", **kwargs: Any
    ) -> "UpdateDbtTestResultSourceDbtTestResultSourceUpdate":
        from .update_dbt_test_result_source import UpdateDbtTestResultSource

        query = gql(
            """
            mutation UpdateDbtTestResultSource($input: DbtTestResultSourceUpdateInput!) {
              dbtTestResultSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDbtTestResultSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDbtTestResultSource.model_validate(
            data
        ).dbt_test_result_source_update

    async def update_demo_credential(
        self, input: "DemoCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateDemoCredentialDemoCredentialUpdate":
        from .update_demo_credential import UpdateDemoCredential

        query = gql(
            """
            mutation UpdateDemoCredential($input: DemoCredentialUpdateInput!) {
              demoCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDemoCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDemoCredential.model_validate(data).demo_credential_update

    async def update_demo_source(
        self, input: "DemoSourceUpdateInput", **kwargs: Any
    ) -> "UpdateDemoSourceDemoSourceUpdate":
        from .update_demo_source import UpdateDemoSource

        query = gql(
            """
            mutation UpdateDemoSource($input: DemoSourceUpdateInput!) {
              demoSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateDemoSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateDemoSource.model_validate(data).demo_source_update

    async def update_enum_filter(
        self, input: "EnumFilterUpdateInput", **kwargs: Any
    ) -> "UpdateEnumFilterEnumFilterUpdate":
        from .update_enum_filter import UpdateEnumFilter

        query = gql(
            """
            mutation UpdateEnumFilter($input: EnumFilterUpdateInput!) {
              enumFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateEnumFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateEnumFilter.model_validate(data).enum_filter_update

    async def update_file_window(
        self, input: "FileWindowUpdateInput", **kwargs: Any
    ) -> "UpdateFileWindowFileWindowUpdate":
        from .update_file_window import UpdateFileWindow

        query = gql(
            """
            mutation UpdateFileWindow($input: FileWindowUpdateInput!) {
              fileWindowUpdate(input: $input) {
                ...WindowUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }

            fragment WindowUpdate on WindowUpdateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateFileWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateFileWindow.model_validate(data).file_window_update

    async def update_fixed_batch_window(
        self, input: "FixedBatchWindowUpdateInput", **kwargs: Any
    ) -> "UpdateFixedBatchWindowFixedBatchWindowUpdate":
        from .update_fixed_batch_window import UpdateFixedBatchWindow

        query = gql(
            """
            mutation UpdateFixedBatchWindow($input: FixedBatchWindowUpdateInput!) {
              fixedBatchWindowUpdate(input: $input) {
                ...WindowUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }

            fragment WindowUpdate on WindowUpdateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateFixedBatchWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateFixedBatchWindow.model_validate(data).fixed_batch_window_update

    async def update_freshness_validator(
        self, input: "FreshnessValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateFreshnessValidatorFreshnessValidatorUpdate":
        from .update_freshness_validator import UpdateFreshnessValidator

        query = gql(
            """
            mutation UpdateFreshnessValidator($input: FreshnessValidatorUpdateInput!) {
              freshnessValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateFreshnessValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateFreshnessValidator.model_validate(data).freshness_validator_update

    async def update_gcp_big_query_source(
        self, input: "GcpBigQuerySourceUpdateInput", **kwargs: Any
    ) -> "UpdateGcpBigQuerySourceGcpBigQuerySourceUpdate":
        from .update_gcp_big_query_source import UpdateGcpBigQuerySource

        query = gql(
            """
            mutation UpdateGcpBigQuerySource($input: GcpBigQuerySourceUpdateInput!) {
              gcpBigQuerySourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGcpBigQuerySource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGcpBigQuerySource.model_validate(data).gcp_big_query_source_update

    async def update_gcp_credential(
        self, input: "GcpCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateGcpCredentialGcpCredentialUpdate":
        from .update_gcp_credential import UpdateGcpCredential

        query = gql(
            """
            mutation UpdateGcpCredential($input: GcpCredentialUpdateInput!) {
              gcpCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGcpCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGcpCredential.model_validate(data).gcp_credential_update

    async def update_gcp_pub_sub_lite_source(
        self, input: "GcpPubSubLiteSourceUpdateInput", **kwargs: Any
    ) -> "UpdateGcpPubSubLiteSourceGcpPubSubLiteSourceUpdate":
        from .update_gcp_pub_sub_lite_source import UpdateGcpPubSubLiteSource

        query = gql(
            """
            mutation UpdateGcpPubSubLiteSource($input: GcpPubSubLiteSourceUpdateInput!) {
              gcpPubSubLiteSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGcpPubSubLiteSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGcpPubSubLiteSource.model_validate(
            data
        ).gcp_pub_sub_lite_source_update

    async def update_gcp_pub_sub_source(
        self, input: "GcpPubSubSourceUpdateInput", **kwargs: Any
    ) -> "UpdateGcpPubSubSourceGcpPubSubSourceUpdate":
        from .update_gcp_pub_sub_source import UpdateGcpPubSubSource

        query = gql(
            """
            mutation UpdateGcpPubSubSource($input: GcpPubSubSourceUpdateInput!) {
              gcpPubSubSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGcpPubSubSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGcpPubSubSource.model_validate(data).gcp_pub_sub_source_update

    async def update_gcp_storage_source(
        self, input: "GcpStorageSourceUpdateInput", **kwargs: Any
    ) -> "UpdateGcpStorageSourceGcpStorageSourceUpdate":
        from .update_gcp_storage_source import UpdateGcpStorageSource

        query = gql(
            """
            mutation UpdateGcpStorageSource($input: GcpStorageSourceUpdateInput!) {
              gcpStorageSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGcpStorageSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGcpStorageSource.model_validate(data).gcp_storage_source_update

    async def update_global_window(
        self, input: "GlobalWindowUpdateInput", **kwargs: Any
    ) -> "UpdateGlobalWindowGlobalWindowUpdate":
        from .update_global_window import UpdateGlobalWindow

        query = gql(
            """
            mutation UpdateGlobalWindow($input: GlobalWindowUpdateInput!) {
              globalWindowUpdate(input: $input) {
                ...WindowUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }

            fragment WindowUpdate on WindowUpdateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateGlobalWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateGlobalWindow.model_validate(data).global_window_update

    async def update_incident_group_owner(
        self, input: "IncidentGroupOwnerUpdateInput", **kwargs: Any
    ) -> "UpdateIncidentGroupOwnerIncidentGroupOwnerUpdate":
        from .update_incident_group_owner import UpdateIncidentGroupOwner

        query = gql(
            """
            mutation UpdateIncidentGroupOwner($input: IncidentGroupOwnerUpdateInput!) {
              incidentGroupOwnerUpdate(input: $input) {
                errors {
                  code
                  message
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateIncidentGroupOwner",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateIncidentGroupOwner.model_validate(data).incident_group_owner_update

    async def update_incident_group_status(
        self, input: "IncidentGroupStatusUpdateInput", **kwargs: Any
    ) -> "UpdateIncidentGroupStatusIncidentGroupStatusUpdate":
        from .update_incident_group_status import UpdateIncidentGroupStatus

        query = gql(
            """
            mutation UpdateIncidentGroupStatus($input: IncidentGroupStatusUpdateInput!) {
              incidentGroupStatusUpdate(input: $input) {
                errors {
                  code
                  message
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateIncidentGroupStatus",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateIncidentGroupStatus.model_validate(
            data
        ).incident_group_status_update

    async def update_incident_status(
        self, input: "IncidentStatusUpdateInput", **kwargs: Any
    ) -> "UpdateIncidentStatusIncidentStatusUpdate":
        from .update_incident_status import UpdateIncidentStatus

        query = gql(
            """
            mutation UpdateIncidentStatus($input: IncidentStatusUpdateInput!) {
              incidentStatusUpdate(input: $input) {
                errors {
                  code
                  message
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateIncidentStatus",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateIncidentStatus.model_validate(data).incident_status_update

    async def update_kafka_sasl_ssl_plain_credential(
        self, input: "KafkaSaslSslPlainCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateKafkaSaslSslPlainCredentialKafkaSaslSslPlainCredentialUpdate":
        from .update_kafka_sasl_ssl_plain_credential import (
            UpdateKafkaSaslSslPlainCredential,
        )

        query = gql(
            """
            mutation UpdateKafkaSaslSslPlainCredential($input: KafkaSaslSslPlainCredentialUpdateInput!) {
              kafkaSaslSslPlainCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateKafkaSaslSslPlainCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateKafkaSaslSslPlainCredential.model_validate(
            data
        ).kafka_sasl_ssl_plain_credential_update

    async def update_kafka_source(
        self, input: "KafkaSourceUpdateInput", **kwargs: Any
    ) -> "UpdateKafkaSourceKafkaSourceUpdate":
        from .update_kafka_source import UpdateKafkaSource

        query = gql(
            """
            mutation UpdateKafkaSource($input: KafkaSourceUpdateInput!) {
              kafkaSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateKafkaSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateKafkaSource.model_validate(data).kafka_source_update

    async def update_kafka_ssl_credential(
        self, input: "KafkaSslCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateKafkaSslCredentialKafkaSslCredentialUpdate":
        from .update_kafka_ssl_credential import UpdateKafkaSslCredential

        query = gql(
            """
            mutation UpdateKafkaSslCredential($input: KafkaSslCredentialUpdateInput!) {
              kafkaSslCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateKafkaSslCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateKafkaSslCredential.model_validate(data).kafka_ssl_credential_update

    async def update_local_identity_provider(
        self, input: "LocalIdentityProviderUpdateInput", **kwargs: Any
    ) -> "UpdateLocalIdentityProviderLocalIdentityProviderUpdate":
        from .update_local_identity_provider import UpdateLocalIdentityProvider

        query = gql(
            """
            mutation UpdateLocalIdentityProvider($input: LocalIdentityProviderUpdateInput!) {
              localIdentityProviderUpdate(input: $input) {
                ...IdentityProviderUpdate
              }
            }

            fragment IdentityProviderDetails on IdentityProvider {
              __typename
              id
              name
              disabled
              createdAt
              updatedAt
              resourceName
              ... on SamlIdentityProvider {
                config {
                  entryPoint
                  entityId
                  cert
                }
              }
            }

            fragment IdentityProviderUpdate on IdentityProviderUpdateResult {
              errors {
                code
                message
              }
              identityProvider {
                ...IdentityProviderDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateLocalIdentityProvider",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateLocalIdentityProvider.model_validate(
            data
        ).local_identity_provider_update

    async def update_looker_credential(
        self, input: "LookerCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateLookerCredentialLookerCredentialUpdate":
        from .update_looker_credential import UpdateLookerCredential

        query = gql(
            """
            mutation UpdateLookerCredential($input: LookerCredentialUpdateInput!) {
              lookerCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateLookerCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateLookerCredential.model_validate(data).looker_credential_update

    async def update_ms_power_bi_credential(
        self, input: "MsPowerBiCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateMsPowerBiCredentialMsPowerBiCredentialUpdate":
        from .update_ms_power_bi_credential import UpdateMsPowerBiCredential

        query = gql(
            """
            mutation UpdateMsPowerBiCredential($input: MsPowerBiCredentialUpdateInput!) {
              msPowerBiCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateMsPowerBiCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateMsPowerBiCredential.model_validate(
            data
        ).ms_power_bi_credential_update

    async def update_ms_teams_channel(
        self, input: "MsTeamsChannelUpdateInput", **kwargs: Any
    ) -> "UpdateMsTeamsChannelMsTeamsChannelUpdate":
        from .update_ms_teams_channel import UpdateMsTeamsChannel

        query = gql(
            """
            mutation UpdateMsTeamsChannel($input: MsTeamsChannelUpdateInput!) {
              msTeamsChannelUpdate(input: $input) {
                ...ChannelUpdate
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ChannelUpdate on ChannelUpdateResult {
              errors {
                code
                message
              }
              channel {
                ...ChannelDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateMsTeamsChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateMsTeamsChannel.model_validate(data).ms_teams_channel_update

    async def update_namespace(
        self, input: "NamespaceUpdateInput", **kwargs: Any
    ) -> "UpdateNamespaceNamespaceUpdate":
        from .update_namespace import UpdateNamespace

        query = gql(
            """
            mutation UpdateNamespace($input: NamespaceUpdateInput!) {
              namespaceUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                namespace {
                  ...NamespaceDetails
                }
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UpdateNamespace", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateNamespace.model_validate(data).namespace_update

    async def update_notification_rule(
        self, input: "NotificationRuleUpdateInput", **kwargs: Any
    ) -> "UpdateNotificationRuleNotificationRuleUpdate":
        from .update_notification_rule import UpdateNotificationRule

        query = gql(
            """
            mutation UpdateNotificationRule($input: NotificationRuleUpdateInput!) {
              notificationRuleUpdate(input: $input) {
                ...NotificationRuleUpdate
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment NotificationRuleConditions on NotificationRuleCondition {
              __typename
              id
              notificationRuleId
              createdAt
              updatedAt
              ... on SourceNotificationRuleCondition {
                config {
                  sources {
                    __typename
                    id
                    name
                    resourceName
                  }
                }
              }
              ... on SeverityNotificationRuleCondition {
                config {
                  severities
                }
              }
              ... on TypeNotificationRuleCondition {
                config {
                  types
                }
              }
              ... on OwnerNotificationRuleCondition {
                config {
                  owners {
                    id
                    displayName
                  }
                }
              }
              ... on TagNotificationRuleCondition {
                config {
                  tags {
                    id
                    key
                    value
                  }
                }
              }
              ... on SegmentNotificationRuleCondition {
                config {
                  segments {
                    field
                    value
                  }
                }
              }
            }

            fragment NotificationRuleDetails on NotificationRule {
              __typename
              id
              name
              createdAt
              updatedAt
              conditions {
                ...NotificationRuleConditions
              }
              channel {
                ...ChannelDetails
              }
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
            }

            fragment NotificationRuleUpdate on NotificationRuleUpdateResult {
              errors {
                code
                message
              }
              notificationRule {
                ...NotificationRuleDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNotificationRule",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNotificationRule.model_validate(data).notification_rule_update

    async def update_null_filter(
        self, input: "NullFilterUpdateInput", **kwargs: Any
    ) -> "UpdateNullFilterNullFilterUpdate":
        from .update_null_filter import UpdateNullFilter

        query = gql(
            """
            mutation UpdateNullFilter($input: NullFilterUpdateInput!) {
              nullFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNullFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNullFilter.model_validate(data).null_filter_update

    async def update_numeric_anomaly_validator(
        self, input: "NumericAnomalyValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateNumericAnomalyValidatorNumericAnomalyValidatorUpdate":
        from .update_numeric_anomaly_validator import UpdateNumericAnomalyValidator

        query = gql(
            """
            mutation UpdateNumericAnomalyValidator($input: NumericAnomalyValidatorUpdateInput!) {
              numericAnomalyValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNumericAnomalyValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNumericAnomalyValidator.model_validate(
            data
        ).numeric_anomaly_validator_update

    async def update_numeric_distribution_validator(
        self, input: "NumericDistributionValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateNumericDistributionValidatorNumericDistributionValidatorUpdate":
        from .update_numeric_distribution_validator import (
            UpdateNumericDistributionValidator,
        )

        query = gql(
            """
            mutation UpdateNumericDistributionValidator($input: NumericDistributionValidatorUpdateInput!) {
              numericDistributionValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNumericDistributionValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNumericDistributionValidator.model_validate(
            data
        ).numeric_distribution_validator_update

    async def update_numeric_validator(
        self, input: "NumericValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateNumericValidatorNumericValidatorUpdate":
        from .update_numeric_validator import UpdateNumericValidator

        query = gql(
            """
            mutation UpdateNumericValidator($input: NumericValidatorUpdateInput!) {
              numericValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateNumericValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateNumericValidator.model_validate(data).numeric_validator_update

    async def update_owner_notification_rule_condition(
        self, input: "OwnerNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> "UpdateOwnerNotificationRuleConditionOwnerNotificationRuleConditionUpdate":
        from .update_owner_notification_rule_condition import (
            UpdateOwnerNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateOwnerNotificationRuleCondition($input: OwnerNotificationRuleConditionUpdateInput!) {
              ownerNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateOwnerNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateOwnerNotificationRuleCondition.model_validate(
            data
        ).owner_notification_rule_condition_update

    async def update_postgre_sql_credential(
        self, input: "PostgreSqlCredentialUpdateInput", **kwargs: Any
    ) -> "UpdatePostgreSqlCredentialPostgreSqlCredentialUpdate":
        from .update_postgre_sql_credential import UpdatePostgreSqlCredential

        query = gql(
            """
            mutation UpdatePostgreSqlCredential($input: PostgreSqlCredentialUpdateInput!) {
              postgreSqlCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdatePostgreSqlCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePostgreSqlCredential.model_validate(
            data
        ).postgre_sql_credential_update

    async def update_postgre_sql_source(
        self, input: "PostgreSqlSourceUpdateInput", **kwargs: Any
    ) -> "UpdatePostgreSqlSourcePostgreSqlSourceUpdate":
        from .update_postgre_sql_source import UpdatePostgreSqlSource

        query = gql(
            """
            mutation UpdatePostgreSqlSource($input: PostgreSqlSourceUpdateInput!) {
              postgreSqlSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdatePostgreSqlSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdatePostgreSqlSource.model_validate(data).postgre_sql_source_update

    async def update_relative_time_validator(
        self, input: "RelativeTimeValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateRelativeTimeValidatorRelativeTimeValidatorUpdate":
        from .update_relative_time_validator import UpdateRelativeTimeValidator

        query = gql(
            """
            mutation UpdateRelativeTimeValidator($input: RelativeTimeValidatorUpdateInput!) {
              relativeTimeValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateRelativeTimeValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateRelativeTimeValidator.model_validate(
            data
        ).relative_time_validator_update

    async def update_relative_volume_validator(
        self, input: "RelativeVolumeValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateRelativeVolumeValidatorRelativeVolumeValidatorUpdate":
        from .update_relative_volume_validator import UpdateRelativeVolumeValidator

        query = gql(
            """
            mutation UpdateRelativeVolumeValidator($input: RelativeVolumeValidatorUpdateInput!) {
              relativeVolumeValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateRelativeVolumeValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateRelativeVolumeValidator.model_validate(
            data
        ).relative_volume_validator_update

    async def update_saml_identity_provider(
        self, input: "SamlIdentityProviderUpdateInput", **kwargs: Any
    ) -> "UpdateSamlIdentityProviderSamlIdentityProviderUpdate":
        from .update_saml_identity_provider import UpdateSamlIdentityProvider

        query = gql(
            """
            mutation UpdateSamlIdentityProvider($input: SamlIdentityProviderUpdateInput!) {
              samlIdentityProviderUpdate(input: $input) {
                ...IdentityProviderUpdate
              }
            }

            fragment IdentityProviderDetails on IdentityProvider {
              __typename
              id
              name
              disabled
              createdAt
              updatedAt
              resourceName
              ... on SamlIdentityProvider {
                config {
                  entryPoint
                  entityId
                  cert
                }
              }
            }

            fragment IdentityProviderUpdate on IdentityProviderUpdateResult {
              errors {
                code
                message
              }
              identityProvider {
                ...IdentityProviderDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSamlIdentityProvider",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSamlIdentityProvider.model_validate(
            data
        ).saml_identity_provider_update

    async def update_segment_notification_rule_condition(
        self, input: "SegmentNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> "UpdateSegmentNotificationRuleConditionSegmentNotificationRuleConditionUpdate":
        from .update_segment_notification_rule_condition import (
            UpdateSegmentNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateSegmentNotificationRuleCondition($input: SegmentNotificationRuleConditionUpdateInput!) {
              segmentNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSegmentNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSegmentNotificationRuleCondition.model_validate(
            data
        ).segment_notification_rule_condition_update

    async def update_segmentation(
        self, input: "SegmentationUpdateInput", **kwargs: Any
    ) -> "UpdateSegmentationSegmentationUpdate":
        from .update_segmentation import UpdateSegmentation

        query = gql(
            """
            mutation UpdateSegmentation($input: SegmentationUpdateInput!) {
              segmentationUpdate(input: $input) {
                ...SegmentationUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SegmentationDetails on Segmentation {
              __typename
              id
              name
              source {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              fields
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              filter {
                __typename
                id
                name
              }
            }

            fragment SegmentationUpdate on SegmentationUpdateResult {
              errors {
                ...ErrorDetails
              }
              segmentation {
                ...SegmentationDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSegmentation",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSegmentation.model_validate(data).segmentation_update

    async def update_severity_notification_rule_condition(
        self, input: "SeverityNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> (
        "UpdateSeverityNotificationRuleConditionSeverityNotificationRuleConditionUpdate"
    ):
        from .update_severity_notification_rule_condition import (
            UpdateSeverityNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateSeverityNotificationRuleCondition($input: SeverityNotificationRuleConditionUpdateInput!) {
              severityNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSeverityNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSeverityNotificationRuleCondition.model_validate(
            data
        ).severity_notification_rule_condition_update

    async def update_slack_channel(
        self, input: "SlackChannelUpdateInput", **kwargs: Any
    ) -> "UpdateSlackChannelSlackChannelUpdate":
        from .update_slack_channel import UpdateSlackChannel

        query = gql(
            """
            mutation UpdateSlackChannel($input: SlackChannelUpdateInput!) {
              slackChannelUpdate(input: $input) {
                ...ChannelUpdate
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ChannelUpdate on ChannelUpdateResult {
              errors {
                code
                message
              }
              channel {
                ...ChannelDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSlackChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSlackChannel.model_validate(data).slack_channel_update

    async def update_snowflake_credential(
        self, input: "SnowflakeCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateSnowflakeCredentialSnowflakeCredentialUpdate":
        from .update_snowflake_credential import UpdateSnowflakeCredential

        query = gql(
            """
            mutation UpdateSnowflakeCredential($input: SnowflakeCredentialUpdateInput!) {
              snowflakeCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSnowflakeCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSnowflakeCredential.model_validate(
            data
        ).snowflake_credential_update

    async def update_snowflake_source(
        self, input: "SnowflakeSourceUpdateInput", **kwargs: Any
    ) -> "UpdateSnowflakeSourceSnowflakeSourceUpdate":
        from .update_snowflake_source import UpdateSnowflakeSource

        query = gql(
            """
            mutation UpdateSnowflakeSource($input: SnowflakeSourceUpdateInput!) {
              snowflakeSourceUpdate(input: $input) {
                ...SourceUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }

            fragment SourceUpdate on SourceUpdateResult {
              errors {
                ...ErrorDetails
              }
              source {
                ...SourceDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSnowflakeSource",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSnowflakeSource.model_validate(data).snowflake_source_update

    async def update_source_notification_rule_condition(
        self, input: "SourceNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> "UpdateSourceNotificationRuleConditionSourceNotificationRuleConditionUpdate":
        from .update_source_notification_rule_condition import (
            UpdateSourceNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateSourceNotificationRuleCondition($input: SourceNotificationRuleConditionUpdateInput!) {
              sourceNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSourceNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSourceNotificationRuleCondition.model_validate(
            data
        ).source_notification_rule_condition_update

    async def update_source_owner(
        self, input: "SourceOwnerUpdateInput", **kwargs: Any
    ) -> "UpdateSourceOwnerSourceOwnerUpdate":
        from .update_source_owner import UpdateSourceOwner

        query = gql(
            """
            mutation UpdateSourceOwner($input: SourceOwnerUpdateInput!) {
              sourceOwnerUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                source {
                  ...SourceDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment SourceDetails on Source {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              catalogAsset {
                __typename
                id
                assetType
              }
              credential {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              windows {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              segmentations {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              jtdSchema
              state
              stateUpdatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              filters {
                __typename
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
              }
              ... on GcpStorageSource {
                config {
                  project
                  bucket
                  folder
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on GcpBigQuerySource {
                config {
                  project
                  dataset
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on GcpPubSubSource {
                config {
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on GcpPubSubLiteSource {
                config {
                  location
                  project
                  subscriptionId
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsAthenaSource {
                config {
                  catalog
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsKinesisSource {
                config {
                  region
                  streamName
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on AwsRedshiftSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on AwsS3Source {
                config {
                  bucket
                  prefix
                  csv {
                    nullMarker
                    delimiter
                  }
                  schedule
                  filePattern
                  fileFormat
                }
              }
              ... on AzureSynapseSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on DatabricksSource {
                config {
                  catalog
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                  httpPath
                }
              }
              ... on DbtTestResultSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on DbtModelRunSource {
                config {
                  jobName
                  projectName
                  schedule
                }
              }
              ... on PostgreSqlSource {
                config {
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on SnowflakeSource {
                config {
                  role
                  warehouse
                  database
                  schema
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
              ... on KafkaSource {
                config {
                  topic
                  messageFormat {
                    format
                    schema
                  }
                }
              }
              ... on ClickHouseSource {
                config {
                  database
                  table
                  cursorField
                  lookbackDays
                  schedule
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSourceOwner",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSourceOwner.model_validate(data).source_owner_update

    async def update_sql_filter(
        self, input: "SqlFilterUpdateInput", **kwargs: Any
    ) -> "UpdateSqlFilterSqlFilterUpdate":
        from .update_sql_filter import UpdateSqlFilter

        query = gql(
            """
            mutation UpdateSqlFilter($input: SqlFilterUpdateInput!) {
              sqlFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UpdateSqlFilter", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateSqlFilter.model_validate(data).sql_filter_update

    async def update_sql_validator(
        self, input: "SqlValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateSqlValidatorSqlValidatorUpdate":
        from .update_sql_validator import UpdateSqlValidator

        query = gql(
            """
            mutation UpdateSqlValidator($input: SqlValidatorUpdateInput!) {
              sqlValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateSqlValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateSqlValidator.model_validate(data).sql_validator_update

    async def update_string_filter(
        self, input: "StringFilterUpdateInput", **kwargs: Any
    ) -> "UpdateStringFilterStringFilterUpdate":
        from .update_string_filter import UpdateStringFilter

        query = gql(
            """
            mutation UpdateStringFilter($input: StringFilterUpdateInput!) {
              stringFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateStringFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateStringFilter.model_validate(data).string_filter_update

    async def update_tableau_connected_app_credential(
        self, input: "TableauConnectedAppCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateTableauConnectedAppCredentialTableauConnectedAppCredentialUpdate":
        from .update_tableau_connected_app_credential import (
            UpdateTableauConnectedAppCredential,
        )

        query = gql(
            """
            mutation UpdateTableauConnectedAppCredential($input: TableauConnectedAppCredentialUpdateInput!) {
              tableauConnectedAppCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateTableauConnectedAppCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTableauConnectedAppCredential.model_validate(
            data
        ).tableau_connected_app_credential_update

    async def update_tableau_personal_access_token_credential(
        self, input: "TableauPersonalAccessTokenCredentialUpdateInput", **kwargs: Any
    ) -> "UpdateTableauPersonalAccessTokenCredentialTableauPersonalAccessTokenCredentialUpdate":
        from .update_tableau_personal_access_token_credential import (
            UpdateTableauPersonalAccessTokenCredential,
        )

        query = gql(
            """
            mutation UpdateTableauPersonalAccessTokenCredential($input: TableauPersonalAccessTokenCredentialUpdateInput!) {
              tableauPersonalAccessTokenCredentialUpdate(input: $input) {
                ...CredentialUpdate
              }
            }

            fragment CredentialBase on Credential {
              id
              __typename
              name
              resourceName
              namespaceId
              namespace {
                id
              }
            }

            fragment CredentialDetails on Credential {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on AwsCredential {
                config {
                  accessKey
                }
                enableCatalog
              }
              ... on AwsAthenaCredential {
                config {
                  accessKey
                  region
                  queryResultLocation
                }
                enableCatalog
              }
              ... on AwsRedshiftCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on AzureSynapseEntraIdCredential {
                config {
                  clientId
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on AzureSynapseSqlCredential {
                config {
                  username
                  host
                  port
                  database
                  backendType
                }
                enableCatalog
              }
              ... on DatabricksCredential {
                config {
                  host
                  port
                  httpPath
                }
                enableCatalog
              }
              ... on ClickHouseCredential {
                config {
                  protocol
                  host
                  port
                  username
                  defaultDatabase
                }
                enableCatalog
              }
              ... on DbtCloudCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                  accountId
                  apiBaseUrl
                }
              }
              ... on DbtCoreCredential {
                config {
                  warehouseCredential {
                    __typename
                    ...CredentialBase
                  }
                }
              }
              ... on LookerCredential {
                config {
                  baseUrl
                  clientId
                }
                enableCatalog
              }
              ... on PostgreSqlCredential {
                config {
                  host
                  port
                  user
                  defaultDatabase
                }
                enableCatalog
              }
              ... on SnowflakeCredential {
                config {
                  account
                  user
                  role
                  warehouse
                  auth {
                    __typename
                    ... on SnowflakeCredentialKeyPair {
                      user
                    }
                    ... on SnowflakeCredentialUserPassword {
                      user
                    }
                  }
                }
                enableCatalog
              }
              ... on KafkaSslCredential {
                config {
                  bootstrapServers
                  caCertificate
                }
                enableCatalog
              }
              ... on KafkaSaslSslPlainCredential {
                config {
                  bootstrapServers
                  username
                }
                enableCatalog
              }
              ... on TableauConnectedAppCredential {
                config {
                  host
                  site
                  user
                  clientId
                  secretId
                }
                enableCatalog
              }
              ... on TableauPersonalAccessTokenCredential {
                config {
                  host
                  site
                  tokenName
                }
                enableCatalog
              }
              ... on GcpCredential {
                enableCatalog
              }
              ... on MsPowerBiCredential {
                config {
                  powerBiAuth: auth {
                    __typename
                    ... on MsPowerBiCredentialAuthEntraId {
                      clientId
                      tenantId
                    }
                  }
                }
                enableCatalog
              }
            }

            fragment CredentialUpdate on CredentialUpdateResult {
              errors {
                ...ErrorDetails
              }
              credential {
                ...CredentialDetails
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateTableauPersonalAccessTokenCredential",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTableauPersonalAccessTokenCredential.model_validate(
            data
        ).tableau_personal_access_token_credential_update

    async def update_tag(
        self, input: "TagUpdateInput", **kwargs: Any
    ) -> "UpdateTagTagUpdate":
        from .update_tag import UpdateTag

        query = gql(
            """
            mutation UpdateTag($input: TagUpdateInput!) {
              tagUpdate(input: $input) {
                ...TagUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TagDetails on Tag {
              id
              key
              value
              createdAt
              origin
              updatedAt
            }

            fragment TagUpdate on TagUpdateResult {
              errors {
                ...ErrorDetails
              }
              tag {
                ...TagDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UpdateTag", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateTag.model_validate(data).tag_update

    async def update_tag_notification_rule_condition(
        self, input: "TagNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> "UpdateTagNotificationRuleConditionTagNotificationRuleConditionUpdate":
        from .update_tag_notification_rule_condition import (
            UpdateTagNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateTagNotificationRuleCondition($input: TagNotificationRuleConditionUpdateInput!) {
              tagNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateTagNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTagNotificationRuleCondition.model_validate(
            data
        ).tag_notification_rule_condition_update

    async def update_team(
        self, input: "TeamUpdateInput", **kwargs: Any
    ) -> "UpdateTeamTeamUpdate":
        from .update_team import UpdateTeam

        query = gql(
            """
            mutation UpdateTeam($input: TeamUpdateInput!) {
              teamUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                team {
                  ...TeamDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UpdateTeam", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateTeam.model_validate(data).team_update

    async def update_threshold_filter(
        self, input: "ThresholdFilterUpdateInput", **kwargs: Any
    ) -> "UpdateThresholdFilterThresholdFilterUpdate":
        from .update_threshold_filter import UpdateThresholdFilter

        query = gql(
            """
            mutation UpdateThresholdFilter($input: ThresholdFilterUpdateInput!) {
              thresholdFilterUpdate(input: $input) {
                ...FilterUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment FilterUpdate on FilterResult {
              errors {
                ...ErrorDetails
              }
              filter {
                ...FilterDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateThresholdFilter",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateThresholdFilter.model_validate(data).threshold_filter_update

    async def update_tumbling_window(
        self, input: "TumblingWindowUpdateInput", **kwargs: Any
    ) -> "UpdateTumblingWindowTumblingWindowUpdate":
        from .update_tumbling_window import UpdateTumblingWindow

        query = gql(
            """
            mutation UpdateTumblingWindow($input: TumblingWindowUpdateInput!) {
              tumblingWindowUpdate(input: $input) {
                ...WindowUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment WindowDetails on Window {
              __typename
              id
              name
              source {
                id
                name
                resourceName
                namespaceId
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
              }
              ... on FileWindow {
                dataTimeField
              }
              ... on FixedBatchWindow {
                config {
                  batchSize
                  segmentedBatching
                  batchTimeoutSecs
                }
                dataTimeField
              }
              ... on TumblingWindow {
                config {
                  windowSize
                  timeUnit
                  windowTimeoutDisabled
                }
                dataTimeField
              }
            }

            fragment WindowUpdate on WindowUpdateResult {
              errors {
                ...ErrorDetails
              }
              window {
                ...WindowDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateTumblingWindow",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTumblingWindow.model_validate(data).tumbling_window_update

    async def update_type_notification_rule_condition(
        self, input: "TypeNotificationRuleConditionUpdateInput", **kwargs: Any
    ) -> "UpdateTypeNotificationRuleConditionTypeNotificationRuleConditionUpdate":
        from .update_type_notification_rule_condition import (
            UpdateTypeNotificationRuleCondition,
        )

        query = gql(
            """
            mutation UpdateTypeNotificationRuleCondition($input: TypeNotificationRuleConditionUpdateInput!) {
              typeNotificationRuleConditionUpdate(input: $input) {
                ...NotificationRuleConditionCreation
              }
            }

            fragment NotificationRuleConditionCreation on NotificationRuleConditionCreateResult {
              errors {
                code
                message
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateTypeNotificationRuleCondition",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateTypeNotificationRuleCondition.model_validate(
            data
        ).type_notification_rule_condition_update

    async def update_user(
        self, input: "UserUpdateInput", **kwargs: Any
    ) -> "UpdateUserUserUpdate":
        from .update_user import UpdateUser

        query = gql(
            """
            mutation UpdateUser($input: UserUpdateInput!) {
              userUpdate(input: $input) {
                ...UserUpdate
              }
            }

            fragment ApiKeyDetails on ApiKey {
              id
              name
              createdAt
              updatedAt
              lastUsedAt
              globalRole
            }

            fragment IdentityDetails on Identity {
              ... on LocalIdentity {
                __typename
                id
                userId
                username
                createdAt
              }
              ... on FederatedIdentity {
                __typename
                id
                userId
                idp {
                  __typename
                  id
                  name
                }
                createdAt
              }
            }

            fragment NamespaceDetails on Namespace {
              id
              name
              description
              avatarThumbnail
              members {
                role
                user {
                  ...UserSummary
                }
              }
              teams {
                role
                team {
                  ...TeamDetails
                }
              }
              apiKeys {
                role
                apiKey {
                  ...ApiKeyDetails
                }
              }
              users {
                role
                user {
                  ...UserSummary
                }
              }
            }

            fragment TeamDetails on Team {
              id
              name
              description
              avatarThumbnail
              avatar
              members {
                id
                displayName
                avatarThumbnail
                status
                email
                lastLoginAt
              }
              createdAt
              updatedAt
            }

            fragment UserDetails on User {
              id
              displayName
              fullName
              email
              status
              avatar
              avatarThumbnail
              loginType
              globalRole
              identities {
                ...IdentityDetails
              }
              teams {
                ...TeamDetails
              }
              namespaces {
                ...NamespaceDetails
              }
              createdAt
              updatedAt
              lastLoginAt
              resourceName
            }

            fragment UserSummary on User {
              id
              displayName
              fullName
              email
              avatarThumbnail
              status
              globalRole
              loginType
              lastLoginAt
              updatedAt
              identities {
                __typename
                ... on LocalIdentity {
                  username
                }
              }
            }

            fragment UserUpdate on UserUpdateResult {
              errors {
                code
                message
              }
              user {
                ...UserDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query, operation_name="UpdateUser", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateUser.model_validate(data).user_update

    async def update_validator_with_difference_threshold(
        self, input: "ValidatorWithDifferenceThresholdUpdateInput", **kwargs: Any
    ) -> "UpdateValidatorWithDifferenceThresholdValidatorWithDifferenceThresholdUpdate":
        from .update_validator_with_difference_threshold import (
            UpdateValidatorWithDifferenceThreshold,
        )

        query = gql(
            """
            mutation UpdateValidatorWithDifferenceThreshold($input: ValidatorWithDifferenceThresholdUpdateInput!) {
              validatorWithDifferenceThresholdUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                validator {
                  ...ValidatorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateValidatorWithDifferenceThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateValidatorWithDifferenceThreshold.model_validate(
            data
        ).validator_with_difference_threshold_update

    async def update_validator_with_dynamic_threshold(
        self, input: "ValidatorWithDynamicThresholdUpdateInput", **kwargs: Any
    ) -> "UpdateValidatorWithDynamicThresholdValidatorWithDynamicThresholdUpdate":
        from .update_validator_with_dynamic_threshold import (
            UpdateValidatorWithDynamicThreshold,
        )

        query = gql(
            """
            mutation UpdateValidatorWithDynamicThreshold($input: ValidatorWithDynamicThresholdUpdateInput!) {
              validatorWithDynamicThresholdUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                validator {
                  ...ValidatorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateValidatorWithDynamicThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateValidatorWithDynamicThreshold.model_validate(
            data
        ).validator_with_dynamic_threshold_update

    async def update_validator_with_fixed_threshold(
        self, input: "ValidatorWithFixedThresholdUpdateInput", **kwargs: Any
    ) -> "UpdateValidatorWithFixedThresholdValidatorWithFixedThresholdUpdate":
        from .update_validator_with_fixed_threshold import (
            UpdateValidatorWithFixedThreshold,
        )

        query = gql(
            """
            mutation UpdateValidatorWithFixedThreshold($input: ValidatorWithFixedThresholdUpdateInput!) {
              validatorWithFixedThresholdUpdate(input: $input) {
                errors {
                  ...ErrorDetails
                }
                validator {
                  ...ValidatorDetails
                }
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateValidatorWithFixedThreshold",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateValidatorWithFixedThreshold.model_validate(
            data
        ).validator_with_fixed_threshold_update

    async def update_volume_validator(
        self, input: "VolumeValidatorUpdateInput", **kwargs: Any
    ) -> "UpdateVolumeValidatorVolumeValidatorUpdate":
        from .update_volume_validator import UpdateVolumeValidator

        query = gql(
            """
            mutation UpdateVolumeValidator($input: VolumeValidatorUpdateInput!) {
              volumeValidatorUpdate(input: $input) {
                ...ValidatorUpdate
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }

            fragment FilterDetails on Filter {
              __typename
              id
              name
              namespace {
                id
              }
              resourceName
              source {
                id
                name
                resourceName
                namespace {
                  id
                }
                __typename
              }
              createdAt
              updatedAt
              ... on BooleanFilter {
                config {
                  field
                  booleanOperator: operator
                }
              }
              ... on EnumFilter {
                config {
                  field
                  values
                  enumOperator: operator
                }
              }
              ... on NullFilter {
                config {
                  field
                  nullOperator: operator
                }
              }
              ... on SqlFilter {
                config {
                  query
                }
              }
              ... on StringFilter {
                config {
                  field
                  stringValue: value
                  stringOperator: operator
                }
              }
              ... on ThresholdFilter {
                config {
                  field
                  thresholdValue: value
                  thresholdOperator: operator
                }
              }
            }

            fragment ThresholdDetails on Threshold {
              __typename
              ... on FixedThreshold {
                operator
                value
              }
              ... on DynamicThreshold {
                sensitivity
                decisionBoundsType
              }
              ... on DifferenceThreshold {
                differenceOperator: operator
                differenceType
                numberOfWindows
                value
              }
            }

            fragment ValidatorDetails on Validator {
              __typename
              id
              name
              description
              createdAt
              updatedAt
              hasCustomName
              sourceConfig {
                source {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                window {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                segmentation {
                  __typename
                  id
                  name
                  resourceName
                  namespaceId
                  namespace {
                    id
                  }
                }
                filter
                sourceFilter {
                  ...FilterDetails
                }
              }
              resourceName
              namespaceId
              namespace {
                id
              }
              tags {
                key
                value
              }
              ... on NumericValidator {
                config {
                  sourceField
                  metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on CategoricalDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  categoricalDistributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on NumericDistributionValidator {
                config {
                  sourceField
                  referenceSourceField
                  distributionMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on VolumeValidator {
                config {
                  optionalSourceField: sourceField
                  sourceFields
                  volumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on NumericAnomalyValidator {
                config {
                  sourceField
                  numericAnomalyMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                  referenceSourceField
                  sensitivity
                  minimumReferenceDatapoints
                  minimumAbsoluteDifference
                  minimumRelativeDifferencePercent
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on RelativeTimeValidator {
                config {
                  sourceFieldMinuend
                  sourceFieldSubtrahend
                  relativeTimeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on FreshnessValidator {
                config {
                  initializeWithBackfill
                  optionalSourceField: sourceField
                  threshold {
                    ...ThresholdDetails
                  }
                }
              }
              ... on RelativeVolumeValidator {
                config {
                  optionalSourceField: sourceField
                  optionalReferenceSourceField: referenceSourceField
                  relativeVolumeMetric: metric
                  initializeWithBackfill
                  threshold {
                    ...ThresholdDetails
                  }
                }
                referenceSourceConfig {
                  source {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  window {
                    __typename
                    id
                    name
                    resourceName
                    namespaceId
                    namespace {
                      id
                    }
                  }
                  history
                  offset
                  filter
                  sourceFilter {
                    ...FilterDetails
                  }
                }
              }
              ... on SqlValidator {
                config {
                  query
                  threshold {
                    ...ThresholdDetails
                  }
                  initializeWithBackfill
                }
              }
            }

            fragment ValidatorUpdate on ValidatorUpdateResult {
              errors {
                ...ErrorDetails
              }
              validator {
                ...ValidatorDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateVolumeValidator",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateVolumeValidator.model_validate(data).volume_validator_update

    async def update_webhook_channel(
        self, input: "WebhookChannelUpdateInput", **kwargs: Any
    ) -> "UpdateWebhookChannelWebhookChannelUpdate":
        from .update_webhook_channel import UpdateWebhookChannel

        query = gql(
            """
            mutation UpdateWebhookChannel($input: WebhookChannelUpdateInput!) {
              webhookChannelUpdate(input: $input) {
                ...ChannelUpdate
              }
            }

            fragment ChannelDetails on Channel {
              __typename
              id
              name
              createdAt
              updatedAt
              resourceName
              namespaceId
              namespace {
                id
                name
                avatarThumbnail
              }
              notificationRules {
                __typename
                id
                name
              }
              ... on SlackChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  slackChannelId
                  interactiveMessageEnabled
                }
              }
              ... on WebhookChannel {
                config {
                  webhookUrl
                  applicationLinkUrl
                  authHeader
                }
              }
              ... on MsTeamsChannel {
                config {
                  webhookUrl
                  timezone
                  applicationLinkUrl
                  msTeamsChannelId
                  interactiveMessageEnabled
                }
              }
            }

            fragment ChannelUpdate on ChannelUpdateResult {
              errors {
                code
                message
              }
              channel {
                ...ChannelDetails
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="UpdateWebhookChannel",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return UpdateWebhookChannel.model_validate(data).webhook_channel_update

    async def verify_source_schema(
        self, id: SourceId, schema: JsonTypeDefinition, **kwargs: Any
    ) -> "VerifySourceSchemaSourceSchemaVerify":
        from .verify_source_schema import VerifySourceSchema

        query = gql(
            """
            mutation VerifySourceSchema($id: SourceId!, $schema: JsonTypeDefinition!) {
              sourceSchemaVerify(id: $id, input: $schema) {
                validatorConflicts {
                  validator {
                    __typename
                    id
                    name
                  }
                  fields
                }
                segmentationConflicts {
                  segmentation {
                    id
                    name
                  }
                  fields
                }
                windowConflicts {
                  window {
                    __typename
                    id
                    name
                  }
                  fields
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "schema": schema}
        response = await self.execute(
            query=query,
            operation_name="VerifySourceSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return VerifySourceSchema.model_validate(data).source_schema_verify

    async def webhook_channel_secret_changed(
        self, input: "WebhookChannelSecretChangedInput", **kwargs: Any
    ) -> "WebhookChannelSecretChangedWebhookChannelSecretChanged":
        from .webhook_channel_secret_changed import WebhookChannelSecretChanged

        query = gql(
            """
            query WebhookChannelSecretChanged($input: WebhookChannelSecretChangedInput!) {
              webhookChannelSecretChanged(input: $input) {
                errors {
                  ...ErrorDetails
                }
                authHeader
              }
            }

            fragment ErrorDetails on ApiError {
              __typename
              code
              message
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = await self.execute(
            query=query,
            operation_name="WebhookChannelSecretChanged",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return WebhookChannelSecretChanged.model_validate(
            data
        ).webhook_channel_secret_changed
